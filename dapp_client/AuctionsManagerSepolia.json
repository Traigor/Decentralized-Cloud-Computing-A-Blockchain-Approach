{
  "address": "0xEde415294d4822728eFCb6C94b28ECCaBCA2C428",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuctionsManager.AuctionState",
          "name": "auctionState",
          "type": "uint8"
        }
      ],
      "name": "AuctionNotInState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByClient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "TaskIDCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taskDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_clientVerification",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "deleteAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionActiveBidsByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ProviderBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionWinnersByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionsByClient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tasksManagerAddress",
          "type": "address"
        }
      ],
      "name": "setTasksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x565b695d4676375e92318eb3829a32b562eb1ecd0d3d0451657d13ba87049f55",
  "receipt": {
    "to": null,
    "from": "0xB3b0E9E018bA957e29d6C883A84412972C6A7366",
    "contractAddress": "0xEde415294d4822728eFCb6C94b28ECCaBCA2C428",
    "transactionIndex": 64,
    "gasUsed": "3900382",
    "logsBloom": "0x
    "blockHash": "0xf1a479ffde577151d230fadb5b3728a73ee319bb19349a2eca600331995c986f",
    "transactionHash": "0x565b695d4676375e92318eb3829a32b562eb1ecd0d3d0451657d13ba87049f55",
    "logs": [],
    "blockNumber": 4274545,
    "cumulativeGasUsed": "18349871",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "6d6258c5498b6d8704a8e5887e493123",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"name\":\"AuctionNotInState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByClient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"TaskIDCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"deleteAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionActiveBidsByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionWinnersByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionsByClient\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tasksManagerAddress\",\"type\":\"address\"}],\"name\":\"setTasksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TasksManager.sol\\\";\\n\\ncontract AuctionsManager {\\n     address private immutable owner; \\n     TasksManager tasksManager;\\n\\n     enum AuctionState {\\n        Created,\\n        Cancelled, \\n        Finalized\\n    }\\n\\n    struct Auction {\\n        bytes32 auctionID;\\n        address client;\\n        uint creationTime;\\n        uint auctionDeadline;\\n        uint taskDeadline;\\n        bytes32 clientVerification;\\n        bytes32 taskID;\\n        string code;\\n        ProviderBid[] providerBids;\\n        WinnerBid winnerBid;\\n        AuctionState auctionState;   \\n    }\\n\\n    struct ProviderBid {\\n        address provider;\\n        uint bid;\\n        uint providerUpVotes;\\n        uint providerDownVotes;\\n    }\\n\\n    struct WinnerBid {\\n        address provider;\\n        uint bid;\\n    }\\n\\n    mapping (bytes32 => Auction) private auctions;\\n    bytes32[] private bytes32_auctions;\\n\\n    //Events\\n    event AuctionCreated(bytes32 auctionID, address client);\\n    event AuctionCancelled(bytes32 auctionID, address client);\\n    event AuctionFinalized(bytes32 auctionID, address client, address provider);\\n    event AuctionDeleted(bytes32 auctionID);\\n    event BidPlaced(bytes32 auctionID, address provider, uint bid);\\n    event TaskIDCreated(bytes32 auctionID, bytes32 taskID, address client, address provider);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByClient();\\n    error AuctionDoesNotExist();\\n    error AuctionNotInState(AuctionState auctionState);\\n\\n    constructor()  {\\n        owner = msg.sender;\\n    }\\n\\n    function setTasksManager(address payable _tasksManagerAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        tasksManager = TasksManager(_tasksManagerAddress);\\n    }\\n\\n    function createAuction(\\n        uint _auctionDeadline, \\n        uint _taskDeadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public \\n    {\\n        bytes32 _auctionID = keccak256(abi.encode(block.timestamp, msg.sender, _auctionDeadline, _taskDeadline, _clientVerification, _code));\\n        auctions[_auctionID].auctionID = _auctionID;\\n        auctions[_auctionID].client = msg.sender;\\n        auctions[_auctionID].creationTime = block.timestamp;\\n        auctions[_auctionID].auctionDeadline = _auctionDeadline;\\n        auctions[_auctionID].taskDeadline = _taskDeadline;\\n        auctions[_auctionID].clientVerification = _clientVerification;\\n        auctions[_auctionID].code = _code;\\n\\n        auctions[_auctionID].auctionState = AuctionState.Created;\\n        bytes32_auctions.push(_auctionID);\\n        emit AuctionCreated( _auctionID, msg.sender);\\n    }\\n\\n    function cancelAuction(bytes32 _auctionID) public   {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();   \\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        auctions[_auctionID].auctionState = AuctionState.Cancelled;\\n        emit AuctionCancelled(_auctionID, auctions[_auctionID].client);\\n     }\\n\\n    function bid(bytes32 _auctionID, uint _bid) public {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        require(msg.sender != auctions[_auctionID].client, \\\"Client can't bid to this auction\\\"); \\n        require(\\n            (block.timestamp <= auctions[_auctionID].creationTime + auctions[_auctionID].auctionDeadline),\\n            \\\"Time has expired.\\\"\\n        );\\n        uint providerIndex = 0;\\n        bool providerExists = false;\\n        if(auctions[_auctionID].providerBids.length != 0)\\n        {    while(auctions[_auctionID].providerBids[providerIndex].provider != msg.sender)\\n            {\\n                providerIndex++;\\n                if(providerIndex > auctions[_auctionID].providerBids.length)\\n                    break;\\n            }\\n            if (providerIndex <= auctions[_auctionID].providerBids.length)\\n            {\\n                require(\\n                _bid < auctions[_auctionID].providerBids[providerIndex].bid,\\n                \\\"Bid is not lower than than the previous one.\\\"\\n                );\\n                providerExists = true;\\n            }\\n        }\\n        if(providerExists == true)\\n        {\\n            auctions[_auctionID].providerBids[providerIndex].bid = _bid;\\n            auctions[_auctionID].providerBids[providerIndex].providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n            auctions[_auctionID].providerBids[providerIndex].providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n        }\\n        else \\n        {\\n            ProviderBid memory currentBid;\\n            currentBid.provider = msg.sender;\\n            currentBid.bid = _bid;\\n            currentBid.providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n            currentBid.providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n            auctions[_auctionID].providerBids.push(currentBid);\\n        }\\n        emit BidPlaced(_auctionID, msg.sender, _bid);\\n     }\\n\\n    function finalize(bytes32 _auctionID, address _provider) public payable  {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        uint providerIndex = 0;\\n        if (auctions[_auctionID].providerBids.length == 0)\\n            revert(\\\"Auction has no bids.\\\");\\n        while(auctions[_auctionID].providerBids[providerIndex].provider != _provider)\\n        {\\n            providerIndex++;\\n            if(providerIndex >= auctions[_auctionID].providerBids.length)\\n                break;\\n        }\\n        if(providerIndex >= auctions[_auctionID].providerBids.length)\\n         revert(\\\"Wrong provider address\\\");\\n        WinnerBid memory _winnerBid;\\n        _winnerBid.provider = _provider;\\n        _winnerBid.bid = auctions[_auctionID].providerBids[providerIndex].bid;\\n        require (msg.value ==(_winnerBid.bid * 2), \\\"Client collateral is not correct\\\");\\n        auctions[_auctionID].winnerBid = _winnerBid;\\n        Auction storage currentAuction = auctions[_auctionID];\\n        auctions[_auctionID].auctionState = AuctionState.Finalized;\\n        emit AuctionFinalized(_auctionID, auctions[_auctionID].client,  _provider);\\n        bytes32 taskID = keccak256(abi.encode(currentAuction.client, _winnerBid, block.timestamp));\\n        auctions[_auctionID].taskID = taskID;\\n        emit TaskIDCreated(_auctionID, taskID, auctions[_auctionID].client , _provider);\\n        uint clientCollateral = auctions[_auctionID].winnerBid.bid * 2;\\n        tasksManager.createTask{value: clientCollateral}(taskID, currentAuction.client, _provider,  _winnerBid.bid, currentAuction.taskDeadline, currentAuction.clientVerification,currentAuction.code);\\n    }\\n\\n    function deleteAuction(bytes32 _auctionID) public {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        delete(auctions[_auctionID]);\\n        for (uint i=0; i < bytes32_auctions.length; i++)\\n        {\\n            if (bytes32_auctions[i] == _auctionID)\\n            {\\n                bytes32_auctions[i] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                break;\\n            }\\n        }\\n        emit AuctionDeleted(_auctionID);\\n    }\\n\\n    function getActiveAuctions() public view returns (Auction[] memory) {\\n        Auction[] memory activeAuctions = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline && auctions[bytes32_auctions[i]].client != msg.sender)\\n            {\\n                activeAuctions[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n         Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = activeAuctions[i];\\n        }\\n        return result;\\n    }\\n\\n\\n\\n    function getAuctionBids(bytes32 _auctionID) public view returns(ProviderBid[] memory) {\\n        return auctions[_auctionID].providerBids;\\n    }\\n\\n    function getAuctionsByClient() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByClient = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].client == msg.sender)\\n            {\\n                auctionsByClient[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByClient[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionWinnersByProvider() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].winnerBid.provider == msg.sender)\\n            {\\n                auctionsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionActiveBidsByProvider() public view returns (Auction[] memory) \\n    {\\n        Auction[] memory activeBidsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline)\\n            {\\n                for (uint j = 0; j < auctions[bytes32_auctions[i]].providerBids.length; j++)\\n                {\\n                    if (auctions[bytes32_auctions[i]].providerBids[j].provider == msg.sender)\\n                    {\\n                        activeBidsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                        auctionsLength++;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = activeBidsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return owner;\\n    }\\n    \\n    function getTasksManager() public view returns(address) {\\n         //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return address(tasksManager);\\n    }\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x30da977048e07647a6a85e523c416d4d6060141864cd8624b0b6b5844eaf5671\",\"license\":\"GPL-3.0\"},\"contracts/TasksManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract TasksManager {\\n\\n    address private immutable owner; \\n    address private auctionAddress;\\n    uint private bank = 0;\\n\\n    enum TaskState {\\n        Created,\\n        Cancelled, \\n        Active,\\n        CompletedSuccessfully,\\n        CompletedUnsuccessfully,\\n        Invalid, \\n        ResultsReceivedSuccessfully,\\n        ResultsReceivedUnsuccessfully\\n    }\\n\\n    enum PaymentState {\\n        Initialized,\\n        Pending,\\n        Completed \\n    }\\n\\n    struct Task {\\n        bytes32 taskID;\\n        address payable client; \\n        address payable provider;\\n        uint deadline;\\n        uint price;\\n        uint duration;\\n        uint cost;       \\n        uint activationTime;\\n        uint completionTime;\\n        string code;\\n        string results;\\n        bytes32 clientVerification;\\n        TaskState taskState;\\n        PaymentState paymentState;\\n    }\\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping (bytes32 => Task) private tasks;\\n    bytes32[] private bytes32_tasks;\\n    mapping(address => providerRating) private performance;\\n\\n    //Events\\n    event TaskCreated(bytes32 taskID, address client, address provider);\\n    event TaskActivated(bytes32 taskID, address client, address provider);\\n    event TaskCompletedSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCompletedUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCancelled(bytes32 taskID, address client, address provider);\\n    event TaskInvalidated(bytes32 taskID, address client, address provider);\\n    event PaymentPending(bytes32 taskID, address client, address provider, uint payment);\\n    event PaymentCompleted(bytes32 taskID, address client, address provider);\\n    event TransferMadeToClient(address client, uint amount);\\n    event TransferMadeToProvider(address provider, uint amount);\\n    event ProviderUpvoted(address provider, bytes32 taskID);\\n    event ProviderDownvoted(address provider, bytes32 taskID);\\n    event TaskDeleted(bytes32 taskID);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByAuction();\\n    error NotCalledByClient();\\n    error NotCalledByProvider();\\n    error NotCorrectValue(uint correctValue, uint receivedValue);\\n    error TaskNotInState(TaskState taskState);\\n    error PaymentNotInState(PaymentState paymentState);\\n    error TaskDoesNotExist();\\n    error TaskAlreadyExists();\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function setAuctionsManager(address _auctionAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        auctionAddress = _auctionAddress;\\n    }\\n\\n    function createTask(\\n        bytes32 _taskID,\\n        address _client,\\n        address _provider,\\n        uint _price,\\n        uint _deadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public payable \\n    {\\n        //auction only\\n        if (msg.sender != auctionAddress) \\n            revert NotCalledByAuction();\\n        //not registered task\\n        if (tasks[_taskID].taskID != bytes32(0)) \\n            revert TaskAlreadyExists();\\n        //correct client collateral\\n        if (msg.value != _price * 2)\\n            revert NotCorrectValue(_price * 2, msg.value);\\n        tasks[_taskID].taskID = _taskID;\\n        tasks[_taskID].client = payable (_client);\\n        tasks[_taskID].provider = payable(_provider);\\n        tasks[_taskID].price = _price;\\n        tasks[_taskID].deadline = _deadline;\\n        tasks[_taskID].clientVerification = _clientVerification;\\n        tasks[_taskID].code = _code;\\n        tasks[_taskID].taskState = TaskState.Created;\\n        tasks[_taskID].paymentState = PaymentState.Initialized;\\n        bytes32_tasks.push(_taskID);\\n        emit TaskCreated(_taskID, _client, _provider);\\n        //clientCollateral = 2 * price\\n        //providerCollateral = 10 * price\\n    }\\n\\n    //Cancel\\n    //TaskState -> Cancel\\n    //refunds payment to client\\n    //can be called only by client and only if contract hasnt been activated by provider\\n\\n    function cancelTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        tasks[_taskID].taskState = TaskState.Cancelled;\\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n        emit TransferMadeToClient(tasks[_taskID].client,tasks[_taskID].price * 2);\\n        emit TaskCancelled(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function invalidateTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n         //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        require(\\n            (block.timestamp > tasks[_taskID].activationTime + tasks[_taskID].deadline + 86400), //give one day to be invalidated\\n            \\\"Time has not expired.\\\"\\n        );\\n        tasks[_taskID].taskState = TaskState.Invalid;\\n  \\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 12 ); //clientCollateral + providerCollateral\\n        emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 12);\\n        emit TaskInvalidated(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    // Activate\\n    // TaskState -> Activated\\n    // can be called only by provider to start the process\\n\\n    function activateTask(bytes32 _taskID) public payable\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in taskState Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        //correct provider collateral\\n        if (msg.value != tasks[_taskID].price * 10)\\n            revert NotCorrectValue(tasks[_taskID].price * 10, msg.value);\\n        tasks[_taskID].activationTime = block.timestamp;\\n        tasks[_taskID].taskState = TaskState.Active;\\n        emit TaskActivated(_taskID, tasks[_taskID].client ,tasks[_taskID].provider);\\n    }\\n\\n    // Complete\\n    // TaskState -> Completed\\n    // can be called only by provider when the computation is over\\n\\n    //called by docker container\\n    function completeTask(bytes32 _taskID,string memory ver,  uint _duration, uint _timeReceivedProvider) public\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        tasks[_taskID].completionTime = _timeReceivedProvider;\\n        tasks[_taskID].duration = _duration;\\n        //in time and correct verification\\n        if ((tasks[_taskID].completionTime <= tasks[_taskID].activationTime + tasks[_taskID].deadline) \\n            && (tasks[_taskID].duration <= tasks[_taskID].deadline) \\n            && (tasks[_taskID].clientVerification == keccak256(abi.encodePacked(ver))))\\n        {\\n            tasks[_taskID].cost = tasks[_taskID].price * tasks[_taskID].duration;\\n            tasks[_taskID].taskState = TaskState.CompletedSuccessfully;\\n            emit TaskCompletedSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n            tasks[_taskID].taskState = TaskState.CompletedUnsuccessfully;\\n            emit TaskCompletedUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n    }\\n\\n\\n    //called by provider\\n    function sendResults(bytes32 _taskID, string memory _results) public {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state CompletedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.CompletedSuccessfully) \\n            revert TaskNotInState(TaskState.CompletedSuccessfully);\\n        //in payment state Initialized\\n        if (tasks[_taskID].paymentState != PaymentState.Initialized) \\n            revert PaymentNotInState(PaymentState.Initialized);\\n        uint receiptTime = block.timestamp;\\n        tasks[_taskID].results = _results;\\n        //gives 600 sec to provider to send the results, time received must be greater than completion time\\n        if ((receiptTime >= tasks[_taskID].completionTime)\\n        && (receiptTime <= tasks[_taskID].completionTime + 600) \\n        && (receiptTime >= tasks[_taskID].activationTime + tasks[_taskID].duration) \\n        && (tasks[_taskID].completionTime >= tasks[_taskID].activationTime + tasks[_taskID].duration)) \\n        {\\n            if (tasks[_taskID].cost <= tasks[_taskID].price * 2) {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].cost + tasks[_taskID].price * 10);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost + tasks[_taskID].price * 10);\\n                tasks[_taskID].client.transfer(tasks[_taskID].cost - tasks[_taskID].price * 2);\\n                emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].cost - tasks[_taskID].price * 2);\\n                tasks[_taskID].paymentState = PaymentState.Completed;\\n                emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);                \\n            }\\n            else {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].price * 12); //clientCollateral + providerCollateral\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * 12);\\n                tasks[_taskID].paymentState = PaymentState.Pending;\\n                emit PaymentPending(_taskID, tasks[_taskID].client, tasks[_taskID].provider, tasks[_taskID].cost - tasks[_taskID].price * 2);\\n            }\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedSuccessfully;\\n            emit TaskReceivedResultsSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            performance[tasks[_taskID].provider].upVotes += 1;\\n            emit ProviderUpvoted(tasks[_taskID].provider,_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedUnsuccessfully;\\n            emit TaskReceivedResultsUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n        }\\n    }\\n\\n\\n    function completePayment(bytes32 _taskID) public payable {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //correct payment value\\n        if (msg.value != tasks[_taskID].cost - tasks[_taskID].price * 2)\\n            revert NotCorrectValue(tasks[_taskID].cost - tasks[_taskID].price * 2, msg.value);\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Pending\\n        if (tasks[_taskID].paymentState != PaymentState.Pending) \\n            revert PaymentNotInState(PaymentState.Pending);\\n        tasks[_taskID].provider.transfer(msg.value);\\n        emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost - tasks[_taskID].price * 2);\\n        tasks[_taskID].paymentState = PaymentState.Completed;\\n        emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n\\n    function getPerformance(address provider) public view returns (providerRating memory) {\\n        return performance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getCode(bytes32 _taskID) public view returns (string memory) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        return tasks[_taskID].code;\\n    }\\n\\n    function getResults(bytes32 _taskID) public view returns (string memory)  {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Completed\\n        if (tasks[_taskID].paymentState != PaymentState.Completed) \\n            revert PaymentNotInState(PaymentState.Completed);\\n        return tasks[_taskID].results;\\n    }\\n\\n    function getTasksByClient() public view returns (Task[] memory) {\\n        Task[] memory tasksByClient = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].client == msg.sender) {\\n                tasksByClient[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n        for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByClient[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getTasksByProvider() public view returns (Task[] memory) {\\n        Task[] memory tasksByProvider = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].provider == msg.sender) {\\n                tasksByProvider[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n         for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByProvider[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getProviderCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 10;\\n    }\\n\\n    function getClientCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 2;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getAuctionAddress() public  view returns (address) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return auctionAddress;\\n    }\\n\\n    function deleteTask(bytes32 _taskID) public {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        delete tasks[_taskID];\\n        for (uint i=0; i < bytes32_tasks.length; i++)\\n        {\\n            if (bytes32_tasks[i] == _taskID)\\n            {\\n                bytes32_tasks[i] = bytes32_tasks[bytes32_tasks.length - 1];\\n                bytes32_tasks.pop();\\n                break;\\n            }\\n        }\\n        emit TaskDeleted(_taskID);\\n    }\\n\\n    function getTasks() public view returns (Task[] memory) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        Task[] memory ret = new Task[](bytes32_tasks.length);\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            ret[i] = tasks[bytes32_tasks[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getBank() public view returns (uint) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return bank;\\n    }\\n\\n    function withdraw(uint amount) public {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        //correct amount\\n        if (amount > bank)\\n            revert NotCorrectValue(bank, amount);\\n        payable(owner).transfer(amount);\\n        bank -= amount;\\n    }\\n\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x69b54987145f81ff6f44c51b440320df3a39f2f9866a8c262ac9c7cabbf09040\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c6145c861007b6000396000818161038701528181610ef2015281816129a20152612a6c01526145c86000f3fe6080604052600436106100c55760003560e01c8063a02daf961161007f578063cf44b5d511610059578063cf44b5d514610288578063e0a76324146102b3578063e1515563146102dc578063e369e93c1461030757610105565b8063a02daf961461020b578063c618e93814610234578063cd772f5c1461025f57610105565b80629c3f8f1461010a57806312e1d724146101335780633ef4d1301461014f578063893d20e8146101785780639ad01fde146101a35780639b680e7d146101ce57610105565b36610105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fc9061340e565b60405180910390fd5b600080fd5b34801561011657600080fd5b50610131600480360381019061012c9190613478565b610332565b005b61014d60048036038101906101489190613503565b6105e4565b005b34801561015b57600080fd5b5061017660048036038101906101719190613478565b610cc3565b005b34801561018457600080fd5b5061018d610eee565b60405161019a9190613552565b60405180910390f35b3480156101af57600080fd5b506101b8610f16565b6040516101c5919061399f565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f09190613478565b6113eb565b6040516102029190613a30565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d9190613bb3565b6114d4565b005b34801561024057600080fd5b506102496116b8565b604051610256919061399f565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190613c36565b611b90565b005b34801561029457600080fd5b5061029d6123da565b6040516102aa919061399f565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d59190613cb4565b6129a0565b005b3480156102e857600080fd5b506102f1612a68565b6040516102fe9190613552565b60405180910390f35b34801561031357600080fd5b5061031c612b15565b604051610329919061399f565b60405180910390f35b6000801b60016000838152602001908152602001600020600001541415610385576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040a576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160009055600582016000905560068201600090556007820160006104859190613155565b6008820160006104959190613195565b60098201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600b820160006101000a81549060ff0219169055505060005b6002805490508110156105a957816002828154811061050657610505613ce1565b5b90600052602060002001541415610596576002600160028054905061052b9190613d3f565b8154811061053c5761053b613ce1565b5b90600052602060002001546002828154811061055b5761055a613ce1565b5b9060005260206000200181905550600280548061057b5761057a613d73565b5b600190038181906000526020600020016000905590556105a9565b80806105a190613da2565b9150506104e4565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516105d99190613dfa565b60405180910390a150565b6000801b60016000848152602001908152602001600020600001541415610637576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156106e6576106e561379c565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561071c5761071b61379c565b5b1461075f5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016107569190613e24565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490613e8b565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060080182815481106107fd576107fc613ce1565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461088257808061085590613da2565b9150506001600084815260200190815260200160002060080180549050811061087d57610882565b6107be565b600160008481526020019081526020016000206008018054905081106108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490613ef7565b60405180910390fd5b6108e56131b9565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016000858152602001908152602001600020600801828154811061094557610944613ce1565b5b906000526020600020906004020160010154816020018181525050600281602001516109719190613f17565b34146109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a990613fbd565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610a6e57610a6d61379c565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686604051610adc93929190613fdd565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610b1f93929190614052565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688604051610bbd9493929190614089565b60405180910390a1600060026001600089815260200190815260200160002060090160010154610bed9190613f17565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b8152600401610c8897969594939291906141c4565b6000604051808303818588803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610d16576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db1576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610dc557610dc461379c565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610dfb57610dfa61379c565b5b14610e3e5760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610e359190613e24565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610e7757610e7661379c565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610ee392919061423a565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610f3957610f38613a88565b5b604051908082528060200260200182016040528015610f7257816020015b610f5f6131e9565b815260200190600190039081610f575790505b5090506000805b600280549050811015611331573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610fb557610fb4613ce1565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561131e57600160006002838154811061102657611025613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546110ed906140fd565b80601f0160208091040260200160405190810160405280929190818152602001828054611119906140fd565b80156111665780601f1061113b57610100808354040283529160200191611166565b820191906000526020600020905b81548152906001019060200180831161114957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561123a57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611194565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156112db576112da61379c565b5b60028111156112ed576112ec61379c565b5b8152505083838151811061130457611303613ce1565b5b6020026020010181905250818061131a90613da2565b9250505b808061132990613da2565b915050610f79565b5060008167ffffffffffffffff81111561134e5761134d613a88565b5b60405190808252806020026020018201604052801561138757816020015b6113746131e9565b81526020019060019003908161136c5790505b50905060005b828110156113e1578381815181106113a8576113a7613ce1565b5b60200260200101518282815181106113c3576113c2613ce1565b5b602002602001018190525080806113d990613da2565b91505061138d565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156114c957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611423565b505050509050919050565b60004233868686866040516020016114f19695949392919061429c565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061160f92919061327a565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561164a5761164961379c565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516116a992919061423a565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156116db576116da613a88565b5b60405190808252806020026020018201604052801561171457816020015b6117016131e9565b8152602001906001900390816116f95790505b5090506000805b600280549050811015611ad6573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061175757611756613ce1565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ac35760016000600283815481106117cb576117ca613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054611892906140fd565b80601f01602080910402602001604051908101604052809291908181526020018280546118be906140fd565b801561190b5780601f106118e05761010080835404028352916020019161190b565b820191906000526020600020905b8154815290600101906020018083116118ee57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156119df57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611939565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115611a8057611a7f61379c565b5b6002811115611a9257611a9161379c565b5b81525050838381518110611aa957611aa8613ce1565b5b60200260200101819052508180611abf90613da2565b9250505b8080611ace90613da2565b91505061171b565b5060008167ffffffffffffffff811115611af357611af2613a88565b5b604051908082528060200260200182016040528015611b2c57816020015b611b196131e9565b815260200190600190039081611b115790505b50905060005b82811015611b8657838181518110611b4d57611b4c613ce1565b5b6020026020010151828281518110611b6857611b67613ce1565b5b60200260200101819052508080611b7e90613da2565b915050611b32565b5080935050505090565b6000801b60016000848152602001908152602001600020600001541415611be3576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115611bf757611bf661379c565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff166002811115611c2d57611c2c61379c565b5b14611c705760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401611c679190613e24565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0c90614350565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611d4d9190614370565b421115611d8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8690614412565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611f1a575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611df357611df2613ce1565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e79578180611e4b90613da2565b9250506001600085815260200190815260200160002060080180549050821115611e7457611e79565b611db4565b60016000858152602001908152602001600020600801805490508211611f1957600160008581526020019081526020016000206008018281548110611ec157611ec0613ce1565b5b9060005260206000209060040201600101548310611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b906144a4565b60405180910390fd5b600190505b5b60011515811515141561213c5782600160008681526020019081526020016000206008018381548110611f5057611f4f613ce1565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611fbe9190613552565b604080518083038186803b158015611fd557600080fd5b505afa158015611fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200d919061452e565b6000015160016000868152602001908152602001600020600801838154811061203957612038613ce1565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016120a79190613552565b604080518083038186803b1580156120be57600080fd5b505afa1580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f6919061452e565b6020015160016000868152602001908152602001600020600801838154811061212257612121613ce1565b5b906000526020600020906004020160030181905550612399565b612144613300565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016121df9190613552565b604080518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e919061452e565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016122949190613552565b604080518083038186803b1580156122ab57600080fd5b505afa1580156122bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e3919061452e565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c668433856040516123cc9392919061455b565b60405180910390a150505050565b6060600060028054905067ffffffffffffffff8111156123fd576123fc613a88565b5b60405190808252806020026020018201604052801561243657816020015b6124236131e9565b81526020019060019003908161241b5790505b5090506000805b6002805490508110156128e6576000600281111561245e5761245d61379c565b5b600160006002848154811061247657612475613ce1565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff1660028111156124b2576124b161379c565b5b148015612532575060016000600283815481106124d2576124d1613ce1565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061250757612506613ce1565b5b906000526020600020015481526020019081526020016000206002015461252e9190614370565b4211155b80156125be57503373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061256857612567613ce1565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156128d35760016000600283815481106125db576125da613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546126a2906140fd565b80601f01602080910402602001604051908101604052809291908181526020018280546126ce906140fd565b801561271b5780601f106126f05761010080835404028352916020019161271b565b820191906000526020600020905b8154815290600101906020018083116126fe57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156127ef57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612749565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156128905761288f61379c565b5b60028111156128a2576128a161379c565b5b815250508383815181106128b9576128b8613ce1565b5b602002602001018190525081806128cf90613da2565b9250505b80806128de90613da2565b91505061243d565b5060008167ffffffffffffffff81111561290357612902613a88565b5b60405190808252806020026020018201604052801561293c57816020015b6129296131e9565b8152602001906001900390816129215790505b50905060005b828110156129965783818151811061295d5761295c613ce1565b5b602002602001015182828151811061297857612977613ce1565b5b6020026020010181905250808061298e90613da2565b915050612942565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a25576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612aef576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612b3857612b37613a88565b5b604051908082528060200260200182016040528015612b7157816020015b612b5e6131e9565b815260200190600190039081612b565790505b5090506000805b60028054905081101561309b5760006002811115612b9957612b9861379c565b5b6001600060028481548110612bb157612bb0613ce1565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612bed57612bec61379c565b5b148015612c6d57506001600060028381548110612c0d57612c0c613ce1565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612c4257612c41613ce1565b5b9060005260206000200154815260200190815260200160002060020154612c699190614370565b4211155b156130885760005b6001600060028481548110612c8d57612c8c613ce1565b5b9060005260206000200154815260200190815260200160002060080180549050811015613086573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612ce357612ce2613ce1565b5b906000526020600020015481526020019081526020016000206008018281548110612d1157612d10613ce1565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613073576001600060028481548110612d7757612d76613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612e3e906140fd565b80601f0160208091040260200160405190810160405280929190818152602001828054612e6a906140fd565b8015612eb75780601f10612e8c57610100808354040283529160200191612eb7565b820191906000526020600020905b815481529060010190602001808311612e9a57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612f8b57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612ee5565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561302c5761302b61379c565b5b600281111561303e5761303d61379c565b5b8152505084848151811061305557613054613ce1565b5b6020026020010181905250828061306b90613da2565b935050613086565b808061307e90613da2565b915050612c75565b505b808061309390613da2565b915050612b78565b5060008167ffffffffffffffff8111156130b8576130b7613a88565b5b6040519080825280602002602001820160405280156130f157816020015b6130de6131e9565b8152602001906001900390816130d65790505b50905060005b8281101561314b5783818151811061311257613111613ce1565b5b602002602001015182828151811061312d5761312c613ce1565b5b6020026020010181905250808061314390613da2565b9150506130f7565b5080935050505090565b508054613161906140fd565b6000825580601f106131735750613192565b601f016020900490600052602060002090810190613191919061333e565b5b50565b50805460008255600402906000526020600020908101906131b6919061335b565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000801916815260200160008019168152602001606081526020016060815260200161325b6131b9565b8152602001600060028111156132745761327361379c565b5b81525090565b828054613286906140fd565b90600052602060002090601f0160209004810192826132a857600085556132ef565b82601f106132c157805160ff19168380011785556132ef565b828001600101855582156132ef579182015b828111156132ee5782518255916020019190600101906132d3565b5b5090506132fc919061333e565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b8082111561335757600081600090555060010161333f565b5090565b5b808211156133ad57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090555060040161335c565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006133f86008836133b1565b9150613403826133c2565b602082019050919050565b60006020820190508181036000830152613427816133eb565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61345581613442565b811461346057600080fd5b50565b6000813590506134728161344c565b92915050565b60006020828403121561348e5761348d613438565b5b600061349c84828501613463565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134d0826134a5565b9050919050565b6134e0816134c5565b81146134eb57600080fd5b50565b6000813590506134fd816134d7565b92915050565b6000806040838503121561351a57613519613438565b5b600061352885828601613463565b9250506020613539858286016134ee565b9150509250929050565b61354c816134c5565b82525050565b60006020820190506135676000830184613543565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6135a281613442565b82525050565b6135b1816134c5565b82525050565b6000819050919050565b6135ca816135b7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561360a5780820151818401526020810190506135ef565b83811115613619576000848401525b50505050565b6000601f19601f8301169050919050565b600061363b826135d0565b61364581856135db565b93506136558185602086016135ec565b61365e8161361f565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516136ab60008501826135a8565b5060208201516136be60208501826135c1565b5060408201516136d160408501826135c1565b5060608201516136e460608501826135c1565b50505050565b60006136f68383613695565b60808301905092915050565b6000602082019050919050565b600061371a82613669565b6137248185613674565b935061372f83613685565b8060005b8381101561376057815161374788826136ea565b975061375283613702565b925050600181019050613733565b5085935050505092915050565b60408201600082015161378360008501826135a8565b50602082015161379660208501826135c1565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106137dc576137db61379c565b5b50565b60008190506137ed826137cb565b919050565b60006137fd826137df565b9050919050565b61380d816137f2565b82525050565b60006101808301600083015161382c6000860182613599565b50602083015161383f60208601826135a8565b50604083015161385260408601826135c1565b50606083015161386560608601826135c1565b50608083015161387860808601826135c1565b5060a083015161388b60a0860182613599565b5060c083015161389e60c0860182613599565b5060e083015184820360e08601526138b68282613630565b9150506101008301518482036101008601526138d2828261370f565b9150506101208301516138e961012086018261376d565b506101408301516138fe610160860182613804565b508091505092915050565b60006139158383613813565b905092915050565b6000602082019050919050565b60006139358261356d565b61393f8185613578565b93508360208202850161395185613589565b8060005b8581101561398d578484038952815161396e8582613909565b94506139798361391d565b925060208a01995050600181019050613955565b50829750879550505050505092915050565b600060208201905081810360008301526139b9818461392a565b905092915050565b600082825260208201905092915050565b60006139dd82613669565b6139e781856139c1565b93506139f283613685565b8060005b83811015613a23578151613a0a88826136ea565b9750613a1583613702565b9250506001810190506139f6565b5085935050505092915050565b60006020820190508181036000830152613a4a81846139d2565b905092915050565b613a5b816135b7565b8114613a6657600080fd5b50565b600081359050613a7881613a52565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ac08261361f565b810181811067ffffffffffffffff82111715613adf57613ade613a88565b5b80604052505050565b6000613af261342e565b9050613afe8282613ab7565b919050565b600067ffffffffffffffff821115613b1e57613b1d613a88565b5b613b278261361f565b9050602081019050919050565b82818337600083830152505050565b6000613b56613b5184613b03565b613ae8565b905082815260208101848484011115613b7257613b71613a83565b5b613b7d848285613b34565b509392505050565b600082601f830112613b9a57613b99613a7e565b5b8135613baa848260208601613b43565b91505092915050565b60008060008060808587031215613bcd57613bcc613438565b5b6000613bdb87828801613a69565b9450506020613bec87828801613a69565b9350506040613bfd87828801613463565b925050606085013567ffffffffffffffff811115613c1e57613c1d61343d565b5b613c2a87828801613b85565b91505092959194509250565b60008060408385031215613c4d57613c4c613438565b5b6000613c5b85828601613463565b9250506020613c6c85828601613a69565b9150509250929050565b6000613c81826134a5565b9050919050565b613c9181613c76565b8114613c9c57600080fd5b50565b600081359050613cae81613c88565b92915050565b600060208284031215613cca57613cc9613438565b5b6000613cd884828501613c9f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d4a826135b7565b9150613d55836135b7565b925082821015613d6857613d67613d10565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613dad826135b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613de057613ddf613d10565b5b600182019050919050565b613df481613442565b82525050565b6000602082019050613e0f6000830184613deb565b92915050565b613e1e816137f2565b82525050565b6000602082019050613e396000830184613e15565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613e756014836133b1565b9150613e8082613e3f565b602082019050919050565b60006020820190508181036000830152613ea481613e68565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613ee16016836133b1565b9150613eec82613eab565b602082019050919050565b60006020820190508181036000830152613f1081613ed4565b9050919050565b6000613f22826135b7565b9150613f2d836135b7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f6657613f65613d10565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b6000613fa76020836133b1565b9150613fb282613f71565b602082019050919050565b60006020820190508181036000830152613fd681613f9a565b9050919050565b6000606082019050613ff26000830186613deb565b613fff6020830185613543565b61400c6040830184613543565b949350505050565b60408201600082015161402a60008501826135a8565b50602082015161403d60208501826135c1565b50505050565b61404c816135b7565b82525050565b60006080820190506140676000830186613543565b6140746020830185614014565b6140816060830184614043565b949350505050565b600060808201905061409e6000830187613deb565b6140ab6020830186613deb565b6140b86040830185613543565b6140c56060830184613543565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061411557607f821691505b60208210811415614129576141286140ce565b5b50919050565b60008190508160005260206000209050919050565b60008154614151816140fd565b61415b81866133b1565b945060018216600081146141765760018114614188576141bb565b60ff19831686526020860193506141bb565b6141918561412f565b60005b838110156141b357815481890152600182019150602081019050614194565b808801955050505b50505092915050565b600060e0820190506141d9600083018a613deb565b6141e66020830189613543565b6141f36040830188613543565b6142006060830187614043565b61420d6080830186614043565b61421a60a0830185613deb565b81810360c083015261422c8184614144565b905098975050505050505050565b600060408201905061424f6000830185613deb565b61425c6020830184613543565b9392505050565b600061426e826135d0565b61427881856133b1565b93506142888185602086016135ec565b6142918161361f565b840191505092915050565b600060c0820190506142b16000830189614043565b6142be6020830188613543565b6142cb6040830187614043565b6142d86060830186614043565b6142e56080830185613deb565b81810360a08301526142f78184614263565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b600061433a6020836133b1565b915061434582614304565b602082019050919050565b600060208201905081810360008301526143698161432d565b9050919050565b600061437b826135b7565b9150614386836135b7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143bb576143ba613d10565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b60006143fc6011836133b1565b9150614407826143c6565b602082019050919050565b6000602082019050818103600083015261442b816143ef565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b600061448e602c836133b1565b915061449982614432565b604082019050919050565b600060208201905081810360008301526144bd81614481565b9050919050565b600080fd5b6000815190506144d881613a52565b92915050565b6000604082840312156144f4576144f36144c4565b5b6144fe6040613ae8565b9050600061450e848285016144c9565b6000830152506020614522848285016144c9565b60208301525092915050565b60006040828403121561454457614543613438565b5b6000614552848285016144de565b91505092915050565b60006060820190506145706000830186613deb565b61457d6020830185613543565b61458a6040830184614043565b94935050505056fea2646970667358221220dcbdb1dd0b1e527258a10c7077b8b89d9c3363731e8a2a0a3a97e8fea5c2332164736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100c55760003560e01c8063a02daf961161007f578063cf44b5d511610059578063cf44b5d514610288578063e0a76324146102b3578063e1515563146102dc578063e369e93c1461030757610105565b8063a02daf961461020b578063c618e93814610234578063cd772f5c1461025f57610105565b80629c3f8f1461010a57806312e1d724146101335780633ef4d1301461014f578063893d20e8146101785780639ad01fde146101a35780639b680e7d146101ce57610105565b36610105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fc9061340e565b60405180910390fd5b600080fd5b34801561011657600080fd5b50610131600480360381019061012c9190613478565b610332565b005b61014d60048036038101906101489190613503565b6105e4565b005b34801561015b57600080fd5b5061017660048036038101906101719190613478565b610cc3565b005b34801561018457600080fd5b5061018d610eee565b60405161019a9190613552565b60405180910390f35b3480156101af57600080fd5b506101b8610f16565b6040516101c5919061399f565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f09190613478565b6113eb565b6040516102029190613a30565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d9190613bb3565b6114d4565b005b34801561024057600080fd5b506102496116b8565b604051610256919061399f565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190613c36565b611b90565b005b34801561029457600080fd5b5061029d6123da565b6040516102aa919061399f565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d59190613cb4565b6129a0565b005b3480156102e857600080fd5b506102f1612a68565b6040516102fe9190613552565b60405180910390f35b34801561031357600080fd5b5061031c612b15565b604051610329919061399f565b60405180910390f35b6000801b60016000838152602001908152602001600020600001541415610385576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040a576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160009055600582016000905560068201600090556007820160006104859190613155565b6008820160006104959190613195565b60098201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600b820160006101000a81549060ff0219169055505060005b6002805490508110156105a957816002828154811061050657610505613ce1565b5b90600052602060002001541415610596576002600160028054905061052b9190613d3f565b8154811061053c5761053b613ce1565b5b90600052602060002001546002828154811061055b5761055a613ce1565b5b9060005260206000200181905550600280548061057b5761057a613d73565b5b600190038181906000526020600020016000905590556105a9565b80806105a190613da2565b9150506104e4565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516105d99190613dfa565b60405180910390a150565b6000801b60016000848152602001908152602001600020600001541415610637576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156106e6576106e561379c565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561071c5761071b61379c565b5b1461075f5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016107569190613e24565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490613e8b565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060080182815481106107fd576107fc613ce1565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461088257808061085590613da2565b9150506001600084815260200190815260200160002060080180549050811061087d57610882565b6107be565b600160008481526020019081526020016000206008018054905081106108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490613ef7565b60405180910390fd5b6108e56131b9565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016000858152602001908152602001600020600801828154811061094557610944613ce1565b5b906000526020600020906004020160010154816020018181525050600281602001516109719190613f17565b34146109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a990613fbd565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610a6e57610a6d61379c565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686604051610adc93929190613fdd565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610b1f93929190614052565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688604051610bbd9493929190614089565b60405180910390a1600060026001600089815260200190815260200160002060090160010154610bed9190613f17565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b8152600401610c8897969594939291906141c4565b6000604051808303818588803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610d16576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db1576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610dc557610dc461379c565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610dfb57610dfa61379c565b5b14610e3e5760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610e359190613e24565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610e7757610e7661379c565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610ee392919061423a565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610f3957610f38613a88565b5b604051908082528060200260200182016040528015610f7257816020015b610f5f6131e9565b815260200190600190039081610f575790505b5090506000805b600280549050811015611331573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610fb557610fb4613ce1565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561131e57600160006002838154811061102657611025613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546110ed906140fd565b80601f0160208091040260200160405190810160405280929190818152602001828054611119906140fd565b80156111665780601f1061113b57610100808354040283529160200191611166565b820191906000526020600020905b81548152906001019060200180831161114957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561123a57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611194565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156112db576112da61379c565b5b60028111156112ed576112ec61379c565b5b8152505083838151811061130457611303613ce1565b5b6020026020010181905250818061131a90613da2565b9250505b808061132990613da2565b915050610f79565b5060008167ffffffffffffffff81111561134e5761134d613a88565b5b60405190808252806020026020018201604052801561138757816020015b6113746131e9565b81526020019060019003908161136c5790505b50905060005b828110156113e1578381815181106113a8576113a7613ce1565b5b60200260200101518282815181106113c3576113c2613ce1565b5b602002602001018190525080806113d990613da2565b91505061138d565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156114c957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611423565b505050509050919050565b60004233868686866040516020016114f19695949392919061429c565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061160f92919061327a565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561164a5761164961379c565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516116a992919061423a565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156116db576116da613a88565b5b60405190808252806020026020018201604052801561171457816020015b6117016131e9565b8152602001906001900390816116f95790505b5090506000805b600280549050811015611ad6573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061175757611756613ce1565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ac35760016000600283815481106117cb576117ca613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054611892906140fd565b80601f01602080910402602001604051908101604052809291908181526020018280546118be906140fd565b801561190b5780601f106118e05761010080835404028352916020019161190b565b820191906000526020600020905b8154815290600101906020018083116118ee57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156119df57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611939565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115611a8057611a7f61379c565b5b6002811115611a9257611a9161379c565b5b81525050838381518110611aa957611aa8613ce1565b5b60200260200101819052508180611abf90613da2565b9250505b8080611ace90613da2565b91505061171b565b5060008167ffffffffffffffff811115611af357611af2613a88565b5b604051908082528060200260200182016040528015611b2c57816020015b611b196131e9565b815260200190600190039081611b115790505b50905060005b82811015611b8657838181518110611b4d57611b4c613ce1565b5b6020026020010151828281518110611b6857611b67613ce1565b5b60200260200101819052508080611b7e90613da2565b915050611b32565b5080935050505090565b6000801b60016000848152602001908152602001600020600001541415611be3576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115611bf757611bf661379c565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff166002811115611c2d57611c2c61379c565b5b14611c705760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401611c679190613e24565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0c90614350565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611d4d9190614370565b421115611d8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8690614412565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611f1a575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611df357611df2613ce1565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e79578180611e4b90613da2565b9250506001600085815260200190815260200160002060080180549050821115611e7457611e79565b611db4565b60016000858152602001908152602001600020600801805490508211611f1957600160008581526020019081526020016000206008018281548110611ec157611ec0613ce1565b5b9060005260206000209060040201600101548310611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b906144a4565b60405180910390fd5b600190505b5b60011515811515141561213c5782600160008681526020019081526020016000206008018381548110611f5057611f4f613ce1565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611fbe9190613552565b604080518083038186803b158015611fd557600080fd5b505afa158015611fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200d919061452e565b6000015160016000868152602001908152602001600020600801838154811061203957612038613ce1565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016120a79190613552565b604080518083038186803b1580156120be57600080fd5b505afa1580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f6919061452e565b6020015160016000868152602001908152602001600020600801838154811061212257612121613ce1565b5b906000526020600020906004020160030181905550612399565b612144613300565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016121df9190613552565b604080518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e919061452e565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016122949190613552565b604080518083038186803b1580156122ab57600080fd5b505afa1580156122bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e3919061452e565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c668433856040516123cc9392919061455b565b60405180910390a150505050565b6060600060028054905067ffffffffffffffff8111156123fd576123fc613a88565b5b60405190808252806020026020018201604052801561243657816020015b6124236131e9565b81526020019060019003908161241b5790505b5090506000805b6002805490508110156128e6576000600281111561245e5761245d61379c565b5b600160006002848154811061247657612475613ce1565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff1660028111156124b2576124b161379c565b5b148015612532575060016000600283815481106124d2576124d1613ce1565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061250757612506613ce1565b5b906000526020600020015481526020019081526020016000206002015461252e9190614370565b4211155b80156125be57503373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061256857612567613ce1565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156128d35760016000600283815481106125db576125da613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546126a2906140fd565b80601f01602080910402602001604051908101604052809291908181526020018280546126ce906140fd565b801561271b5780601f106126f05761010080835404028352916020019161271b565b820191906000526020600020905b8154815290600101906020018083116126fe57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156127ef57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612749565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156128905761288f61379c565b5b60028111156128a2576128a161379c565b5b815250508383815181106128b9576128b8613ce1565b5b602002602001018190525081806128cf90613da2565b9250505b80806128de90613da2565b91505061243d565b5060008167ffffffffffffffff81111561290357612902613a88565b5b60405190808252806020026020018201604052801561293c57816020015b6129296131e9565b8152602001906001900390816129215790505b50905060005b828110156129965783818151811061295d5761295c613ce1565b5b602002602001015182828151811061297857612977613ce1565b5b6020026020010181905250808061298e90613da2565b915050612942565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a25576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612aef576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612b3857612b37613a88565b5b604051908082528060200260200182016040528015612b7157816020015b612b5e6131e9565b815260200190600190039081612b565790505b5090506000805b60028054905081101561309b5760006002811115612b9957612b9861379c565b5b6001600060028481548110612bb157612bb0613ce1565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612bed57612bec61379c565b5b148015612c6d57506001600060028381548110612c0d57612c0c613ce1565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612c4257612c41613ce1565b5b9060005260206000200154815260200190815260200160002060020154612c699190614370565b4211155b156130885760005b6001600060028481548110612c8d57612c8c613ce1565b5b9060005260206000200154815260200190815260200160002060080180549050811015613086573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612ce357612ce2613ce1565b5b906000526020600020015481526020019081526020016000206008018281548110612d1157612d10613ce1565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613073576001600060028481548110612d7757612d76613ce1565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612e3e906140fd565b80601f0160208091040260200160405190810160405280929190818152602001828054612e6a906140fd565b8015612eb75780601f10612e8c57610100808354040283529160200191612eb7565b820191906000526020600020905b815481529060010190602001808311612e9a57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612f8b57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612ee5565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561302c5761302b61379c565b5b600281111561303e5761303d61379c565b5b8152505084848151811061305557613054613ce1565b5b6020026020010181905250828061306b90613da2565b935050613086565b808061307e90613da2565b915050612c75565b505b808061309390613da2565b915050612b78565b5060008167ffffffffffffffff8111156130b8576130b7613a88565b5b6040519080825280602002602001820160405280156130f157816020015b6130de6131e9565b8152602001906001900390816130d65790505b50905060005b8281101561314b5783818151811061311257613111613ce1565b5b602002602001015182828151811061312d5761312c613ce1565b5b6020026020010181905250808061314390613da2565b9150506130f7565b5080935050505090565b508054613161906140fd565b6000825580601f106131735750613192565b601f016020900490600052602060002090810190613191919061333e565b5b50565b50805460008255600402906000526020600020908101906131b6919061335b565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000801916815260200160008019168152602001606081526020016060815260200161325b6131b9565b8152602001600060028111156132745761327361379c565b5b81525090565b828054613286906140fd565b90600052602060002090601f0160209004810192826132a857600085556132ef565b82601f106132c157805160ff19168380011785556132ef565b828001600101855582156132ef579182015b828111156132ee5782518255916020019190600101906132d3565b5b5090506132fc919061333e565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b8082111561335757600081600090555060010161333f565b5090565b5b808211156133ad57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090555060040161335c565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006133f86008836133b1565b9150613403826133c2565b602082019050919050565b60006020820190508181036000830152613427816133eb565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61345581613442565b811461346057600080fd5b50565b6000813590506134728161344c565b92915050565b60006020828403121561348e5761348d613438565b5b600061349c84828501613463565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134d0826134a5565b9050919050565b6134e0816134c5565b81146134eb57600080fd5b50565b6000813590506134fd816134d7565b92915050565b6000806040838503121561351a57613519613438565b5b600061352885828601613463565b9250506020613539858286016134ee565b9150509250929050565b61354c816134c5565b82525050565b60006020820190506135676000830184613543565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6135a281613442565b82525050565b6135b1816134c5565b82525050565b6000819050919050565b6135ca816135b7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561360a5780820151818401526020810190506135ef565b83811115613619576000848401525b50505050565b6000601f19601f8301169050919050565b600061363b826135d0565b61364581856135db565b93506136558185602086016135ec565b61365e8161361f565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516136ab60008501826135a8565b5060208201516136be60208501826135c1565b5060408201516136d160408501826135c1565b5060608201516136e460608501826135c1565b50505050565b60006136f68383613695565b60808301905092915050565b6000602082019050919050565b600061371a82613669565b6137248185613674565b935061372f83613685565b8060005b8381101561376057815161374788826136ea565b975061375283613702565b925050600181019050613733565b5085935050505092915050565b60408201600082015161378360008501826135a8565b50602082015161379660208501826135c1565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106137dc576137db61379c565b5b50565b60008190506137ed826137cb565b919050565b60006137fd826137df565b9050919050565b61380d816137f2565b82525050565b60006101808301600083015161382c6000860182613599565b50602083015161383f60208601826135a8565b50604083015161385260408601826135c1565b50606083015161386560608601826135c1565b50608083015161387860808601826135c1565b5060a083015161388b60a0860182613599565b5060c083015161389e60c0860182613599565b5060e083015184820360e08601526138b68282613630565b9150506101008301518482036101008601526138d2828261370f565b9150506101208301516138e961012086018261376d565b506101408301516138fe610160860182613804565b508091505092915050565b60006139158383613813565b905092915050565b6000602082019050919050565b60006139358261356d565b61393f8185613578565b93508360208202850161395185613589565b8060005b8581101561398d578484038952815161396e8582613909565b94506139798361391d565b925060208a01995050600181019050613955565b50829750879550505050505092915050565b600060208201905081810360008301526139b9818461392a565b905092915050565b600082825260208201905092915050565b60006139dd82613669565b6139e781856139c1565b93506139f283613685565b8060005b83811015613a23578151613a0a88826136ea565b9750613a1583613702565b9250506001810190506139f6565b5085935050505092915050565b60006020820190508181036000830152613a4a81846139d2565b905092915050565b613a5b816135b7565b8114613a6657600080fd5b50565b600081359050613a7881613a52565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ac08261361f565b810181811067ffffffffffffffff82111715613adf57613ade613a88565b5b80604052505050565b6000613af261342e565b9050613afe8282613ab7565b919050565b600067ffffffffffffffff821115613b1e57613b1d613a88565b5b613b278261361f565b9050602081019050919050565b82818337600083830152505050565b6000613b56613b5184613b03565b613ae8565b905082815260208101848484011115613b7257613b71613a83565b5b613b7d848285613b34565b509392505050565b600082601f830112613b9a57613b99613a7e565b5b8135613baa848260208601613b43565b91505092915050565b60008060008060808587031215613bcd57613bcc613438565b5b6000613bdb87828801613a69565b9450506020613bec87828801613a69565b9350506040613bfd87828801613463565b925050606085013567ffffffffffffffff811115613c1e57613c1d61343d565b5b613c2a87828801613b85565b91505092959194509250565b60008060408385031215613c4d57613c4c613438565b5b6000613c5b85828601613463565b9250506020613c6c85828601613a69565b9150509250929050565b6000613c81826134a5565b9050919050565b613c9181613c76565b8114613c9c57600080fd5b50565b600081359050613cae81613c88565b92915050565b600060208284031215613cca57613cc9613438565b5b6000613cd884828501613c9f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d4a826135b7565b9150613d55836135b7565b925082821015613d6857613d67613d10565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613dad826135b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613de057613ddf613d10565b5b600182019050919050565b613df481613442565b82525050565b6000602082019050613e0f6000830184613deb565b92915050565b613e1e816137f2565b82525050565b6000602082019050613e396000830184613e15565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613e756014836133b1565b9150613e8082613e3f565b602082019050919050565b60006020820190508181036000830152613ea481613e68565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613ee16016836133b1565b9150613eec82613eab565b602082019050919050565b60006020820190508181036000830152613f1081613ed4565b9050919050565b6000613f22826135b7565b9150613f2d836135b7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f6657613f65613d10565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b6000613fa76020836133b1565b9150613fb282613f71565b602082019050919050565b60006020820190508181036000830152613fd681613f9a565b9050919050565b6000606082019050613ff26000830186613deb565b613fff6020830185613543565b61400c6040830184613543565b949350505050565b60408201600082015161402a60008501826135a8565b50602082015161403d60208501826135c1565b50505050565b61404c816135b7565b82525050565b60006080820190506140676000830186613543565b6140746020830185614014565b6140816060830184614043565b949350505050565b600060808201905061409e6000830187613deb565b6140ab6020830186613deb565b6140b86040830185613543565b6140c56060830184613543565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061411557607f821691505b60208210811415614129576141286140ce565b5b50919050565b60008190508160005260206000209050919050565b60008154614151816140fd565b61415b81866133b1565b945060018216600081146141765760018114614188576141bb565b60ff19831686526020860193506141bb565b6141918561412f565b60005b838110156141b357815481890152600182019150602081019050614194565b808801955050505b50505092915050565b600060e0820190506141d9600083018a613deb565b6141e66020830189613543565b6141f36040830188613543565b6142006060830187614043565b61420d6080830186614043565b61421a60a0830185613deb565b81810360c083015261422c8184614144565b905098975050505050505050565b600060408201905061424f6000830185613deb565b61425c6020830184613543565b9392505050565b600061426e826135d0565b61427881856133b1565b93506142888185602086016135ec565b6142918161361f565b840191505092915050565b600060c0820190506142b16000830189614043565b6142be6020830188613543565b6142cb6040830187614043565b6142d86060830186614043565b6142e56080830185613deb565b81810360a08301526142f78184614263565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b600061433a6020836133b1565b915061434582614304565b602082019050919050565b600060208201905081810360008301526143698161432d565b9050919050565b600061437b826135b7565b9150614386836135b7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143bb576143ba613d10565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b60006143fc6011836133b1565b9150614407826143c6565b602082019050919050565b6000602082019050818103600083015261442b816143ef565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b600061448e602c836133b1565b915061449982614432565b604082019050919050565b600060208201905081810360008301526144bd81614481565b9050919050565b600080fd5b6000815190506144d881613a52565b92915050565b6000604082840312156144f4576144f36144c4565b5b6144fe6040613ae8565b9050600061450e848285016144c9565b6000830152506020614522848285016144c9565b60208301525092915050565b60006040828403121561454457614543613438565b5b6000614552848285016144de565b91505092915050565b60006060820190506145706000830186613deb565b61457d6020830185613543565b61458a6040830184614043565b94935050505056fea2646970667358221220dcbdb1dd0b1e527258a10c7077b8b89d9c3363731e8a2a0a3a97e8fea5c2332164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "tasksManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TasksManager)3385"
      },
      {
        "astId": 57,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Auction)38_storage)"
      },
      {
        "astId": 60,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "bytes32_auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProviderBid)47_storage)dyn_storage": {
        "base": "t_struct(ProviderBid)47_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionsManager.ProviderBid[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TasksManager)3385": {
        "encoding": "inplace",
        "label": "contract TasksManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)11": {
        "encoding": "inplace",
        "label": "enum AuctionsManager.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)38_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionsManager.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)38_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)38_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.Auction",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "client",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskDeadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "clientVerification",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 25,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskID",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 27,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "code",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 31,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerBids",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(ProviderBid)47_storage)dyn_storage"
          },
          {
            "astId": 34,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "winnerBid",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(WinnerBid)52_storage"
          },
          {
            "astId": 37,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionState",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(AuctionState)11"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(ProviderBid)47_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.ProviderBid",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 42,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerUpVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerDownVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WinnerBid)52_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.WinnerBid",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 51,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}