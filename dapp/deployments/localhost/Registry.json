{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "ProviderDownvoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "ProviderUpvoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "TaskRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "TaskUnregistered",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "downVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "getPerformance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "upVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct Registry.providerRating",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "getScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "registerTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unregisterTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "upVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf1a1c704e21eed3472a899537615c1aedc5440a6135a6c62c895d9166ec23081",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "928322",
    "logsBloom": "0x
    "blockHash": "0xaec2bc65a262a3ad1266228275bea240cb0fcb0da43b84abfe8fa4502f5c3411",
    "transactionHash": "0xf1a1c704e21eed3472a899537615c1aedc5440a6135a6c62c895d9166ec23081",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "928322",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5563af64891592a77f0ae8259e94210c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"ProviderDownvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"ProviderUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"TaskRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"TaskUnregistered\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"downVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getPerformance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"upVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct Registry.providerRating\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"registerTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregisterTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"upVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Registry {\\n\\n    address private immutable owner; \\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping(address => providerRating) private performance;\\n    mapping (bytes32 => bool) private registeredTask;    // it could also be only task address => bool\\n\\n    event ProviderUpvoted(address provider, address task);\\n    event ProviderDownvoted(address provider, address task);\\n    event TaskRegistered(address task);\\n    event TaskUnregistered(address task);\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier registeredTaskOnly() {\\n        require(\\n            isRegistered(),\\n            \\\"Task must be registered\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function registerTask(address task) ownerOnly public {\\n      bytes32 hash = keccak256(abi.encodePacked(task));\\n      registeredTask[hash] = true;\\n      emit TaskRegistered(task);\\n    }\\n\\n    function unregisterTask() registeredTaskOnly() public {\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\n        delete registeredTask[hash];\\n        emit TaskUnregistered(msg.sender);\\n    }\\n\\n    function isRegistered() public view returns (bool) {\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\n        return registeredTask[hash];\\n    }\\n\\n    function upVote(address provider) registeredTaskOnly public { \\n    // function upVote(address provider) external {\\n        // performance[provider].upVotes += 1;\\n        performance[provider].upVotes += 10; //for tests\\n        emit ProviderUpvoted(provider,msg.sender);\\n    }\\n\\n    function downVote(address provider) registeredTaskOnly external {\\n    // function downVote(address provider) external {\\n        // performance[provider].downVotes += 1;\\n        performance[provider].downVotes += 10; //for tests\\n        emit ProviderDownvoted(provider,msg.sender);\\n    }\\n\\n    function getPerformance(address provider) public view returns (providerRating memory) {\\n        return performance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    // could be calculated in the app\\n    function getScore(address provider) public view returns (uint) {\\n       return confidence(performance[provider].upVotes,performance[provider].downVotes);\\n    }\\n\\n    function confidence(uint ups, uint downs) private pure returns (uint) {\\n        if (ups + downs == 0) \\n            return 0;\\n\\n        //precision is 3 decimal digits\\n        uint n = ups + downs;\\n\\n        uint z = 1960;  //z-score for 95% two-sided confidence = 1.96\\n        // uint z = 1645;  //z-score for 90% two-sided confidence = 1.645\\n        // uint z = 1440; //-score for 85% two-sided confidence = 1.44\\n        // uint z = 1282; //z-score for 80% two sided confidence = 1.282\\n        \\n        uint p = divider(ups,n,3);\\n        uint left = p + divider(1,2*n,3)*z*z/1000000; \\n        uint right = z * sqrt(divider(p*(1000-p),n,0) + divider(z*z,4*n*n,0))/1000; \\n        uint denominator = 1000 + divider(1,n,3)*z*z/1000000;\\n\\n        return divider(left-right, denominator, 3);\\n    }\\n    \\n    function divider(uint numerator, uint denominator, uint precision) private pure returns(uint) {\\n        return numerator*(uint(10)**uint(precision))/denominator;\\n    }\\n\\n    //babylonian method\\n    function sqrt(uint x) private pure returns (uint) {\\n        uint z = divider(x+1,2,0); \\n        uint y = x;\\n        uint temp;\\n        while (z < y) {\\n            y = z;\\n            temp = divider(x,z,0);\\n            z = divider(temp+z,2,0);\\n        }\\n        return uint(y);\\n    }\\n\\n    \\n\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x51d8b1b1496f26b6f1893b01a7b796e8b111b2eed3fcf8264f2335a3caaddd17\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050608051610fe2610067600039600081816103b801526104ba0152610fe26000f3fe60806040526004361061007f5760003560e01c80638b0a37811161004e5780638b0a37811461016e578063c9363ed314610197578063d47875d0146101c0578063e42f70b8146101fd576100bf565b80631ecc9aaf146100c457806322366844146101015780632822dd1b1461012c578063893d20e814610143576100bf565b366100bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b6906109ce565b60405180910390fd5b600080fd5b3480156100d057600080fd5b506100eb60048036038101906100e69190610a51565b610226565b6040516100f89190610ac6565b60405180910390f35b34801561010d57600080fd5b50610116610292565b6040516101239190610afc565b60405180910390f35b34801561013857600080fd5b506101416102e5565b005b34801561014f57600080fd5b506101586103b4565b6040516101659190610b26565b60405180910390f35b34801561017a57600080fd5b5061019560048036038101906101909190610a51565b6103dc565b005b3480156101a357600080fd5b506101be60048036038101906101b99190610a51565b6104b8565b005b3480156101cc57600080fd5b506101e760048036038101906101e29190610a51565b6105d7565b6040516101f49190610b50565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f9190610a51565b61066c565b005b61022e610957565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b600080336040516020016102a69190610bb3565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060009054906101000a900460ff1691505090565b6102ed610292565b61032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390610c1a565b60405180910390fd5b60003360405160200161033f9190610bb3565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060006101000a81549060ff02191690557fedda29c46162c0d343f1f957fa5656b77695c71cf15798a86416295199c267f1336040516103a99190610b26565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6103e4610292565b610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041a90610c1a565b60405180910390fd5b600a6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546104759190610c69565b925050819055507ff00ee9cffb8306f7bf54df945000d9ebd32697f278cc705727982c151d80598a81336040516104ad929190610c9d565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610d38565b60405180910390fd5b6000816040516020016105599190610bb3565b604051602081830303815290604052805190602001209050600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f286bba86727cd953fcbdd170181ffba9ac38f33cbb31258020a3b5907ea1e503826040516105cb9190610b26565b60405180910390a15050565b60006106656000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610748565b9050919050565b610674610292565b6106b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106aa90610c1a565b60405180910390fd5b600a6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546107059190610c69565b925050819055507f3021492cb737eb9e1b8a6992e372ab8df66a0f7a156e70888973251bd817bd16813360405161073d929190610c9d565b60405180910390a150565b60008082846107579190610c69565b0361076557600090506108ba565b600082846107739190610c69565b905060006107a89050600061078a868460036108c0565b90506000620f424083846107ad60018860026107a69190610d58565b60036108c0565b6107b79190610d58565b6107c19190610d58565b6107cb9190610dc9565b826107d69190610c69565b905060006103e861084161080e86876107ef9190610d58565b888960046107fd9190610d58565b6108079190610d58565b60006108c0565b610832866103e861081f9190610dfa565b8761082a9190610d58565b8960006108c0565b61083c9190610c69565b6108ee565b8561084c9190610d58565b6108569190610dc9565b90506000620f4240858661086d60018a60036108c0565b6108779190610d58565b6108819190610d58565b61088b9190610dc9565b6103e86108989190610c69565b90506108b182846108a99190610dfa565b8260036108c0565b96505050505050505b92915050565b60008282600a6108d09190610f61565b856108db9190610d58565b6108e59190610dc9565b90509392505050565b60008061090a6001846109019190610c69565b600260006108c0565b9050600083905060005b8183101561094c5782915061092b858460006108c0565b9050610945838261093c9190610c69565b600260006108c0565b9250610914565b819350505050919050565b604051806040016040528060008152602001600081525090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006109b8600883610971565b91506109c382610982565b602082019050919050565b600060208201905081810360008301526109e7816109ab565b9050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1e826109f3565b9050919050565b610a2e81610a13565b8114610a3957600080fd5b50565b600081359050610a4b81610a25565b92915050565b600060208284031215610a6757610a666109ee565b5b6000610a7584828501610a3c565b91505092915050565b6000819050919050565b610a9181610a7e565b82525050565b604082016000820151610aad6000850182610a88565b506020820151610ac06020850182610a88565b50505050565b6000604082019050610adb6000830184610a97565b92915050565b60008115159050919050565b610af681610ae1565b82525050565b6000602082019050610b116000830184610aed565b92915050565b610b2081610a13565b82525050565b6000602082019050610b3b6000830184610b17565b92915050565b610b4a81610a7e565b82525050565b6000602082019050610b656000830184610b41565b92915050565b60008160601b9050919050565b6000610b8382610b6b565b9050919050565b6000610b9582610b78565b9050919050565b610bad610ba882610a13565b610b8a565b82525050565b6000610bbf8284610b9c565b60148201915081905092915050565b7f5461736b206d7573742062652072656769737465726564000000000000000000600082015250565b6000610c04601783610971565b9150610c0f82610bce565b602082019050919050565b60006020820190508181036000830152610c3381610bf7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7482610a7e565b9150610c7f83610a7e565b9250828201905080821115610c9757610c96610c3a565b5b92915050565b6000604082019050610cb26000830185610b17565b610cbf6020830184610b17565b9392505050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000610d22602383610971565b9150610d2d82610cc6565b604082019050919050565b60006020820190508181036000830152610d5181610d15565b9050919050565b6000610d6382610a7e565b9150610d6e83610a7e565b9250828202610d7c81610a7e565b91508282048414831517610d9357610d92610c3a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dd482610a7e565b9150610ddf83610a7e565b925082610def57610dee610d9a565b5b828204905092915050565b6000610e0582610a7e565b9150610e1083610a7e565b9250828203905081811115610e2857610e27610c3a565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115610e8557808604811115610e6157610e60610c3a565b5b6001851615610e705780820291505b8081029050610e7e85610e2e565b9450610e45565b94509492505050565b600082610e9e5760019050610f5a565b81610eac5760009050610f5a565b8160018114610ec25760028114610ecc57610efb565b6001915050610f5a565b60ff841115610ede57610edd610c3a565b5b8360020a915084821115610ef557610ef4610c3a565b5b50610f5a565b5060208310610133831016604e8410600b8410161715610f305782820a905083811115610f2b57610f2a610c3a565b5b610f5a565b610f3d8484846001610e3b565b92509050818404811115610f5457610f53610c3a565b5b81810290505b9392505050565b6000610f6c82610a7e565b9150610f7783610a7e565b9250610fa47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e8e565b90509291505056fea26469706673582212209a8748ede897ee3abfef2d08e9cac25950455604b63e4925f5a1bebdcfab3e5664736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80638b0a37811161004e5780638b0a37811461016e578063c9363ed314610197578063d47875d0146101c0578063e42f70b8146101fd576100bf565b80631ecc9aaf146100c457806322366844146101015780632822dd1b1461012c578063893d20e814610143576100bf565b366100bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b6906109ce565b60405180910390fd5b600080fd5b3480156100d057600080fd5b506100eb60048036038101906100e69190610a51565b610226565b6040516100f89190610ac6565b60405180910390f35b34801561010d57600080fd5b50610116610292565b6040516101239190610afc565b60405180910390f35b34801561013857600080fd5b506101416102e5565b005b34801561014f57600080fd5b506101586103b4565b6040516101659190610b26565b60405180910390f35b34801561017a57600080fd5b5061019560048036038101906101909190610a51565b6103dc565b005b3480156101a357600080fd5b506101be60048036038101906101b99190610a51565b6104b8565b005b3480156101cc57600080fd5b506101e760048036038101906101e29190610a51565b6105d7565b6040516101f49190610b50565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f9190610a51565b61066c565b005b61022e610957565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b600080336040516020016102a69190610bb3565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060009054906101000a900460ff1691505090565b6102ed610292565b61032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390610c1a565b60405180910390fd5b60003360405160200161033f9190610bb3565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060006101000a81549060ff02191690557fedda29c46162c0d343f1f957fa5656b77695c71cf15798a86416295199c267f1336040516103a99190610b26565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6103e4610292565b610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041a90610c1a565b60405180910390fd5b600a6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546104759190610c69565b925050819055507ff00ee9cffb8306f7bf54df945000d9ebd32697f278cc705727982c151d80598a81336040516104ad929190610c9d565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610d38565b60405180910390fd5b6000816040516020016105599190610bb3565b604051602081830303815290604052805190602001209050600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f286bba86727cd953fcbdd170181ffba9ac38f33cbb31258020a3b5907ea1e503826040516105cb9190610b26565b60405180910390a15050565b60006106656000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610748565b9050919050565b610674610292565b6106b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106aa90610c1a565b60405180910390fd5b600a6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546107059190610c69565b925050819055507f3021492cb737eb9e1b8a6992e372ab8df66a0f7a156e70888973251bd817bd16813360405161073d929190610c9d565b60405180910390a150565b60008082846107579190610c69565b0361076557600090506108ba565b600082846107739190610c69565b905060006107a89050600061078a868460036108c0565b90506000620f424083846107ad60018860026107a69190610d58565b60036108c0565b6107b79190610d58565b6107c19190610d58565b6107cb9190610dc9565b826107d69190610c69565b905060006103e861084161080e86876107ef9190610d58565b888960046107fd9190610d58565b6108079190610d58565b60006108c0565b610832866103e861081f9190610dfa565b8761082a9190610d58565b8960006108c0565b61083c9190610c69565b6108ee565b8561084c9190610d58565b6108569190610dc9565b90506000620f4240858661086d60018a60036108c0565b6108779190610d58565b6108819190610d58565b61088b9190610dc9565b6103e86108989190610c69565b90506108b182846108a99190610dfa565b8260036108c0565b96505050505050505b92915050565b60008282600a6108d09190610f61565b856108db9190610d58565b6108e59190610dc9565b90509392505050565b60008061090a6001846109019190610c69565b600260006108c0565b9050600083905060005b8183101561094c5782915061092b858460006108c0565b9050610945838261093c9190610c69565b600260006108c0565b9250610914565b819350505050919050565b604051806040016040528060008152602001600081525090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006109b8600883610971565b91506109c382610982565b602082019050919050565b600060208201905081810360008301526109e7816109ab565b9050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1e826109f3565b9050919050565b610a2e81610a13565b8114610a3957600080fd5b50565b600081359050610a4b81610a25565b92915050565b600060208284031215610a6757610a666109ee565b5b6000610a7584828501610a3c565b91505092915050565b6000819050919050565b610a9181610a7e565b82525050565b604082016000820151610aad6000850182610a88565b506020820151610ac06020850182610a88565b50505050565b6000604082019050610adb6000830184610a97565b92915050565b60008115159050919050565b610af681610ae1565b82525050565b6000602082019050610b116000830184610aed565b92915050565b610b2081610a13565b82525050565b6000602082019050610b3b6000830184610b17565b92915050565b610b4a81610a7e565b82525050565b6000602082019050610b656000830184610b41565b92915050565b60008160601b9050919050565b6000610b8382610b6b565b9050919050565b6000610b9582610b78565b9050919050565b610bad610ba882610a13565b610b8a565b82525050565b6000610bbf8284610b9c565b60148201915081905092915050565b7f5461736b206d7573742062652072656769737465726564000000000000000000600082015250565b6000610c04601783610971565b9150610c0f82610bce565b602082019050919050565b60006020820190508181036000830152610c3381610bf7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7482610a7e565b9150610c7f83610a7e565b9250828201905080821115610c9757610c96610c3a565b5b92915050565b6000604082019050610cb26000830185610b17565b610cbf6020830184610b17565b9392505050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000610d22602383610971565b9150610d2d82610cc6565b604082019050919050565b60006020820190508181036000830152610d5181610d15565b9050919050565b6000610d6382610a7e565b9150610d6e83610a7e565b9250828202610d7c81610a7e565b91508282048414831517610d9357610d92610c3a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dd482610a7e565b9150610ddf83610a7e565b925082610def57610dee610d9a565b5b828204905092915050565b6000610e0582610a7e565b9150610e1083610a7e565b9250828203905081811115610e2857610e27610c3a565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115610e8557808604811115610e6157610e60610c3a565b5b6001851615610e705780820291505b8081029050610e7e85610e2e565b9450610e45565b94509492505050565b600082610e9e5760019050610f5a565b81610eac5760009050610f5a565b8160018114610ec25760028114610ecc57610efb565b6001915050610f5a565b60ff841115610ede57610edd610c3a565b5b8360020a915084821115610ef557610ef4610c3a565b5b50610f5a565b5060208310610133831016604e8410600b8410161715610f305782820a905083811115610f2b57610f2a610c3a565b5b610f5a565b610f3d8484846001610e3b565b92509050818404811115610f5457610f53610c3a565b5b81810290505b9392505050565b6000610f6c82610a7e565b9150610f7783610a7e565b9250610fa47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e8e565b90509291505056fea26469706673582212209a8748ede897ee3abfef2d08e9cac25950455604b63e4925f5a1bebdcfab3e5664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 92,
        "contract": "contracts/Registry.sol:Registry",
        "label": "performance",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(providerRating)87_storage)"
      },
      {
        "astId": 96,
        "contract": "contracts/Registry.sol:Registry",
        "label": "registeredTask",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(providerRating)87_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Registry.providerRating)",
        "numberOfBytes": "32",
        "value": "t_struct(providerRating)87_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(providerRating)87_storage": {
        "encoding": "inplace",
        "label": "struct Registry.providerRating",
        "members": [
          {
            "astId": 84,
            "contract": "contracts/Registry.sol:Registry",
            "label": "upVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 86,
            "contract": "contracts/Registry.sol:Registry",
            "label": "downVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}