{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "ProviderDownvoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "ProviderUpvoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "TaskRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "TaskUnregistered",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "downVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "getPerformance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "upVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "downVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct Registry.providerRating",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "task",
          "type": "address"
        }
      ],
      "name": "registerTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unregisterTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "upVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8fa7f173119d7e542a7dcc85190e9b9186b46b3f1693b7bea8c13695cdc45f26",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "636878",
    "logsBloom": "0x
    "blockHash": "0x309dc625e8c3a55df45583e70921e6288380bbac13c3f66932e22e7206cb0c70",
    "transactionHash": "0x8fa7f173119d7e542a7dcc85190e9b9186b46b3f1693b7bea8c13695cdc45f26",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "636878",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a694b8c5d9c5c974b969a1be311a0561",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"ProviderDownvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"ProviderUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"TaskRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"TaskUnregistered\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"downVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getPerformance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"upVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct Registry.providerRating\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"task\",\"type\":\"address\"}],\"name\":\"registerTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregisterTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"upVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Registry {\\n\\n    address private immutable owner; \\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping(address => providerRating) private performance;\\n    mapping (bytes32 => bool) private registeredTask;    // it could also be only task address => bool\\n\\n    event ProviderUpvoted(address provider, address task);\\n    event ProviderDownvoted(address provider, address task);\\n    event TaskRegistered(address task);\\n    event TaskUnregistered(address task);\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier registeredTaskOnly() {\\n        require(\\n            isRegistered(),\\n            \\\"Task must be registered\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function registerTask(address task) ownerOnly public {\\n      bytes32 hash = keccak256(abi.encodePacked(task));\\n      registeredTask[hash] = true;\\n      emit TaskRegistered(task);\\n    }\\n\\n    function unregisterTask() registeredTaskOnly() public {\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\n        delete registeredTask[hash];\\n        emit TaskUnregistered(msg.sender);\\n    }\\n\\n    function isRegistered() public view returns (bool) {\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\n        return registeredTask[hash];\\n    }\\n\\n    function upVote(address provider) registeredTaskOnly public { \\n    // function upVote(address provider) external {\\n        performance[provider].upVotes += 1;\\n        // performance[provider].upVotes += 10; //for tests\\n        emit ProviderUpvoted(provider,msg.sender);\\n    }\\n\\n    function downVote(address provider) registeredTaskOnly external {\\n    // function downVote(address provider) external {\\n        performance[provider].downVotes += 1;\\n        // performance[provider].downVotes += 10; //for tests\\n        emit ProviderDownvoted(provider,msg.sender);\\n    }\\n\\n    function getPerformance(address provider) public view returns (providerRating memory) {\\n        return performance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    // could be calculated in the app\\n    // function getScore(address provider) public view returns (uint) {\\n    //    return confidence(performance[provider].upVotes,performance[provider].downVotes);\\n    // }\\n\\n    // function confidence(uint ups, uint downs) private pure returns (uint) {\\n    //     if (ups + downs == 0) \\n    //         return 0;\\n\\n    //     //precision is 3 decimal digits\\n    //     uint n = ups + downs;\\n\\n    //     uint z = 1960;  //z-score for 95% two-sided confidence = 1.96\\n    //     // uint z = 1645;  //z-score for 90% two-sided confidence = 1.645\\n    //     // uint z = 1440; //-score for 85% two-sided confidence = 1.44\\n    //     // uint z = 1282; //z-score for 80% two sided confidence = 1.282\\n        \\n    //     uint p = divider(ups,n,3);\\n    //     uint left = p + divider(1,2*n,3)*z*z/1000000; \\n    //     uint right = z * sqrt(divider(p*(1000-p),n,0) + divider(z*z,4*n*n,0))/1000; \\n    //     uint denominator = 1000 + divider(1,n,3)*z*z/1000000;\\n\\n    //     return divider(left-right, denominator, 3);\\n    // }\\n    \\n    // function divider(uint numerator, uint denominator, uint precision) private pure returns(uint) {\\n    //     return numerator*(uint(10)**uint(precision))/denominator;\\n    // }\\n\\n    // //babylonian method\\n    // function sqrt(uint x) private pure returns (uint) {\\n    //     uint z = divider(x+1,2,0); \\n    //     uint y = x;\\n    //     uint temp;\\n    //     while (z < y) {\\n    //         y = z;\\n    //         temp = divider(x,z,0);\\n    //         z = divider(temp+z,2,0);\\n    //     }\\n    //     return uint(y);\\n    // }\\n\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x237ceb6ed399531937713a71f5aae720822473a2168b9f8eb8ce612559c5513f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c610a9a61006d6000396000818161037001526104720152610a9a6000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e8146101385780638b0a378114610163578063c9363ed31461018c578063e42f70b8146101b5576100b4565b80631ecc9aaf146100b957806322366844146100f65780632822dd1b14610121576100b4565b366100b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ab906106e2565b60405180910390fd5b600080fd5b3480156100c557600080fd5b506100e060048036038101906100db9190610765565b6101de565b6040516100ed91906107da565b60405180910390f35b34801561010257600080fd5b5061010b61024a565b6040516101189190610810565b60405180910390f35b34801561012d57600080fd5b5061013661029d565b005b34801561014457600080fd5b5061014d61036c565b60405161015a919061083a565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610765565b610394565b005b34801561019857600080fd5b506101b360048036038101906101ae9190610765565b610470565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190610765565b61058f565b005b6101e661066b565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000803360405160200161025e919061089d565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060009054906101000a900460ff1691505090565b6102a561024a565b6102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db90610904565b60405180910390fd5b6000336040516020016102f7919061089d565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060006101000a81549060ff02191690557fedda29c46162c0d343f1f957fa5656b77695c71cf15798a86416295199c267f133604051610361919061083a565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61039c61024a565b6103db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d290610904565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461042d9190610953565b925050819055507ff00ee9cffb8306f7bf54df945000d9ebd32697f278cc705727982c151d80598a81336040516104659291906109a9565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590610a44565b60405180910390fd5b600081604051602001610511919061089d565b604051602081830303815290604052805190602001209050600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f286bba86727cd953fcbdd170181ffba9ac38f33cbb31258020a3b5907ea1e50382604051610583919061083a565b60405180910390a15050565b61059761024a565b6105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90610904565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546106289190610953565b925050819055507f3021492cb737eb9e1b8a6992e372ab8df66a0f7a156e70888973251bd817bd1681336040516106609291906109a9565b60405180910390a150565b604051806040016040528060008152602001600081525090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006106cc600883610685565b91506106d782610696565b602082019050919050565b600060208201905081810360008301526106fb816106bf565b9050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061073282610707565b9050919050565b61074281610727565b811461074d57600080fd5b50565b60008135905061075f81610739565b92915050565b60006020828403121561077b5761077a610702565b5b600061078984828501610750565b91505092915050565b6000819050919050565b6107a581610792565b82525050565b6040820160008201516107c1600085018261079c565b5060208201516107d4602085018261079c565b50505050565b60006040820190506107ef60008301846107ab565b92915050565b60008115159050919050565b61080a816107f5565b82525050565b60006020820190506108256000830184610801565b92915050565b61083481610727565b82525050565b600060208201905061084f600083018461082b565b92915050565b60008160601b9050919050565b600061086d82610855565b9050919050565b600061087f82610862565b9050919050565b61089761089282610727565b610874565b82525050565b60006108a98284610886565b60148201915081905092915050565b7f5461736b206d7573742062652072656769737465726564000000000000000000600082015250565b60006108ee601783610685565b91506108f9826108b8565b602082019050919050565b6000602082019050818103600083015261091d816108e1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061095e82610792565b915061096983610792565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561099e5761099d610924565b5b828201905092915050565b60006040820190506109be600083018561082b565b6109cb602083018461082b565b9392505050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000610a2e602383610685565b9150610a39826109d2565b604082019050919050565b60006020820190508181036000830152610a5d81610a21565b905091905056fea2646970667358221220f25ef5954c77a4c7a9c471477a2dd160d7c8575fda0b74dabf8f993c0af5ed8764736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e8146101385780638b0a378114610163578063c9363ed31461018c578063e42f70b8146101b5576100b4565b80631ecc9aaf146100b957806322366844146100f65780632822dd1b14610121576100b4565b366100b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ab906106e2565b60405180910390fd5b600080fd5b3480156100c557600080fd5b506100e060048036038101906100db9190610765565b6101de565b6040516100ed91906107da565b60405180910390f35b34801561010257600080fd5b5061010b61024a565b6040516101189190610810565b60405180910390f35b34801561012d57600080fd5b5061013661029d565b005b34801561014457600080fd5b5061014d61036c565b60405161015a919061083a565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610765565b610394565b005b34801561019857600080fd5b506101b360048036038101906101ae9190610765565b610470565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190610765565b61058f565b005b6101e661066b565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000803360405160200161025e919061089d565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060009054906101000a900460ff1691505090565b6102a561024a565b6102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db90610904565b60405180910390fd5b6000336040516020016102f7919061089d565b6040516020818303038152906040528051906020012090506001600082815260200190815260200160002060006101000a81549060ff02191690557fedda29c46162c0d343f1f957fa5656b77695c71cf15798a86416295199c267f133604051610361919061083a565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61039c61024a565b6103db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d290610904565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461042d9190610953565b925050819055507ff00ee9cffb8306f7bf54df945000d9ebd32697f278cc705727982c151d80598a81336040516104659291906109a9565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590610a44565b60405180910390fd5b600081604051602001610511919061089d565b604051602081830303815290604052805190602001209050600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f286bba86727cd953fcbdd170181ffba9ac38f33cbb31258020a3b5907ea1e50382604051610583919061083a565b60405180910390a15050565b61059761024a565b6105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90610904565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546106289190610953565b925050819055507f3021492cb737eb9e1b8a6992e372ab8df66a0f7a156e70888973251bd817bd1681336040516106609291906109a9565b60405180910390a150565b604051806040016040528060008152602001600081525090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006106cc600883610685565b91506106d782610696565b602082019050919050565b600060208201905081810360008301526106fb816106bf565b9050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061073282610707565b9050919050565b61074281610727565b811461074d57600080fd5b50565b60008135905061075f81610739565b92915050565b60006020828403121561077b5761077a610702565b5b600061078984828501610750565b91505092915050565b6000819050919050565b6107a581610792565b82525050565b6040820160008201516107c1600085018261079c565b5060208201516107d4602085018261079c565b50505050565b60006040820190506107ef60008301846107ab565b92915050565b60008115159050919050565b61080a816107f5565b82525050565b60006020820190506108256000830184610801565b92915050565b61083481610727565b82525050565b600060208201905061084f600083018461082b565b92915050565b60008160601b9050919050565b600061086d82610855565b9050919050565b600061087f82610862565b9050919050565b61089761089282610727565b610874565b82525050565b60006108a98284610886565b60148201915081905092915050565b7f5461736b206d7573742062652072656769737465726564000000000000000000600082015250565b60006108ee601783610685565b91506108f9826108b8565b602082019050919050565b6000602082019050818103600083015261091d816108e1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061095e82610792565b915061096983610792565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561099e5761099d610924565b5b828201905092915050565b60006040820190506109be600083018561082b565b6109cb602083018461082b565b9392505050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000610a2e602383610685565b9150610a39826109d2565b604082019050919050565b60006020820190508181036000830152610a5d81610a21565b905091905056fea2646970667358221220f25ef5954c77a4c7a9c471477a2dd160d7c8575fda0b74dabf8f993c0af5ed8764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/Registry.sol:Registry",
        "label": "performance",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(providerRating)8_storage)"
      },
      {
        "astId": 17,
        "contract": "contracts/Registry.sol:Registry",
        "label": "registeredTask",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(providerRating)8_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Registry.providerRating)",
        "numberOfBytes": "32",
        "value": "t_struct(providerRating)8_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(providerRating)8_storage": {
        "encoding": "inplace",
        "label": "struct Registry.providerRating",
        "members": [
          {
            "astId": 5,
            "contract": "contracts/Registry.sol:Registry",
            "label": "upVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7,
            "contract": "contracts/Registry.sol:Registry",
            "label": "downVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}