{
  "address": "0x6CCcd8aF2aD6414A15365f56cC533f1Dd75377b6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "TaskIDCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "auctionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taskDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_clientVerification",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "deleteAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteAuctions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctionsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ProviderBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_client",
          "type": "address"
        }
      ],
      "name": "getAuctionsByClient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getWinnerBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.WinnerBid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tasksManager",
          "type": "address"
        }
      ],
      "name": "setTasksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4867ffc4d03a5557650e2ac65a157079afadec650fa64c84b33d6283cf2b2268",
  "receipt": {
    "to": null,
    "from": "0xB3b0E9E018bA957e29d6C883A84412972C6A7366",
    "contractAddress": "0x6CCcd8aF2aD6414A15365f56cC533f1Dd75377b6",
    "transactionIndex": 126,
    "gasUsed": "3822085",
    "logsBloom": "0x
    "blockHash": "0xc73d1c28250f89c59fedbbe893b81b093cac424129b3b4723cff451803d31580",
    "transactionHash": "0x4867ffc4d03a5557650e2ac65a157079afadec650fa64c84b33d6283cf2b2268",
    "logs": [],
    "blockNumber": 4211995,
    "cumulativeGasUsed": "12991661",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "e145ce4f96f52453bb53a6e6488d1e81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"TaskIDCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"auctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"deleteAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"getAuctionsByClient\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getWinnerBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tasksManager\",\"type\":\"address\"}],\"name\":\"setTasksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TasksManager.sol\\\";\\n\\ncontract AuctionsManager {\\n     address private immutable owner; \\n     TasksManager tasksManager;\\n\\n     enum AuctionState {\\n        Created,\\n        Cancelled, \\n        Finalized\\n    }\\n\\n    struct Auction {\\n        bytes32 auctionID;\\n        address client;\\n        uint creationTime;\\n        uint auctionDeadline;\\n        uint taskDeadline;\\n        bytes32 clientVerification;\\n        string code;\\n        ProviderBid[] providerBids;\\n        WinnerBid winnerBid;\\n        AuctionState auctionState;   \\n        uint lastUpdateTimestamp;\\n    }\\n\\n    struct ProviderBid {\\n        address provider;\\n        uint bid;\\n        uint providerUpVotes;\\n        uint providerDownVotes;\\n    }\\n\\n    struct WinnerBid {\\n        address provider;\\n        uint bid;\\n    }\\n\\n    mapping (bytes32 => Auction) private auctions;\\n    bytes32[] private bytes32_auctions;\\n\\n    event AuctionCreated(bytes32 auctionID, address client);\\n    event AuctionCancelled(bytes32 auctionID, address client);\\n    event AuctionFinalized(bytes32 auctionID, address client, address provider);\\n    event AuctionDeleted(bytes32 auctionID);\\n    event BidPlaced(bytes32 auctionID, address provider, uint bid);\\n    event TaskIDCreated(bytes32 auctionID, bytes32 taskID, address client, address provider);\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOnly(bytes32 _auctionID) {\\n        require(\\n            msg.sender == auctions[_auctionID].client,\\n            \\\"Method can be called only by client.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inAuctionState(bytes32 _auctionID,AuctionState _auctionState) {\\n        require(\\n            auctions[_auctionID].auctionState == _auctionState,\\n            \\\"Invalid AuctionState.\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    modifier existingAuctionOnly(bytes32 _auctionID) {\\n        require(\\n            auctionExists(_auctionID),\\n            \\\"Auction must exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notExistingAuctionOnly(bytes32 _auctionID) {\\n        require(\\n            !auctionExists(_auctionID),\\n            \\\"Auction already exists\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    constructor()  {\\n        owner = msg.sender;\\n    }\\n\\n    function setTasksManager(address payable _tasksManager) public ownerOnly() {\\n        tasksManager = TasksManager(_tasksManager);\\n    }\\n\\n    function createAuction(\\n        uint _auctionDeadline, \\n        uint _taskDeadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public \\n    {\\n        bytes32 _auctionID = keccak256(abi.encode(block.timestamp, msg.sender, _auctionDeadline, _taskDeadline, _clientVerification, _code));\\n        auctions[_auctionID].auctionID = _auctionID;\\n        auctions[_auctionID].client = msg.sender;\\n        auctions[_auctionID].creationTime = block.timestamp;\\n        auctions[_auctionID].auctionDeadline = _auctionDeadline;\\n        auctions[_auctionID].taskDeadline = _taskDeadline;\\n        auctions[_auctionID].clientVerification = _clientVerification;\\n        auctions[_auctionID].code = _code;\\n\\n        auctions[_auctionID].auctionState = AuctionState.Created;\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        bytes32_auctions.push(_auctionID);\\n        emit AuctionCreated( _auctionID, msg.sender);\\n    }\\n\\n    function cancelAuction(bytes32 _auctionID) public clientOnly(_auctionID) inAuctionState(_auctionID, AuctionState.Created) existingAuctionOnly(_auctionID) {\\n        auctions[_auctionID].auctionState = AuctionState.Cancelled;\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        emit AuctionCancelled(_auctionID, auctions[_auctionID].client);\\n     }\\n\\n    function bid(bytes32 _auctionID, uint _bid) public inAuctionState(_auctionID, AuctionState.Created)  existingAuctionOnly(_auctionID) {\\n        require(msg.sender != auctions[_auctionID].client, \\\"Client can't bid to this auction\\\"); \\n        require(\\n            (block.timestamp <= auctions[_auctionID].creationTime + auctions[_auctionID].auctionDeadline),\\n            \\\"Time has expired.\\\"\\n        );\\n        uint providerIndex = 0;\\n        bool providerExists = false;\\n        if(auctions[_auctionID].providerBids.length != 0)\\n        {    while(auctions[_auctionID].providerBids[providerIndex].provider != msg.sender)\\n            {\\n                providerIndex++;\\n                if(providerIndex > auctions[_auctionID].providerBids.length)\\n                    break;\\n            }\\n            if (providerIndex <= auctions[_auctionID].providerBids.length)\\n            {\\n                require(\\n                _bid < auctions[_auctionID].providerBids[providerIndex].bid,\\n                \\\"Bid is not lower than than the previous one.\\\"\\n                );\\n                providerExists = true;\\n            }\\n        }\\n        if(providerExists == true)\\n        {\\n            auctions[_auctionID].providerBids[providerIndex].bid = _bid;\\n            auctions[_auctionID].providerBids[providerIndex].providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n            auctions[_auctionID].providerBids[providerIndex].providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n        }\\n        else \\n        {\\n            ProviderBid memory currentBid;\\n            currentBid.provider = msg.sender;\\n            currentBid.bid = _bid;\\n            currentBid.providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n            currentBid.providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n            auctions[_auctionID].providerBids.push(currentBid);\\n        }\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        emit BidPlaced(_auctionID, msg.sender, _bid);\\n     }\\n\\n    function finalize(bytes32 _auctionID, address _provider) public payable clientOnly(_auctionID) inAuctionState(_auctionID, AuctionState.Created) existingAuctionOnly(_auctionID) {\\n        uint providerIndex = 0;\\n        if (auctions[_auctionID].providerBids.length == 0)\\n            revert(\\\"Auction has no bids.\\\");\\n        while(auctions[_auctionID].providerBids[providerIndex].provider != _provider)\\n        {\\n            providerIndex++;\\n            if(providerIndex >= auctions[_auctionID].providerBids.length)\\n                break;\\n        }\\n        if(providerIndex >= auctions[_auctionID].providerBids.length)\\n         revert(\\\"Wrong provider address\\\");\\n        WinnerBid memory _winnerBid;\\n        _winnerBid.provider = _provider;\\n        _winnerBid.bid = auctions[_auctionID].providerBids[providerIndex].bid;\\n        require (msg.value >= _winnerBid.bid * 2, \\\"Client collateral is not enough\\\");\\n        auctions[_auctionID].winnerBid = _winnerBid;\\n        Auction storage currentAuction = auctions[_auctionID];\\n        auctions[_auctionID].auctionState = AuctionState.Finalized;\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        emit AuctionFinalized(_auctionID, auctions[_auctionID].client,  _provider);\\n        bytes32 taskID = keccak256(abi.encode(currentAuction.client, _winnerBid, block.timestamp));\\n        uint clientCollateral = getClientCollateral(_auctionID);\\n        tasksManager.createTask{value: clientCollateral}(taskID, currentAuction.client, _provider,  _winnerBid.bid, currentAuction.taskDeadline, currentAuction.clientVerification,currentAuction.code);\\n        emit TaskIDCreated(_auctionID, taskID, auctions[_auctionID].client , _provider);\\n    }\\n\\n    function getClientCollateral(bytes32 _auctionID) private view returns (uint) {\\n        return auctions[_auctionID].winnerBid.bid * 2;\\n    }\\n\\n    function auctionExists(bytes32 _auctionID) public view returns (bool) {\\n            return (auctions[_auctionID].client != address(0));\\n        }\\n\\n    function deleteAuctions() public ownerOnly { \\n        for (uint i = bytes32_auctions.length; i > 0; i--)\\n        {\\n            bytes32 _auctionID = bytes32_auctions[i-1];\\n            if ((auctions[_auctionID].auctionState == AuctionState.Finalized \\n            || auctions[_auctionID].auctionState == AuctionState.Cancelled)\\n            && block.timestamp > auctions[_auctionID].lastUpdateTimestamp + 60)\\n            {\\n                delete(auctions[_auctionID]);\\n                bytes32_auctions[i-1] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                emit AuctionDeleted(_auctionID);\\n            }\\n        }\\n    }\\n\\n    function deleteAuction(bytes32 _auctionID) public ownerOnly existingAuctionOnly(_auctionID) {\\n        delete(auctions[_auctionID]);\\n        for (uint i=0; i < bytes32_auctions.length; i++)\\n        {\\n            if (bytes32_auctions[i] == _auctionID)\\n            {\\n                bytes32_auctions[i] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                break;\\n            }\\n        }\\n        emit AuctionDeleted(_auctionID);\\n    }\\n\\n    function getActiveAuctionsLength() ownerOnly public view returns (uint256) {\\n        return bytes32_auctions.length;\\n    }\\n\\n    function getActiveAuctions() public view returns (Auction[] memory) {\\n        Auction[] memory activeAuctions = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline && auctions[bytes32_auctions[i]].client != msg.sender)\\n            {\\n                activeAuctions[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n         Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = activeAuctions[i];\\n        }\\n        return result;\\n    }\\n\\n\\n\\n    function getAuctionBids(bytes32 _auctionID) public view returns(ProviderBid[] memory) {\\n        return auctions[_auctionID].providerBids;\\n    }\\n\\n    function getWinnerBid(bytes32 _auctionID) public view returns(WinnerBid memory) {\\n        return auctions[_auctionID].winnerBid;\\n    }\\n\\n    function getAuctionState(bytes32 _auctionID) public view returns(string memory) {\\n        string memory ret = \\\"\\\";\\n        if (auctions[_auctionID].auctionState == AuctionState.Created) \\n            ret = \\\"Created\\\";\\n        else if (auctions[_auctionID].auctionState == AuctionState.Cancelled) \\n            ret = \\\"Cancelled\\\";\\n        else if (auctions[_auctionID].auctionState == AuctionState.Finalized) \\n            ret = \\\"Finalized\\\";\\n        else \\n            ret = \\\"Error\\\";\\n        return ret;\\n    }\\n\\n    function getAuctionsByClient(address _client) public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByClient = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].client == _client)\\n            {\\n                auctionsByClient[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByClient[i];\\n        }\\n        return result;\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return owner;\\n    }\\n    \\n    function getTasksManager() public view returns(address) {\\n        return address(tasksManager);\\n    }\\n}\",\"keccak256\":\"0x326d72c214428d9eddbbc25055bbe7c3281db45187da3e1cf31918bb37f2578e\",\"license\":\"GPL-3.0\"},\"contracts/TasksManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract TasksManager {\\n\\n    address private immutable owner; \\n    address private auctionAddress;\\n\\n    enum TaskState {\\n        Created,\\n        Cancelled, \\n        Active,\\n        CompletedSuccessfully,\\n        CompletedUnsuccessfully,\\n        Invalid, \\n        ResultsReceivedSuccessfully,\\n        ResultsReceivedUnsuccessfully\\n    }\\n\\n    enum PaymentState {\\n        Initialized,\\n        Pending,\\n        Completed \\n    }\\n\\n    struct Task {\\n        bytes32 taskID;\\n        address payable client; \\n        address payable provider;\\n        uint providerCollateral;\\n        uint clientCollateral; \\n        uint deadline;\\n        uint price;\\n        uint duration;\\n        uint cost;       \\n        uint activationTime;\\n        uint timeResultProvided;\\n        uint timeResultReceived;\\n        string code;\\n        string results;\\n        bytes32 clientVerification;\\n        // uint lastUpdateTimestamp;\\n        TaskState taskState;\\n        PaymentState paymentState;\\n    }\\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping (bytes32 => Task) private tasks;\\n    bytes32[] private bytes32_tasks;\\n    mapping(address => providerRating) private performance;\\n\\n    //Events\\n    event TaskCreated(bytes32 taskID, address client, address provider);\\n    event TaskActivated(bytes32 taskID, address client, address provider);\\n    event TaskCompletedSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCompletedUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCancelled(bytes32 taskID, address client, address provider);\\n    event TaskInvalidated(bytes32 taskID, address client, address provider);\\n    event PaymentPending(bytes32 taskID, address client, uint payment);\\n    event PaymentCompleted(bytes32 taskID, address client, address provider);\\n    event TransferMadeToClient(address client, uint amount);\\n    event TransferMadeToProvider(address provider, uint amount);\\n    event ProviderUpvoted(address provider, bytes32 taskID);\\n    event ProviderDownvoted(address provider, bytes32 taskID);\\n    event TaskDeleted(bytes32 taskID);\\n\\n    //Modifiers\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auctionOnly() {\\n        require(\\n            msg.sender == auctionAddress,\\n            \\\"Method can be called only by auction.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOnly(bytes32 _taskID) {\\n        require(\\n            msg.sender == tasks[_taskID].client,\\n            \\\"Method can be called only by client.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier providerOnly(bytes32 _taskID) {\\n        require(\\n            msg.sender == tasks[_taskID].provider,\\n            \\\"Method can be called only by provider.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOrProviderOnly(bytes32 _taskID) {\\n        require(\\n            (msg.sender == tasks[_taskID].client) || (msg.sender == tasks[_taskID].provider) || (msg.sender == owner),\\n            \\\"Method can be called only by client, provider or the owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inTaskState(bytes32 _taskID,TaskState _taskState) {\\n        require(\\n            tasks[_taskID].taskState == _taskState,\\n            \\\"Invalid TaskState.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inPaymentState(bytes32 _taskID,PaymentState _paymentState) {\\n        require(\\n            tasks[_taskID].paymentState == _paymentState,\\n            \\\"Invalid PaymentState.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requiresValue(uint amount) {\\n        require(\\n            msg.value == amount,\\n            \\\"Value sent is not the expected\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier registeredTaskOnly(bytes32 _taskID) {\\n        require(\\n            isRegistered(_taskID),\\n            \\\"Task must be registered\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notRegisteredTaskOnly(bytes32 _taskID) {\\n        require(\\n            !isRegistered(_taskID),\\n            \\\"Task already exists\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function createTask(\\n        bytes32 _taskID, \\n        address _client,\\n        address _provider,\\n        uint _price,\\n        uint _deadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public payable notRegisteredTaskOnly(_taskID) auctionOnly\\n    {\\n        require (msg.value >= _price * 2, \\\"Client collateral is not enough\\\");\\n        tasks[_taskID].taskID = _taskID;\\n        tasks[_taskID].client = payable (_client);\\n        tasks[_taskID].clientCollateral = msg.value;\\n        tasks[_taskID].provider = payable(_provider);\\n        tasks[_taskID].providerCollateral = _price * 10;\\n        tasks[_taskID].price = _price;\\n        tasks[_taskID].deadline = _deadline;\\n        tasks[_taskID].clientVerification = _clientVerification;\\n        tasks[_taskID].code = _code;\\n        tasks[_taskID].taskState = TaskState.Created;\\n        tasks[_taskID].paymentState = PaymentState.Initialized;\\n        // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        bytes32_tasks.push(_taskID);\\n        emit TaskCreated(_taskID, _client, _provider);\\n    }\\n\\n    //Cancel\\n    //TaskState -> Cancel\\n    //refunds payment to client\\n    //can be called only by client and only if contract hasnt been activated by provider\\n\\n    function cancelTask(bytes32 _taskID) public clientOnly(_taskID) inTaskState(_taskID,TaskState.Created) \\n    {\\n        tasks[_taskID].taskState = TaskState.Cancelled;\\n        tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral);\\n        // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TransferMadeToClient(tasks[_taskID].client,tasks[_taskID].clientCollateral);\\n        emit TaskCancelled(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function invalidateTask(bytes32 _taskID) public  clientOnly(_taskID) inTaskState(_taskID, TaskState.Active) \\n    {\\n        require(\\n            (block.timestamp > tasks[_taskID].activationTime + tasks[_taskID].deadline),\\n            \\\"Time has not expired.\\\"\\n        );\\n        tasks[_taskID].taskState = TaskState.Invalid;\\n  \\n        tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n        // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n        emit TaskInvalidated(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    // Activate\\n    // TaskState -> Activated\\n    // can be called only by provider to start the process\\n\\n    function activateTask(bytes32 _taskID) public payable providerOnly(_taskID) inTaskState(_taskID,TaskState.Created) registeredTaskOnly(_taskID)\\n    {\\n        require (msg.value >= tasks[_taskID].providerCollateral, \\\"Provider collateral is not enough\\\");\\n        tasks[_taskID].activationTime = block.timestamp;\\n        tasks[_taskID].providerCollateral = msg.value;\\n        tasks[_taskID].taskState = TaskState.Active;\\n        // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TaskActivated(_taskID, tasks[_taskID].client ,tasks[_taskID].provider);\\n    }\\n\\n    // Complete\\n    // TaskState -> Completed\\n    // can be called only by provider when the computation is over\\n\\n    //called by docker container\\n    function completeTask(bytes32 _taskID,string memory ver,  uint _duration, uint _timeReceivedProvider) public providerOnly(_taskID) inTaskState(_taskID,TaskState.Active) \\n    {\\n        tasks[_taskID].timeResultProvided = _timeReceivedProvider;\\n        tasks[_taskID].duration = _duration;\\n        if (InTime(_taskID) && CorrectVerification(_taskID, ver)){\\n            tasks[_taskID].cost = tasks[_taskID].price * tasks[_taskID].duration;\\n            tasks[_taskID].taskState = TaskState.CompletedSuccessfully;\\n            // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskCompletedSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n            tasks[_taskID].taskState = TaskState.CompletedUnsuccessfully;\\n            // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskCompletedUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n    }\\n\\n\\n    //called by provider\\n    function sendResults(bytes32 _taskID, string memory _results) public providerOnly(_taskID) inTaskState(_taskID,TaskState.CompletedSuccessfully) inPaymentState(_taskID,PaymentState.Initialized){\\n        tasks[_taskID].timeResultReceived = block.timestamp;\\n        tasks[_taskID].results = _results;\\n        if (ProviderTime(_taskID)){\\n            if (tasks[_taskID].cost <= tasks[_taskID].clientCollateral) {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].cost + tasks[_taskID].providerCollateral);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost + tasks[_taskID].providerCollateral);\\n                tasks[_taskID].client.transfer(tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n                emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n                tasks[_taskID].paymentState = PaymentState.Completed;\\n                // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n                emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);                \\n            }\\n            else {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].clientCollateral+tasks[_taskID].providerCollateral);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].clientCollateral+tasks[_taskID].providerCollateral);\\n                tasks[_taskID].paymentState = PaymentState.Pending;\\n                // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n                emit PaymentPending(_taskID, tasks[_taskID].client, tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n            }\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedSuccessfully;\\n            // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskReceivedResultsSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            performance[tasks[_taskID].provider].upVotes += 1;\\n            emit ProviderUpvoted(tasks[_taskID].provider,_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedUnsuccessfully;\\n            // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskReceivedResultsUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n        }\\n    }\\n\\n\\n    function completePayment(bytes32 _taskID) public payable clientOnly(_taskID) inTaskState(_taskID,TaskState.ResultsReceivedSuccessfully) inPaymentState(_taskID,PaymentState.Pending) requiresValue(tasks[_taskID].cost - tasks[_taskID].clientCollateral) {\\n        require (tasks[_taskID].paymentState == PaymentState.Pending, \\\"Payment not needed\\\");\\n        tasks[_taskID].provider.transfer(msg.value);\\n        emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n        tasks[_taskID].paymentState = PaymentState.Completed;\\n        // tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function setAuctionsManager(address _auctionAddress) public ownerOnly {\\n        auctionAddress = _auctionAddress;\\n    }\\n\\n    //add time difference between lastUpdateTimestamp and now\\n    // function deleteTasks() public ownerOnly { \\n    //     for (uint i = bytes32_tasks.length; i > 0; i--)\\n    //     {\\n    //         bytes32 _taskID = bytes32_tasks[i-1];\\n    //         if ((tasks[_taskID].taskState == TaskState.ResultsReceivedSuccessfully && tasks[_taskID].paymentState == PaymentState.Completed \\n    //         || tasks[_taskID].taskState == TaskState.ResultsReceivedUnsuccessfully \\n    //         || tasks[_taskID].taskState == TaskState.CompletedUnsuccessfully \\n    //         || tasks[_taskID].taskState == TaskState.Cancelled \\n    //         || tasks[_taskID].taskState == TaskState.Invalid) \\n    //         && block.timestamp > tasks[_taskID].lastUpdateTimestamp + 60) \\n    //         //TO ADD time difference between lastUpdateTimestamp eg 24h instead of 1 min\\n    //         {\\n    //             delete(tasks[_taskID]);\\n    //             bytes32_tasks[i-1] = bytes32_tasks[bytes32_tasks.length - 1];\\n    //             bytes32_tasks.pop();\\n    //             emit TaskDeleted(_taskID);\\n    //         }\\n    //     }\\n    // }\\n\\n    function deleteTask(bytes32 _taskID) public ownerOnly registeredTaskOnly(_taskID) {\\n        delete(tasks[_taskID]);\\n        for (uint i=0; i < bytes32_tasks.length; i++)\\n        {\\n            if (bytes32_tasks[i] == _taskID)\\n            {\\n                bytes32_tasks[i] = bytes32_tasks[bytes32_tasks.length - 1];\\n                bytes32_tasks.pop();\\n                break;\\n            }\\n        }\\n        emit TaskDeleted(_taskID);\\n    }\\n\\n    function getActiveTasks() ownerOnly public view returns (uint256) {\\n        return bytes32_tasks.length;\\n    }\\n    //Functions -> Private/internal\\n    function InTime(bytes32 _taskID) private view returns (bool){\\n        return (tasks[_taskID].timeResultProvided <= tasks[_taskID].activationTime + tasks[_taskID].deadline) && (tasks[_taskID].duration <= tasks[_taskID].deadline);  \\n    }\\n\\n    function ProviderTime(bytes32 _taskID) private view returns (bool) {\\n        return (tasks[_taskID].timeResultReceived <= tasks[_taskID].timeResultProvided + 600) && (tasks[_taskID].timeResultReceived >= tasks[_taskID].timeResultProvided) && (tasks[_taskID].timeResultReceived >= tasks[_taskID].activationTime + tasks[_taskID].duration) && (tasks[_taskID].timeResultProvided >= tasks[_taskID].activationTime + tasks[_taskID].duration); //gives 600 sec to provider to send the results, time received must be greater than time provided\\n    }\\n\\n    function CorrectVerification(bytes32 _taskID, string memory ver) private view returns (bool){\\n        return (tasks[_taskID].clientVerification == keccak256(abi.encodePacked(ver)));\\n    }\\n\\n    function isRegistered(bytes32 _taskID) public view returns (bool) {\\n        return (tasks[_taskID].client != address(0));\\n    }\\n\\n    function getPerformance(address provider) public view returns (providerRating memory) {\\n        return performance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getCode(bytes32 _taskID) public providerOnly(_taskID) inTaskState(_taskID,TaskState.Active) view returns (string memory) {\\n        return tasks[_taskID].code;\\n    }\\n\\n \\n    //Getters - some to be deleted\\n    // function getActivationTime(bytes32 _taskID) public view returns (uint)\\n    // {\\n    //     return tasks[_taskID].activationTime;\\n    // }\\n\\n    // function getLastUpdateTimestamp(bytes32 _taskID) public view returns (uint)\\n    // {\\n    //     return tasks[_taskID].lastUpdateTimestamp;\\n    // }\\n\\n    function getResults(bytes32 _taskID) public clientOnly(_taskID) inTaskState(_taskID,TaskState.ResultsReceivedSuccessfully) inPaymentState(_taskID,PaymentState.Completed) view returns (string memory)  {\\n        return tasks[_taskID].results;\\n    }\\n\\n    function getTasksByClient(address _client) public view returns (Task[] memory) {\\n        Task[] memory tasksByClient = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].client == _client) {\\n                tasksByClient[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n        for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByClient[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getTasksByProvider(address _provider) public view returns (Task[] memory) {\\n        Task[] memory tasksByProvider = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].provider == _provider) {\\n                tasksByProvider[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n         for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByProvider[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getProviderCollateral(bytes32 _taskID) public providerOnly(_taskID) inTaskState(_taskID,TaskState.Created) registeredTaskOnly(_taskID) view returns (uint) {\\n        return tasks[_taskID].providerCollateral;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getAuctionAddress() public view returns (address) {\\n        return auctionAddress;\\n    }\\n\\n    function getTask(bytes32 _taskID) public view returns (Task memory) {\\n        return tasks[_taskID];\\n    }\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0xe81e589331f5978d5d94362866aba2b7594ea0ae33ad5062dbbd6b871dd38d87\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c614468610082600039600081816103d601528181610f970152818161182a015281816118c50152612c8601526144686000f3fe6080604052600436106100f25760003560e01c80639b680e7d1161008a578063cf44b5d511610059578063cf44b5d514610318578063da051b9b14610343578063e0a7632414610380578063e1515563146103a9576100f2565b80639b680e7d1461024c578063a02daf9614610289578063a8847413146102b2578063cd772f5c146102ef576100f2565b80636ecc9bad116100c65780636ecc9bad1461017c5780637a5a69e3146101b95780637f39e961146101f6578063893d20e814610221576100f2565b80629c3f8f146100f757806312e1d724146101205780633ef4d1301461013c5780634df2ca1814610165575b600080fd5b34801561010357600080fd5b5061011e60048036038101906101199190613050565b6103d4565b005b61013a600480360381019061013591906130db565b610686565b005b34801561014857600080fd5b50610163600480360381019061015e9190613050565b610d4c565b005b34801561017157600080fd5b5061017a610f95565b005b34801561018857600080fd5b506101a3600480360381019061019e919061311b565b6112e0565b6040516101b0919061357a565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190613050565b6117b7565b6040516101ed91906135b7565b60405180910390f35b34801561020257600080fd5b5061020b611826565b60405161021891906135e1565b60405180910390f35b34801561022d57600080fd5b506102366118c1565b604051610243919061360b565b60405180910390f35b34801561025857600080fd5b50610273600480360381019061026e9190613050565b6118e9565b6040516102809190613695565b60405180910390f35b34801561029557600080fd5b506102b060048036038101906102ab9190613818565b6119d2565b005b3480156102be57600080fd5b506102d960048036038101906102d49190613050565b611bd1565b6040516102e691906138e5565b60405180910390f35b3480156102fb57600080fd5b5061031660048036038101906103119190613907565b611dd1565b005b34801561032457600080fd5b5061032d61262e565b60405161033a919061357a565b60405180910390f35b34801561034f57600080fd5b5061036a60048036038101906103659190613050565b612bf4565b6040516103779190613976565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a291906139cf565b612c84565b005b3480156103b557600080fd5b506103be612d55565b6040516103cb919061360b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045990613a6e565b60405180910390fd5b8061046c816117b7565b6104ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a290613ada565b60405180910390fd5b600160008381526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160009055600582016000905560068201600061051e9190612dad565b60078201600061052e9190612ded565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff0219169055600b820160009055505060005b60028054905081101561064a5782600282815481106105a7576105a6613afa565b5b9060005260206000200154141561063757600260016002805490506105cc9190613b58565b815481106105dd576105dc613afa565b5b9060005260206000200154600282815481106105fc576105fb613afa565b5b9060005260206000200181905550600280548061061c5761061b613b8c565b5b6001900381819060005260206000200160009055905561064a565b808061064290613bbb565b915050610585565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a158260405161067a9190613c13565b60405180910390a15050565b816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072290613ca0565b60405180910390fd5b82600080600281111561074157610740613377565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff16600281111561077757610776613377565b5b146107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90613d0c565b60405180910390fd5b846107c1816117b7565b610800576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f790613ada565b60405180910390fd5b6000806001600089815260200190815260200160002060070180549050141561085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590613d78565b60405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660016000898152602001908152602001600020600701828154811061089e5761089d613afa565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109235780806108f690613bbb565b9150506001600088815260200190815260200160002060070180549050811061091e57610923565b61085f565b6001600088815260200190815260200160002060070180549050811061097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097590613de4565b60405180910390fd5b610986612e11565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600089815260200190815260200160002060070182815481106109e6576109e5613afa565b5b90600052602060002090600402016001015481602001818152505060028160200151610a129190613e04565b341015610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90613eaa565b60405180910390fd5b80600160008a815260200190815260200160002060080160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008a815260200190815260200160002090506002600160008b8152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610b1057610b0f613377565b5b021790555042600160008b8152602001908152602001600020600b01819055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a89600160008c815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a604051610b9993929190613eca565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610bdc93929190613f01565b6040516020818303038152906040528051906020012090506000610bff8b612d7e565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e896020015189600401548a600501548b6006016040518963ffffffff1660e01b8152600401610c9a979695949392919061402e565b6000604051808303818588803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b50505050507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8b83600160008f815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d604051610d3794939291906140a4565b60405180910390a15050505050505050505050565b806001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890613ca0565b60405180910390fd5b816000806002811115610e0757610e06613377565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff166002811115610e3d57610e3c613377565b5b14610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490613d0c565b60405180910390fd5b83610e87816117b7565b610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd90613ada565b60405180910390fd5b6001806000878152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610eff57610efe613377565b5b02179055504260016000878152602001908152602001600020600b01819055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610f869291906140e9565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101a90613a6e565b60405180910390fd5b600060028054905090505b60008111156112dd57600060026001836110489190613b58565b8154811061105957611058613afa565b5b9060005260206000200154905060028081111561107957611078613377565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff1660028111156110af576110ae613377565b5b14806111025750600160028111156110ca576110c9613377565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff166002811115611100576110ff613377565b5b145b801561112f5750603c60016000838152602001908152602001600020600b015461112c9190614112565b42115b156112c957600160008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000905560058201600090556006820160006111a79190612dad565b6007820160006111b79190612ded565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff0219169055600b82016000905550506002600160028054905061121f9190613b58565b815481106112305761122f613afa565b5b9060005260206000200154600260018461124a9190613b58565b8154811061125b5761125a613afa565b5b9060005260206000200181905550600280548061127b5761127a613b8c565b5b600190038181906000526020600020016000905590557f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516112c09190613c13565b60405180910390a15b5080806112d590614168565b91505061102e565b50565b6060600060028054905067ffffffffffffffff811115611303576113026136ed565b5b60405190808252806020026020018201604052801561133c57816020015b611329612e41565b8152602001906001900390816113215790505b5090506000805b6002805490508110156116fb578473ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061137f5761137e613afa565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116e85760016000600283815481106113f0576113ef613afa565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820180546114ad90613f67565b80601f01602080910402602001604051908101604052809291908181526020018280546114d990613f67565b80156115265780601f106114fb57610100808354040283529160200191611526565b820191906000526020600020905b81548152906001019060200180831161150957829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156115fa57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611554565b505050508152602001600882016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600a820160009054906101000a900460ff16600281111561169b5761169a613377565b5b60028111156116ad576116ac613377565b5b8152602001600b820154815250508383815181106116ce576116cd613afa565b5b602002602001018190525081806116e490613bbb565b9250505b80806116f390613bbb565b915050611343565b5060008167ffffffffffffffff811115611718576117176136ed565b5b60405190808252806020026020018201604052801561175157816020015b61173e612e41565b8152602001906001900390816117365790505b50905060005b828110156117ab5783818151811061177257611771613afa565b5b602002602001015182828151811061178d5761178c613afa565b5b602002602001018190525080806117a390613bbb565b915050611757565b50809350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ad90613a6e565b60405180910390fd5b600280549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b606060016000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156119c757838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611921565b505050509050919050565b60004233868686866040516020016119ef96959493929190614192565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600160008381526020019081526020016000206002018190555084600160008381526020019081526020016000206003018190555083600160008381526020019081526020016000206004018190555082600160008381526020019081526020016000206005018190555081600160008381526020019081526020016000206006019080519060200190611b0d929190612ecf565b50600060016000838152602001908152602001600020600a0160006101000a81548160ff02191690836002811115611b4857611b47613377565b5b02179055504260016000838152602001908152602001600020600b018190555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c06513438133604051611bc29291906140e9565b60405180910390a15050505050565b6060600060405180602001604052806000815250905060006002811115611bfb57611bfa613377565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff166002811115611c3157611c30613377565b5b1415611c74576040518060400160405280600781526020017f43726561746564000000000000000000000000000000000000000000000000008152509050611dc8565b60016002811115611c8857611c87613377565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff166002811115611cbe57611cbd613377565b5b1415611d01576040518060400160405280600981526020017f43616e63656c6c656400000000000000000000000000000000000000000000008152509050611dc7565b600280811115611d1457611d13613377565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff166002811115611d4a57611d49613377565b5b1415611d8d576040518060400160405280600981526020017f46696e616c697a656400000000000000000000000000000000000000000000008152509050611dc6565b6040518060400160405280600581526020017f4572726f7200000000000000000000000000000000000000000000000000000081525090505b5b5b80915050919050565b816000806002811115611de757611de6613377565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff166002811115611e1d57611e1c613377565b5b14611e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5490613d0c565b60405180910390fd5b83611e67816117b7565b611ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9d90613ada565b60405180910390fd5b6001600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4290614246565b60405180910390fd5b60016000868152602001908152602001600020600301546001600087815260200190815260200160002060020154611f839190614112565b421115611fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbc906142b2565b60405180910390fd5b6000806000600160008981526020019081526020016000206007018054905014612150575b3373ffffffffffffffffffffffffffffffffffffffff1660016000898152602001908152602001600020600701838154811061202957612028613afa565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120af57818061208190613bbb565b92505060016000888152602001908152602001600020600701805490508211156120aa576120af565b611fea565b6001600088815260200190815260200160002060070180549050821161214f576001600088815260200190815260200160002060070182815481106120f7576120f6613afa565b5b906000526020600020906004020160010154861061214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214190614344565b60405180910390fd5b600190505b5b600115158115151415612372578560016000898152602001908152602001600020600701838154811061218657612185613afa565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016121f4919061360b565b604080518083038186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224391906143ce565b6000015160016000898152602001908152602001600020600701838154811061226f5761226e613afa565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016122dd919061360b565b604080518083038186803b1580156122f457600080fd5b505afa158015612308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232c91906143ce565b6020015160016000898152602001908152602001600020600701838154811061235857612357613afa565b5b9060005260206000209060040201600301819055506125cf565b61237a612f55565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508681602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401612415919061360b565b604080518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246491906143ce565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016124ca919061360b565b604080518083038186803b1580156124e157600080fd5b505afa1580156124f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251991906143ce565b602001518160600181815250506001600089815260200190815260200160002060070181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b4260016000898152602001908152602001600020600b01819055507f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c6687338860405161261d939291906143fb565b60405180910390a150505050505050565b6060600060028054905067ffffffffffffffff811115612651576126506136ed565b5b60405190808252806020026020018201604052801561268a57816020015b612677612e41565b81526020019060019003908161266f5790505b5090506000805b600280549050811015612b3a57600060028111156126b2576126b1613377565b5b60016000600284815481106126ca576126c9613afa565b5b90600052602060002001548152602001908152602001600020600a0160009054906101000a900460ff16600281111561270657612705613377565b5b1480156127865750600160006002838154811061272657612725613afa565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061275b5761275a613afa565b5b90600052602060002001548152602001908152602001600020600201546127829190614112565b4211155b801561281257503373ffffffffffffffffffffffffffffffffffffffff1660016000600284815481106127bc576127bb613afa565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612b2757600160006002838154811061282f5761282e613afa565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820180546128ec90613f67565b80601f016020809104026020016040519081016040528092919081815260200182805461291890613f67565b80156129655780601f1061293a57610100808354040283529160200191612965565b820191906000526020600020905b81548152906001019060200180831161294857829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612a3957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612993565b505050508152602001600882016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600a820160009054906101000a900460ff166002811115612ada57612ad9613377565b5b6002811115612aec57612aeb613377565b5b8152602001600b82015481525050838381518110612b0d57612b0c613afa565b5b60200260200101819052508180612b2390613bbb565b9250505b8080612b3290613bbb565b915050612691565b5060008167ffffffffffffffff811115612b5757612b566136ed565b5b604051908082528060200260200182016040528015612b9057816020015b612b7d612e41565b815260200190600190039081612b755790505b50905060005b82811015612bea57838181518110612bb157612bb0613afa565b5b6020026020010151828281518110612bcc57612bcb613afa565b5b60200260200101819052508080612be290613bbb565b915050612b96565b5080935050505090565b612bfc612e11565b600160008381526020019081526020016000206008016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0990613a6e565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026001600084815260200190815260200160002060080160010154612da69190613e04565b9050919050565b508054612db990613f67565b6000825580601f10612dcb5750612dea565b601f016020900490600052602060002090810190612de99190612f93565b5b50565b5080546000825560040290600052602060002090810190612e0e9190612fb0565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016060815260200160608152602001612ea9612e11565b815260200160006002811115612ec257612ec1613377565b5b8152602001600081525090565b828054612edb90613f67565b90600052602060002090601f016020900481019282612efd5760008555612f44565b82601f10612f1657805160ff1916838001178555612f44565b82800160010185558215612f44579182015b82811115612f43578251825591602001919060010190612f28565b5b509050612f519190612f93565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b80821115612fac576000816000905550600101612f94565b5090565b5b8082111561300257600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905550600401612fb1565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61302d8161301a565b811461303857600080fd5b50565b60008135905061304a81613024565b92915050565b60006020828403121561306657613065613010565b5b60006130748482850161303b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130a88261307d565b9050919050565b6130b88161309d565b81146130c357600080fd5b50565b6000813590506130d5816130af565b92915050565b600080604083850312156130f2576130f1613010565b5b60006131008582860161303b565b9250506020613111858286016130c6565b9150509250929050565b60006020828403121561313157613130613010565b5b600061313f848285016130c6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61317d8161301a565b82525050565b61318c8161309d565b82525050565b6000819050919050565b6131a581613192565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156131e55780820151818401526020810190506131ca565b838111156131f4576000848401525b50505050565b6000601f19601f8301169050919050565b6000613216826131ab565b61322081856131b6565b93506132308185602086016131c7565b613239816131fa565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516132866000850182613183565b506020820151613299602085018261319c565b5060408201516132ac604085018261319c565b5060608201516132bf606085018261319c565b50505050565b60006132d18383613270565b60808301905092915050565b6000602082019050919050565b60006132f582613244565b6132ff818561324f565b935061330a83613260565b8060005b8381101561333b57815161332288826132c5565b975061332d836132dd565b92505060018101905061330e565b5085935050505092915050565b60408201600082015161335e6000850182613183565b506020820151613371602085018261319c565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106133b7576133b6613377565b5b50565b60008190506133c8826133a6565b919050565b60006133d8826133ba565b9050919050565b6133e8816133cd565b82525050565b6000610180830160008301516134076000860182613174565b50602083015161341a6020860182613183565b50604083015161342d604086018261319c565b506060830151613440606086018261319c565b506080830151613453608086018261319c565b5060a083015161346660a0860182613174565b5060c083015184820360c086015261347e828261320b565b91505060e083015184820360e086015261349882826132ea565b9150506101008301516134af610100860182613348565b506101208301516134c46101408601826133df565b506101408301516134d961016086018261319c565b508091505092915050565b60006134f083836133ee565b905092915050565b6000602082019050919050565b600061351082613148565b61351a8185613153565b93508360208202850161352c85613164565b8060005b85811015613568578484038952815161354985826134e4565b9450613554836134f8565b925060208a01995050600181019050613530565b50829750879550505050505092915050565b600060208201905081810360008301526135948184613505565b905092915050565b60008115159050919050565b6135b18161359c565b82525050565b60006020820190506135cc60008301846135a8565b92915050565b6135db81613192565b82525050565b60006020820190506135f660008301846135d2565b92915050565b6136058161309d565b82525050565b600060208201905061362060008301846135fc565b92915050565b600082825260208201905092915050565b600061364282613244565b61364c8185613626565b935061365783613260565b8060005b8381101561368857815161366f88826132c5565b975061367a836132dd565b92505060018101905061365b565b5085935050505092915050565b600060208201905081810360008301526136af8184613637565b905092915050565b6136c081613192565b81146136cb57600080fd5b50565b6000813590506136dd816136b7565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613725826131fa565b810181811067ffffffffffffffff82111715613744576137436136ed565b5b80604052505050565b6000613757613006565b9050613763828261371c565b919050565b600067ffffffffffffffff821115613783576137826136ed565b5b61378c826131fa565b9050602081019050919050565b82818337600083830152505050565b60006137bb6137b684613768565b61374d565b9050828152602081018484840111156137d7576137d66136e8565b5b6137e2848285613799565b509392505050565b600082601f8301126137ff576137fe6136e3565b5b813561380f8482602086016137a8565b91505092915050565b6000806000806080858703121561383257613831613010565b5b6000613840878288016136ce565b9450506020613851878288016136ce565b93505060406138628782880161303b565b925050606085013567ffffffffffffffff81111561388357613882613015565b5b61388f878288016137ea565b91505092959194509250565b600082825260208201905092915050565b60006138b7826131ab565b6138c1818561389b565b93506138d18185602086016131c7565b6138da816131fa565b840191505092915050565b600060208201905081810360008301526138ff81846138ac565b905092915050565b6000806040838503121561391e5761391d613010565b5b600061392c8582860161303b565b925050602061393d858286016136ce565b9150509250929050565b60408201600082015161395d6000850182613183565b506020820151613970602085018261319c565b50505050565b600060408201905061398b6000830184613947565b92915050565b600061399c8261307d565b9050919050565b6139ac81613991565b81146139b757600080fd5b50565b6000813590506139c9816139a3565b92915050565b6000602082840312156139e5576139e4613010565b5b60006139f3848285016139ba565b91505092915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000613a5860238361389b565b9150613a63826139fc565b604082019050919050565b60006020820190508181036000830152613a8781613a4b565b9050919050565b7f41756374696f6e206d7573742065786973740000000000000000000000000000600082015250565b6000613ac460128361389b565b9150613acf82613a8e565b602082019050919050565b60006020820190508181036000830152613af381613ab7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b6382613192565b9150613b6e83613192565b925082821015613b8157613b80613b29565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613bc682613192565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bf957613bf8613b29565b5b600182019050919050565b613c0d8161301a565b82525050565b6000602082019050613c286000830184613c04565b92915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c7920627920636c6960008201527f656e742e00000000000000000000000000000000000000000000000000000000602082015250565b6000613c8a60248361389b565b9150613c9582613c2e565b604082019050919050565b60006020820190508181036000830152613cb981613c7d565b9050919050565b7f496e76616c69642041756374696f6e53746174652e0000000000000000000000600082015250565b6000613cf660158361389b565b9150613d0182613cc0565b602082019050919050565b60006020820190508181036000830152613d2581613ce9565b9050919050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613d6260148361389b565b9150613d6d82613d2c565b602082019050919050565b60006020820190508181036000830152613d9181613d55565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613dce60168361389b565b9150613dd982613d98565b602082019050919050565b60006020820190508181036000830152613dfd81613dc1565b9050919050565b6000613e0f82613192565b9150613e1a83613192565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e5357613e52613b29565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420656e6f75676800600082015250565b6000613e94601f8361389b565b9150613e9f82613e5e565b602082019050919050565b60006020820190508181036000830152613ec381613e87565b9050919050565b6000606082019050613edf6000830186613c04565b613eec60208301856135fc565b613ef960408301846135fc565b949350505050565b6000608082019050613f1660008301866135fc565b613f236020830185613947565b613f3060608301846135d2565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613f7f57607f821691505b60208210811415613f9357613f92613f38565b5b50919050565b60008190508160005260206000209050919050565b60008154613fbb81613f67565b613fc5818661389b565b94506001821660008114613fe05760018114613ff257614025565b60ff1983168652602086019350614025565b613ffb85613f99565b60005b8381101561401d57815481890152600182019150602081019050613ffe565b808801955050505b50505092915050565b600060e082019050614043600083018a613c04565b61405060208301896135fc565b61405d60408301886135fc565b61406a60608301876135d2565b61407760808301866135d2565b61408460a0830185613c04565b81810360c08301526140968184613fae565b905098975050505050505050565b60006080820190506140b96000830187613c04565b6140c66020830186613c04565b6140d360408301856135fc565b6140e060608301846135fc565b95945050505050565b60006040820190506140fe6000830185613c04565b61410b60208301846135fc565b9392505050565b600061411d82613192565b915061412883613192565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561415d5761415c613b29565b5b828201905092915050565b600061417382613192565b9150600082141561418757614186613b29565b5b600182039050919050565b600060c0820190506141a760008301896135d2565b6141b460208301886135fc565b6141c160408301876135d2565b6141ce60608301866135d2565b6141db6080830185613c04565b81810360a08301526141ed81846138ac565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b600061423060208361389b565b915061423b826141fa565b602082019050919050565b6000602082019050818103600083015261425f81614223565b9050919050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b600061429c60118361389b565b91506142a782614266565b602082019050919050565b600060208201905081810360008301526142cb8161428f565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b600061432e602c8361389b565b9150614339826142d2565b604082019050919050565b6000602082019050818103600083015261435d81614321565b9050919050565b600080fd5b600081519050614378816136b7565b92915050565b60006040828403121561439457614393614364565b5b61439e604061374d565b905060006143ae84828501614369565b60008301525060206143c284828501614369565b60208301525092915050565b6000604082840312156143e4576143e3613010565b5b60006143f28482850161437e565b91505092915050565b60006060820190506144106000830186613c04565b61441d60208301856135fc565b61442a60408301846135d2565b94935050505056fea2646970667358221220b7342e1e43d6b0d2a9281708571ba7e8b9a7a9f74e63b49d3ca2f73a2027a38f64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100f25760003560e01c80639b680e7d1161008a578063cf44b5d511610059578063cf44b5d514610318578063da051b9b14610343578063e0a7632414610380578063e1515563146103a9576100f2565b80639b680e7d1461024c578063a02daf9614610289578063a8847413146102b2578063cd772f5c146102ef576100f2565b80636ecc9bad116100c65780636ecc9bad1461017c5780637a5a69e3146101b95780637f39e961146101f6578063893d20e814610221576100f2565b80629c3f8f146100f757806312e1d724146101205780633ef4d1301461013c5780634df2ca1814610165575b600080fd5b34801561010357600080fd5b5061011e60048036038101906101199190613050565b6103d4565b005b61013a600480360381019061013591906130db565b610686565b005b34801561014857600080fd5b50610163600480360381019061015e9190613050565b610d4c565b005b34801561017157600080fd5b5061017a610f95565b005b34801561018857600080fd5b506101a3600480360381019061019e919061311b565b6112e0565b6040516101b0919061357a565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190613050565b6117b7565b6040516101ed91906135b7565b60405180910390f35b34801561020257600080fd5b5061020b611826565b60405161021891906135e1565b60405180910390f35b34801561022d57600080fd5b506102366118c1565b604051610243919061360b565b60405180910390f35b34801561025857600080fd5b50610273600480360381019061026e9190613050565b6118e9565b6040516102809190613695565b60405180910390f35b34801561029557600080fd5b506102b060048036038101906102ab9190613818565b6119d2565b005b3480156102be57600080fd5b506102d960048036038101906102d49190613050565b611bd1565b6040516102e691906138e5565b60405180910390f35b3480156102fb57600080fd5b5061031660048036038101906103119190613907565b611dd1565b005b34801561032457600080fd5b5061032d61262e565b60405161033a919061357a565b60405180910390f35b34801561034f57600080fd5b5061036a60048036038101906103659190613050565b612bf4565b6040516103779190613976565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a291906139cf565b612c84565b005b3480156103b557600080fd5b506103be612d55565b6040516103cb919061360b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045990613a6e565b60405180910390fd5b8061046c816117b7565b6104ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a290613ada565b60405180910390fd5b600160008381526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160009055600582016000905560068201600061051e9190612dad565b60078201600061052e9190612ded565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff0219169055600b820160009055505060005b60028054905081101561064a5782600282815481106105a7576105a6613afa565b5b9060005260206000200154141561063757600260016002805490506105cc9190613b58565b815481106105dd576105dc613afa565b5b9060005260206000200154600282815481106105fc576105fb613afa565b5b9060005260206000200181905550600280548061061c5761061b613b8c565b5b6001900381819060005260206000200160009055905561064a565b808061064290613bbb565b915050610585565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a158260405161067a9190613c13565b60405180910390a15050565b816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072290613ca0565b60405180910390fd5b82600080600281111561074157610740613377565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff16600281111561077757610776613377565b5b146107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90613d0c565b60405180910390fd5b846107c1816117b7565b610800576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f790613ada565b60405180910390fd5b6000806001600089815260200190815260200160002060070180549050141561085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590613d78565b60405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660016000898152602001908152602001600020600701828154811061089e5761089d613afa565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109235780806108f690613bbb565b9150506001600088815260200190815260200160002060070180549050811061091e57610923565b61085f565b6001600088815260200190815260200160002060070180549050811061097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097590613de4565b60405180910390fd5b610986612e11565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600089815260200190815260200160002060070182815481106109e6576109e5613afa565b5b90600052602060002090600402016001015481602001818152505060028160200151610a129190613e04565b341015610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90613eaa565b60405180910390fd5b80600160008a815260200190815260200160002060080160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008a815260200190815260200160002090506002600160008b8152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610b1057610b0f613377565b5b021790555042600160008b8152602001908152602001600020600b01819055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a89600160008c815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a604051610b9993929190613eca565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610bdc93929190613f01565b6040516020818303038152906040528051906020012090506000610bff8b612d7e565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e896020015189600401548a600501548b6006016040518963ffffffff1660e01b8152600401610c9a979695949392919061402e565b6000604051808303818588803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b50505050507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8b83600160008f815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d604051610d3794939291906140a4565b60405180910390a15050505050505050505050565b806001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890613ca0565b60405180910390fd5b816000806002811115610e0757610e06613377565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff166002811115610e3d57610e3c613377565b5b14610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490613d0c565b60405180910390fd5b83610e87816117b7565b610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd90613ada565b60405180910390fd5b6001806000878152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610eff57610efe613377565b5b02179055504260016000878152602001908152602001600020600b01819055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610f869291906140e9565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101a90613a6e565b60405180910390fd5b600060028054905090505b60008111156112dd57600060026001836110489190613b58565b8154811061105957611058613afa565b5b9060005260206000200154905060028081111561107957611078613377565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff1660028111156110af576110ae613377565b5b14806111025750600160028111156110ca576110c9613377565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff166002811115611100576110ff613377565b5b145b801561112f5750603c60016000838152602001908152602001600020600b015461112c9190614112565b42115b156112c957600160008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000905560058201600090556006820160006111a79190612dad565b6007820160006111b79190612ded565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff0219169055600b82016000905550506002600160028054905061121f9190613b58565b815481106112305761122f613afa565b5b9060005260206000200154600260018461124a9190613b58565b8154811061125b5761125a613afa565b5b9060005260206000200181905550600280548061127b5761127a613b8c565b5b600190038181906000526020600020016000905590557f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516112c09190613c13565b60405180910390a15b5080806112d590614168565b91505061102e565b50565b6060600060028054905067ffffffffffffffff811115611303576113026136ed565b5b60405190808252806020026020018201604052801561133c57816020015b611329612e41565b8152602001906001900390816113215790505b5090506000805b6002805490508110156116fb578473ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061137f5761137e613afa565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116e85760016000600283815481106113f0576113ef613afa565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820180546114ad90613f67565b80601f01602080910402602001604051908101604052809291908181526020018280546114d990613f67565b80156115265780601f106114fb57610100808354040283529160200191611526565b820191906000526020600020905b81548152906001019060200180831161150957829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156115fa57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611554565b505050508152602001600882016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600a820160009054906101000a900460ff16600281111561169b5761169a613377565b5b60028111156116ad576116ac613377565b5b8152602001600b820154815250508383815181106116ce576116cd613afa565b5b602002602001018190525081806116e490613bbb565b9250505b80806116f390613bbb565b915050611343565b5060008167ffffffffffffffff811115611718576117176136ed565b5b60405190808252806020026020018201604052801561175157816020015b61173e612e41565b8152602001906001900390816117365790505b50905060005b828110156117ab5783818151811061177257611771613afa565b5b602002602001015182828151811061178d5761178c613afa565b5b602002602001018190525080806117a390613bbb565b915050611757565b50809350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ad90613a6e565b60405180910390fd5b600280549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b606060016000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156119c757838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611921565b505050509050919050565b60004233868686866040516020016119ef96959493929190614192565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600160008381526020019081526020016000206002018190555084600160008381526020019081526020016000206003018190555083600160008381526020019081526020016000206004018190555082600160008381526020019081526020016000206005018190555081600160008381526020019081526020016000206006019080519060200190611b0d929190612ecf565b50600060016000838152602001908152602001600020600a0160006101000a81548160ff02191690836002811115611b4857611b47613377565b5b02179055504260016000838152602001908152602001600020600b018190555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c06513438133604051611bc29291906140e9565b60405180910390a15050505050565b6060600060405180602001604052806000815250905060006002811115611bfb57611bfa613377565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff166002811115611c3157611c30613377565b5b1415611c74576040518060400160405280600781526020017f43726561746564000000000000000000000000000000000000000000000000008152509050611dc8565b60016002811115611c8857611c87613377565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff166002811115611cbe57611cbd613377565b5b1415611d01576040518060400160405280600981526020017f43616e63656c6c656400000000000000000000000000000000000000000000008152509050611dc7565b600280811115611d1457611d13613377565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff166002811115611d4a57611d49613377565b5b1415611d8d576040518060400160405280600981526020017f46696e616c697a656400000000000000000000000000000000000000000000008152509050611dc6565b6040518060400160405280600581526020017f4572726f7200000000000000000000000000000000000000000000000000000081525090505b5b5b80915050919050565b816000806002811115611de757611de6613377565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff166002811115611e1d57611e1c613377565b5b14611e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5490613d0c565b60405180910390fd5b83611e67816117b7565b611ea6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9d90613ada565b60405180910390fd5b6001600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4290614246565b60405180910390fd5b60016000868152602001908152602001600020600301546001600087815260200190815260200160002060020154611f839190614112565b421115611fc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbc906142b2565b60405180910390fd5b6000806000600160008981526020019081526020016000206007018054905014612150575b3373ffffffffffffffffffffffffffffffffffffffff1660016000898152602001908152602001600020600701838154811061202957612028613afa565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120af57818061208190613bbb565b92505060016000888152602001908152602001600020600701805490508211156120aa576120af565b611fea565b6001600088815260200190815260200160002060070180549050821161214f576001600088815260200190815260200160002060070182815481106120f7576120f6613afa565b5b906000526020600020906004020160010154861061214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214190614344565b60405180910390fd5b600190505b5b600115158115151415612372578560016000898152602001908152602001600020600701838154811061218657612185613afa565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016121f4919061360b565b604080518083038186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224391906143ce565b6000015160016000898152602001908152602001600020600701838154811061226f5761226e613afa565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016122dd919061360b565b604080518083038186803b1580156122f457600080fd5b505afa158015612308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232c91906143ce565b6020015160016000898152602001908152602001600020600701838154811061235857612357613afa565b5b9060005260206000209060040201600301819055506125cf565b61237a612f55565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508681602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401612415919061360b565b604080518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246491906143ce565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016124ca919061360b565b604080518083038186803b1580156124e157600080fd5b505afa1580156124f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251991906143ce565b602001518160600181815250506001600089815260200190815260200160002060070181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b4260016000898152602001908152602001600020600b01819055507f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c6687338860405161261d939291906143fb565b60405180910390a150505050505050565b6060600060028054905067ffffffffffffffff811115612651576126506136ed565b5b60405190808252806020026020018201604052801561268a57816020015b612677612e41565b81526020019060019003908161266f5790505b5090506000805b600280549050811015612b3a57600060028111156126b2576126b1613377565b5b60016000600284815481106126ca576126c9613afa565b5b90600052602060002001548152602001908152602001600020600a0160009054906101000a900460ff16600281111561270657612705613377565b5b1480156127865750600160006002838154811061272657612725613afa565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061275b5761275a613afa565b5b90600052602060002001548152602001908152602001600020600201546127829190614112565b4211155b801561281257503373ffffffffffffffffffffffffffffffffffffffff1660016000600284815481106127bc576127bb613afa565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612b2757600160006002838154811061282f5761282e613afa565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820180546128ec90613f67565b80601f016020809104026020016040519081016040528092919081815260200182805461291890613f67565b80156129655780601f1061293a57610100808354040283529160200191612965565b820191906000526020600020905b81548152906001019060200180831161294857829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612a3957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612993565b505050508152602001600882016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600a820160009054906101000a900460ff166002811115612ada57612ad9613377565b5b6002811115612aec57612aeb613377565b5b8152602001600b82015481525050838381518110612b0d57612b0c613afa565b5b60200260200101819052508180612b2390613bbb565b9250505b8080612b3290613bbb565b915050612691565b5060008167ffffffffffffffff811115612b5757612b566136ed565b5b604051908082528060200260200182016040528015612b9057816020015b612b7d612e41565b815260200190600190039081612b755790505b50905060005b82811015612bea57838181518110612bb157612bb0613afa565b5b6020026020010151828281518110612bcc57612bcb613afa565b5b60200260200101819052508080612be290613bbb565b915050612b96565b5080935050505090565b612bfc612e11565b600160008381526020019081526020016000206008016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0990613a6e565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026001600084815260200190815260200160002060080160010154612da69190613e04565b9050919050565b508054612db990613f67565b6000825580601f10612dcb5750612dea565b601f016020900490600052602060002090810190612de99190612f93565b5b50565b5080546000825560040290600052602060002090810190612e0e9190612fb0565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016060815260200160608152602001612ea9612e11565b815260200160006002811115612ec257612ec1613377565b5b8152602001600081525090565b828054612edb90613f67565b90600052602060002090601f016020900481019282612efd5760008555612f44565b82601f10612f1657805160ff1916838001178555612f44565b82800160010185558215612f44579182015b82811115612f43578251825591602001919060010190612f28565b5b509050612f519190612f93565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b80821115612fac576000816000905550600101612f94565b5090565b5b8082111561300257600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905550600401612fb1565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61302d8161301a565b811461303857600080fd5b50565b60008135905061304a81613024565b92915050565b60006020828403121561306657613065613010565b5b60006130748482850161303b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130a88261307d565b9050919050565b6130b88161309d565b81146130c357600080fd5b50565b6000813590506130d5816130af565b92915050565b600080604083850312156130f2576130f1613010565b5b60006131008582860161303b565b9250506020613111858286016130c6565b9150509250929050565b60006020828403121561313157613130613010565b5b600061313f848285016130c6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61317d8161301a565b82525050565b61318c8161309d565b82525050565b6000819050919050565b6131a581613192565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156131e55780820151818401526020810190506131ca565b838111156131f4576000848401525b50505050565b6000601f19601f8301169050919050565b6000613216826131ab565b61322081856131b6565b93506132308185602086016131c7565b613239816131fa565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516132866000850182613183565b506020820151613299602085018261319c565b5060408201516132ac604085018261319c565b5060608201516132bf606085018261319c565b50505050565b60006132d18383613270565b60808301905092915050565b6000602082019050919050565b60006132f582613244565b6132ff818561324f565b935061330a83613260565b8060005b8381101561333b57815161332288826132c5565b975061332d836132dd565b92505060018101905061330e565b5085935050505092915050565b60408201600082015161335e6000850182613183565b506020820151613371602085018261319c565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106133b7576133b6613377565b5b50565b60008190506133c8826133a6565b919050565b60006133d8826133ba565b9050919050565b6133e8816133cd565b82525050565b6000610180830160008301516134076000860182613174565b50602083015161341a6020860182613183565b50604083015161342d604086018261319c565b506060830151613440606086018261319c565b506080830151613453608086018261319c565b5060a083015161346660a0860182613174565b5060c083015184820360c086015261347e828261320b565b91505060e083015184820360e086015261349882826132ea565b9150506101008301516134af610100860182613348565b506101208301516134c46101408601826133df565b506101408301516134d961016086018261319c565b508091505092915050565b60006134f083836133ee565b905092915050565b6000602082019050919050565b600061351082613148565b61351a8185613153565b93508360208202850161352c85613164565b8060005b85811015613568578484038952815161354985826134e4565b9450613554836134f8565b925060208a01995050600181019050613530565b50829750879550505050505092915050565b600060208201905081810360008301526135948184613505565b905092915050565b60008115159050919050565b6135b18161359c565b82525050565b60006020820190506135cc60008301846135a8565b92915050565b6135db81613192565b82525050565b60006020820190506135f660008301846135d2565b92915050565b6136058161309d565b82525050565b600060208201905061362060008301846135fc565b92915050565b600082825260208201905092915050565b600061364282613244565b61364c8185613626565b935061365783613260565b8060005b8381101561368857815161366f88826132c5565b975061367a836132dd565b92505060018101905061365b565b5085935050505092915050565b600060208201905081810360008301526136af8184613637565b905092915050565b6136c081613192565b81146136cb57600080fd5b50565b6000813590506136dd816136b7565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613725826131fa565b810181811067ffffffffffffffff82111715613744576137436136ed565b5b80604052505050565b6000613757613006565b9050613763828261371c565b919050565b600067ffffffffffffffff821115613783576137826136ed565b5b61378c826131fa565b9050602081019050919050565b82818337600083830152505050565b60006137bb6137b684613768565b61374d565b9050828152602081018484840111156137d7576137d66136e8565b5b6137e2848285613799565b509392505050565b600082601f8301126137ff576137fe6136e3565b5b813561380f8482602086016137a8565b91505092915050565b6000806000806080858703121561383257613831613010565b5b6000613840878288016136ce565b9450506020613851878288016136ce565b93505060406138628782880161303b565b925050606085013567ffffffffffffffff81111561388357613882613015565b5b61388f878288016137ea565b91505092959194509250565b600082825260208201905092915050565b60006138b7826131ab565b6138c1818561389b565b93506138d18185602086016131c7565b6138da816131fa565b840191505092915050565b600060208201905081810360008301526138ff81846138ac565b905092915050565b6000806040838503121561391e5761391d613010565b5b600061392c8582860161303b565b925050602061393d858286016136ce565b9150509250929050565b60408201600082015161395d6000850182613183565b506020820151613970602085018261319c565b50505050565b600060408201905061398b6000830184613947565b92915050565b600061399c8261307d565b9050919050565b6139ac81613991565b81146139b757600080fd5b50565b6000813590506139c9816139a3565b92915050565b6000602082840312156139e5576139e4613010565b5b60006139f3848285016139ba565b91505092915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000613a5860238361389b565b9150613a63826139fc565b604082019050919050565b60006020820190508181036000830152613a8781613a4b565b9050919050565b7f41756374696f6e206d7573742065786973740000000000000000000000000000600082015250565b6000613ac460128361389b565b9150613acf82613a8e565b602082019050919050565b60006020820190508181036000830152613af381613ab7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b6382613192565b9150613b6e83613192565b925082821015613b8157613b80613b29565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613bc682613192565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bf957613bf8613b29565b5b600182019050919050565b613c0d8161301a565b82525050565b6000602082019050613c286000830184613c04565b92915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c7920627920636c6960008201527f656e742e00000000000000000000000000000000000000000000000000000000602082015250565b6000613c8a60248361389b565b9150613c9582613c2e565b604082019050919050565b60006020820190508181036000830152613cb981613c7d565b9050919050565b7f496e76616c69642041756374696f6e53746174652e0000000000000000000000600082015250565b6000613cf660158361389b565b9150613d0182613cc0565b602082019050919050565b60006020820190508181036000830152613d2581613ce9565b9050919050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613d6260148361389b565b9150613d6d82613d2c565b602082019050919050565b60006020820190508181036000830152613d9181613d55565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613dce60168361389b565b9150613dd982613d98565b602082019050919050565b60006020820190508181036000830152613dfd81613dc1565b9050919050565b6000613e0f82613192565b9150613e1a83613192565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e5357613e52613b29565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420656e6f75676800600082015250565b6000613e94601f8361389b565b9150613e9f82613e5e565b602082019050919050565b60006020820190508181036000830152613ec381613e87565b9050919050565b6000606082019050613edf6000830186613c04565b613eec60208301856135fc565b613ef960408301846135fc565b949350505050565b6000608082019050613f1660008301866135fc565b613f236020830185613947565b613f3060608301846135d2565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613f7f57607f821691505b60208210811415613f9357613f92613f38565b5b50919050565b60008190508160005260206000209050919050565b60008154613fbb81613f67565b613fc5818661389b565b94506001821660008114613fe05760018114613ff257614025565b60ff1983168652602086019350614025565b613ffb85613f99565b60005b8381101561401d57815481890152600182019150602081019050613ffe565b808801955050505b50505092915050565b600060e082019050614043600083018a613c04565b61405060208301896135fc565b61405d60408301886135fc565b61406a60608301876135d2565b61407760808301866135d2565b61408460a0830185613c04565b81810360c08301526140968184613fae565b905098975050505050505050565b60006080820190506140b96000830187613c04565b6140c66020830186613c04565b6140d360408301856135fc565b6140e060608301846135fc565b95945050505050565b60006040820190506140fe6000830185613c04565b61410b60208301846135fc565b9392505050565b600061411d82613192565b915061412883613192565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561415d5761415c613b29565b5b828201905092915050565b600061417382613192565b9150600082141561418757614186613b29565b5b600182039050919050565b600060c0820190506141a760008301896135d2565b6141b460208301886135fc565b6141c160408301876135d2565b6141ce60608301866135d2565b6141db6080830185613c04565b81810360a08301526141ed81846138ac565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b600061423060208361389b565b915061423b826141fa565b602082019050919050565b6000602082019050818103600083015261425f81614223565b9050919050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b600061429c60118361389b565b91506142a782614266565b602082019050919050565b600060208201905081810360008301526142cb8161428f565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b600061432e602c8361389b565b9150614339826142d2565b604082019050919050565b6000602082019050818103600083015261435d81614321565b9050919050565b600080fd5b600081519050614378816136b7565b92915050565b60006040828403121561439457614393614364565b5b61439e604061374d565b905060006143ae84828501614369565b60008301525060206143c284828501614369565b60208301525092915050565b6000604082840312156143e4576143e3613010565b5b60006143f28482850161437e565b91505092915050565b60006060820190506144106000830186613c04565b61441d60208301856135fc565b61442a60408301846135d2565b94935050505056fea2646970667358221220b7342e1e43d6b0d2a9281708571ba7e8b9a7a9f74e63b49d3ca2f73a2027a38f64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "tasksManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TasksManager)3048"
      },
      {
        "astId": 57,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Auction)38_storage)"
      },
      {
        "astId": 60,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "bytes32_auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProviderBid)47_storage)dyn_storage": {
        "base": "t_struct(ProviderBid)47_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionsManager.ProviderBid[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TasksManager)3048": {
        "encoding": "inplace",
        "label": "contract TasksManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)11": {
        "encoding": "inplace",
        "label": "enum AuctionsManager.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)38_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionsManager.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)38_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)38_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.Auction",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "client",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskDeadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "clientVerification",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 25,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "code",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 29,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerBids",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(ProviderBid)47_storage)dyn_storage"
          },
          {
            "astId": 32,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "winnerBid",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(WinnerBid)52_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionState",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(AuctionState)11"
          },
          {
            "astId": 37,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(ProviderBid)47_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.ProviderBid",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 42,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerUpVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerDownVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WinnerBid)52_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.WinnerBid",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 51,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}