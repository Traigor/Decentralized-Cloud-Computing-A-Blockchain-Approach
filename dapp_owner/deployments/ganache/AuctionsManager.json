{
  "address": "0x806f05a80bD37c1C1d5be79E1f5f966f0f728866",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tasksManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "auctionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_auctionDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taskDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_clientVerification",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_verificationCode",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_computationCode",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "deleteAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteAuctions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ProviderBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xacb0849b1900e88bcad97c38da0756260ed123ed400cceea5f09c32b025f860b",
  "receipt": {
    "to": null,
    "from": "0xf9700bd0Fb2e22e6280F7b833d697A23e7AdFc81",
    "contractAddress": "0x806f05a80bD37c1C1d5be79E1f5f966f0f728866",
    "transactionIndex": 0,
    "gasUsed": "2646652",
    "logsBloom": "0x
    "blockHash": "0xf1eb05a43b3539ae6baa00e14babb19ef0bee9bd98bcfaf1c28371983aaae97f",
    "transactionHash": "0xacb0849b1900e88bcad97c38da0756260ed123ed400cceea5f09c32b025f860b",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "2646652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a87cdbd6c09ecc97707460b3085c35b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tasksManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"auctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_verificationCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_computationCode\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"deleteAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TasksManager.sol\\\";\\n\\ncontract AuctionsManager {\\n     address private immutable owner; \\n     TasksManager tasksManager;\\n\\n     enum AuctionState {\\n        Created,\\n        Cancelled, \\n        Finalized\\n    }\\n\\n    struct Auction {\\n        address client;\\n        uint creationTime;\\n        uint auctionDeadline;\\n        uint taskDeadline;\\n        bytes32 clientVerification;\\n        string computationCode;\\n        string verificationCode;\\n        ProviderBid[] providerBids;\\n        WinnerBid winnerBid;\\n        AuctionState auctionState;   \\n    }\\n\\n    struct ProviderBid {\\n        address provider;\\n        uint bid;\\n        uint providerUpVotes;\\n        uint providerDownVotes;\\n    }\\n\\n    struct WinnerBid {\\n        address provider;\\n        uint bid;\\n    }\\n\\n    mapping (bytes32 => Auction) private auctions;\\n    bytes32[] private bytes32_auctions;\\n\\n    event AuctionCreated(bytes32 auctionID);\\n    event AuctionCancelled(bytes32 auctionID);\\n    event AuctionFinalized(bytes32 auctionID, address provider);\\n    event AuctionDeleted(bytes32 auctionID);\\n    event BidPlaced(bytes32 auctionID, address provider, uint bid);\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOnly(bytes32 _auctionID) {\\n        require(\\n            msg.sender == auctions[_auctionID].client,\\n            \\\"Method can be called only by client.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inAuctionState(bytes32 _auctionID,AuctionState _auctionState) {\\n        require(\\n            auctions[_auctionID].auctionState == _auctionState,\\n            \\\"Invalid AuctionState.\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    modifier existingAuctionOnly(bytes32 _auctionID) {\\n        require(\\n            auctionExists(_auctionID),\\n            \\\"Auction must exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notExistingAuctionOnly(bytes32 _auctionID) {\\n        require(\\n            !auctionExists(_auctionID),\\n            \\\"Auction already exists\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    constructor(address payable _tasksManager)  {\\n        owner = msg.sender;\\n        tasksManager = TasksManager(_tasksManager);\\n    }\\n\\n    function createAuction(\\n        bytes32 _auctionID, \\n        uint _auctionDeadline, \\n        uint _taskDeadline,\\n        bytes32 _clientVerification,\\n        string memory _verificationCode,\\n        string memory _computationCode\\n    ) public notExistingAuctionOnly(_auctionID)\\n        {\\n        auctions[_auctionID].client = msg.sender;\\n        auctions[_auctionID].creationTime = block.timestamp;\\n        auctions[_auctionID].auctionDeadline = _auctionDeadline;\\n        auctions[_auctionID].taskDeadline = _taskDeadline;\\n        auctions[_auctionID].clientVerification = _clientVerification;\\n        auctions[_auctionID].verificationCode = _verificationCode;\\n        auctions[_auctionID].computationCode = _computationCode;\\n\\n        auctions[_auctionID].auctionState = AuctionState.Created;\\n        bytes32_auctions.push(_auctionID);\\n        emit AuctionCreated(_auctionID);\\n    }\\n\\n    function cancelAuction(bytes32 _auctionID) public clientOnly(_auctionID) inAuctionState(_auctionID, AuctionState.Created) existingAuctionOnly(_auctionID) {\\n        auctions[_auctionID].auctionState = AuctionState.Cancelled;\\n        emit AuctionCancelled(_auctionID);\\n     }\\n\\n    function bid(bytes32 _auctionID, uint _bid) public  inAuctionState(_auctionID, AuctionState.Created)  existingAuctionOnly(_auctionID) {\\n        require(msg.sender != auctions[_auctionID].client, \\\"Client can't bid to this auction\\\"); \\n        require(\\n            (block.timestamp <= auctions[_auctionID].creationTime + auctions[_auctionID].auctionDeadline),\\n            \\\"Time has expired.\\\"\\n        );\\n        uint providerIndex = 0;\\n        if(auctions[_auctionID].providerBids.length != 0)\\n        {    while(auctions[_auctionID].providerBids[providerIndex].provider != msg.sender)\\n            {\\n                providerIndex++;\\n                if(providerIndex > auctions[_auctionID].providerBids.length)\\n                    break;\\n            }\\n            if (providerIndex <= auctions[_auctionID].providerBids.length)\\n            {\\n                require(\\n                _bid < auctions[_auctionID].providerBids[providerIndex].bid,\\n                \\\"Bid is not lower than than the previous one.\\\"\\n                );\\n            }\\n        }\\n        ProviderBid memory currentBid;\\n        currentBid.provider = msg.sender;\\n        currentBid.bid = _bid;\\n        currentBid.providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n        currentBid.providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n        auctions[_auctionID].providerBids.push(currentBid);\\n        emit BidPlaced(_auctionID, msg.sender, _bid);\\n     }\\n\\n    function finalize(bytes32 _auctionID, address _provider) public payable clientOnly(_auctionID) inAuctionState(_auctionID, AuctionState.Created) existingAuctionOnly(_auctionID) returns (bytes32) {\\n        uint providerIndex = 0;\\n        while(auctions[_auctionID].providerBids[providerIndex].provider != _provider)\\n        {\\n            providerIndex++;\\n            if(providerIndex > auctions[_auctionID].providerBids.length)\\n                break;\\n        }\\n        if(providerIndex > auctions[_auctionID].providerBids.length)\\n         revert(\\\"Wrong provider address\\\");\\n        WinnerBid memory _winnerBid;\\n        _winnerBid.provider = _provider;\\n        _winnerBid.bid = auctions[_auctionID].providerBids[providerIndex].bid;\\n        require (msg.value >= _winnerBid.bid * 2, \\\"Client collateral is not enough\\\");\\n        auctions[_auctionID].winnerBid = _winnerBid;\\n        Auction storage currentAuction = auctions[_auctionID];\\n        auctions[_auctionID].auctionState = AuctionState.Finalized;\\n        emit AuctionFinalized(_auctionID, _provider);\\n        bytes32 taskID = keccak256(abi.encode(currentAuction.client, _winnerBid, block.timestamp));\\n        uint clientCollateral = getClientCollateral(_auctionID);\\n        tasksManager.createTask{value: clientCollateral}(taskID, currentAuction.client, _provider,  _winnerBid.bid, currentAuction.taskDeadline, currentAuction.clientVerification,currentAuction.verificationCode, currentAuction.computationCode);\\n        return taskID; //check for return, else add event TaskCreated\\n    }\\n\\n    function getClientCollateral(bytes32 _auctionID) private view returns (uint) {\\n        return auctions[_auctionID].winnerBid.bid * 2;\\n    }\\n\\n    function auctionExists(bytes32 _auctionID) public view returns (bool) {\\n            return (auctions[_auctionID].client != address(0));\\n        }\\n\\n    function deleteAuctions() public ownerOnly { \\n        for (uint i = bytes32_auctions.length; i > 0; i--)\\n        {\\n            bytes32 _auctionID = bytes32_auctions[i-1];\\n            if (auctions[_auctionID].auctionState == AuctionState.Finalized || auctions[_auctionID].auctionState == AuctionState.Cancelled) \\n                        {\\n                delete(auctions[_auctionID]);\\n                bytes32_auctions[i-1] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                emit AuctionDeleted(_auctionID);\\n            }\\n        }\\n    }\\n\\n    function deleteAuction(bytes32 _auctionID) public ownerOnly existingAuctionOnly(_auctionID) {\\n        delete(auctions[_auctionID]);\\n        for (uint i=0; i < bytes32_auctions.length; i++)\\n        {\\n            if (bytes32_auctions[i] == _auctionID)\\n            {\\n                bytes32_auctions[i] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                break;\\n            }\\n        }\\n        emit AuctionDeleted(_auctionID);\\n    }\\n\\n    function getActiveAuctions() ownerOnly public view returns (uint256) {\\n        return bytes32_auctions.length;\\n    }\\n\\n    function getAuctionBids(bytes32 _auctionID) public view returns(ProviderBid[] memory) {\\n        return auctions[_auctionID].providerBids;\\n    }\\n\\n    function getAuctionState(bytes32 _auctionID) public view returns(string memory) {\\n        string memory ret = \\\"\\\";\\n        if (auctions[_auctionID].auctionState == AuctionState.Created) \\n            ret = \\\"Created\\\";\\n        else if (auctions[_auctionID].auctionState == AuctionState.Cancelled) \\n            ret = \\\"Cancelled\\\";\\n        else if (auctions[_auctionID].auctionState == AuctionState.Finalized) \\n            ret = \\\"Finalized\\\";\\n        else \\n            ret = \\\"Error\\\";\\n        return ret;\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return owner;\\n    }\\n    \\n    function getTasksManager() public view returns(address) {\\n        return address(tasksManager);\\n    }\\n}\",\"keccak256\":\"0xe047b3e0a9fa3b90f40ecd22722a0cf9fbf870c58fc0e8806b5c2cf9bd42e5b5\",\"license\":\"GPL-3.0\"},\"contracts/TasksManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract TasksManager {\\n\\n    address private immutable owner; \\n    address private auctionAddress;\\n\\n    enum TaskState {\\n        Created,\\n        Cancelled, \\n        Active,\\n        CompletedSuccessfully,\\n        CompletedUnsuccessfully,\\n        Invalid, \\n        ResultsReceivedSuccessfully,\\n        ResultsReceivedUnsuccessfully\\n    }\\n\\n    enum PaymentState {\\n        Initialized,\\n        Pending,\\n        Completed \\n    }\\n\\n    struct Task {\\n        address payable client; \\n        address payable provider;\\n        uint providerCollateral;\\n        uint clientCollateral; \\n        uint deadline;\\n        uint price;\\n        uint duration;\\n        uint cost;       \\n        uint activationTime;\\n        uint timeResultProvided;\\n        uint timeResultReceived;\\n        string computationCode;\\n        string verificationCode;\\n        string results;\\n        bytes32 clientVerification;\\n        uint lastUpdateTimestamp;\\n        TaskState taskState;\\n        PaymentState paymentState;\\n    }\\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping (bytes32 => Task) private tasks;\\n    bytes32[] private bytes32_tasks;\\n    mapping(address => providerRating) private performance;\\n\\n    //Events\\n    event TaskCreated(bytes32 taskID);\\n    event TaskActivated(bytes32 taskID);\\n    event TaskCompletedSuccessfully(bytes32 taskID);\\n    event TaskCompletedUnsuccessfully(bytes32 taskID);\\n    event TaskReceivedResultsSuccessfully(bytes32 taskID);\\n    event TaskReceivedResultsUnsuccessfully(bytes32 taskID);\\n    event TaskCancelled(bytes32 taskID);\\n    event TaskInvalidated(bytes32 taskID);\\n    event PaymentPending(bytes32 taskID, uint payment);\\n    event PaymentCompleted(bytes32 taskID);\\n    event TransferMadeToClient(address client, uint amount);\\n    event TransferMadeToProvider(address provider, uint amount);\\n    event ProviderUpvoted(address provider, bytes32 taskID);\\n    event ProviderDownvoted(address provider, bytes32 taskID);\\n    event TaskDeleted(bytes32 taskID);\\n\\n    //Modifiers\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auctionOnly() {\\n        require(\\n            msg.sender == auctionAddress,\\n            \\\"Method can be called only by auction.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOnly(bytes32 _taskID) {\\n        require(\\n            msg.sender == tasks[_taskID].client,\\n            \\\"Method can be called only by client.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier providerOnly(bytes32 _taskID) {\\n        require(\\n            msg.sender == tasks[_taskID].provider,\\n            \\\"Method can be called only by provider.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOrProviderOnly(bytes32 _taskID) {\\n        require(\\n            (msg.sender == tasks[_taskID].client) || (msg.sender == tasks[_taskID].provider) || (msg.sender == owner),\\n            \\\"Method can be called only by client, provider or the owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inTaskState(bytes32 _taskID,TaskState _taskState) {\\n        require(\\n            tasks[_taskID].taskState == _taskState,\\n            \\\"Invalid TaskState.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inPaymentState(bytes32 _taskID,PaymentState _paymentState) {\\n        require(\\n            tasks[_taskID].paymentState == _paymentState,\\n            \\\"Invalid PaymentState.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requiresValue(uint amount) {\\n        require(\\n            msg.value == amount,\\n            \\\"Value sent is not the expected\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier registeredTaskOnly(bytes32 _taskID) {\\n        require(\\n            isRegistered(_taskID),\\n            \\\"Task must be registered\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notRegisteredTaskOnly(bytes32 _taskID) {\\n        require(\\n            !isRegistered(_taskID),\\n            \\\"Task already exists\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function createTask(\\n        bytes32 _taskID, \\n        address _client,\\n        address _provider,\\n        uint _price,\\n        uint _deadline,\\n        bytes32 _clientVerification,\\n        string memory _verificationCode,\\n        string memory _computationCode\\n    ) public payable notRegisteredTaskOnly(_taskID) auctionOnly\\n    {\\n        require (msg.value >= _price * 2, \\\"Client collateral is not enough\\\");\\n        tasks[_taskID].client = payable (_client);\\n        tasks[_taskID].clientCollateral = msg.value;\\n        tasks[_taskID].provider = payable(_provider);\\n        tasks[_taskID].providerCollateral = _price * 10;\\n        tasks[_taskID].price = _price;\\n        tasks[_taskID].deadline = _deadline;\\n        tasks[_taskID].clientVerification = _clientVerification;\\n        tasks[_taskID].verificationCode = _verificationCode;\\n        tasks[_taskID].computationCode = _computationCode;\\n        tasks[_taskID].taskState = TaskState.Created;\\n        tasks[_taskID].paymentState = PaymentState.Initialized;\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        bytes32_tasks.push(_taskID);\\n        emit TaskCreated(_taskID);\\n    }\\n\\n    //Cancel\\n    //TaskState -> Cancel\\n    //refunds payment to client\\n    //can be called only by client and only if contract hasnt been activated by provider\\n\\n    function cancelTask(bytes32 _taskID) public clientOnly(_taskID) inTaskState(_taskID,TaskState.Created) \\n    {\\n        tasks[_taskID].taskState = TaskState.Cancelled;\\n        tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral);\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TransferMadeToClient(tasks[_taskID].client,tasks[_taskID].clientCollateral);\\n        emit TaskCancelled(_taskID);\\n    }\\n\\n    function invalidateTask(bytes32 _taskID) public  clientOnly(_taskID) inTaskState(_taskID, TaskState.Active) \\n    {\\n        require(\\n            (block.timestamp > tasks[_taskID].activationTime + tasks[_taskID].deadline),\\n            \\\"Time has not expired.\\\"\\n        );\\n        tasks[_taskID].taskState = TaskState.Invalid;\\n  \\n        tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n        emit TaskInvalidated(_taskID);\\n    }\\n\\n    // Activate\\n    // TaskState -> Activated\\n    // can be called only by provider to start the process\\n\\n    function activateTask(bytes32 _taskID) public payable providerOnly(_taskID) inTaskState(_taskID,TaskState.Created) registeredTaskOnly(_taskID)\\n    {\\n        require (msg.value >= tasks[_taskID].providerCollateral, \\\"Provider collateral is not enough\\\");\\n        tasks[_taskID].activationTime = block.timestamp;\\n        tasks[_taskID].providerCollateral = msg.value;\\n        tasks[_taskID].taskState = TaskState.Active;\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TaskActivated(_taskID);\\n    }\\n\\n    // Complete\\n    // TaskState -> Completed\\n    // can be called only by provider when the computation is over\\n\\n    //called by docker container\\n    function completeTask(bytes32 _taskID,string memory ver,  uint _duration, uint _timeReceivedProvider) public providerOnly(_taskID) inTaskState(_taskID,TaskState.Active) \\n    {\\n        tasks[_taskID].timeResultProvided = _timeReceivedProvider;\\n        tasks[_taskID].duration = _duration;\\n        if (InTime(_taskID) && CorrectVerification(_taskID, ver)){\\n            tasks[_taskID].cost = tasks[_taskID].price * tasks[_taskID].duration;\\n            tasks[_taskID].taskState = TaskState.CompletedSuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskCompletedSuccessfully(_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n            tasks[_taskID].taskState = TaskState.CompletedUnsuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskCompletedUnsuccessfully(_taskID);\\n        }\\n    }\\n\\n\\n    //called by provider\\n    function sendResults(bytes32 _taskID, string memory _results) public providerOnly(_taskID) inTaskState(_taskID,TaskState.CompletedSuccessfully) inPaymentState(_taskID,PaymentState.Initialized){\\n        tasks[_taskID].timeResultReceived = block.timestamp;\\n        tasks[_taskID].results = _results;\\n        if (ProviderTime(_taskID)){\\n            if (tasks[_taskID].cost <= tasks[_taskID].clientCollateral) {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].cost + tasks[_taskID].providerCollateral);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost + tasks[_taskID].providerCollateral);\\n                tasks[_taskID].client.transfer(tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n                emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n                tasks[_taskID].paymentState = PaymentState.Completed;\\n                tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n                emit PaymentCompleted(_taskID);                \\n            }\\n            else {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].clientCollateral+tasks[_taskID].providerCollateral);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].clientCollateral+tasks[_taskID].providerCollateral);\\n                tasks[_taskID].paymentState = PaymentState.Pending;\\n                tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n                emit PaymentPending(_taskID,tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n            }\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedSuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskReceivedResultsSuccessfully(_taskID);\\n            performance[tasks[_taskID].provider].upVotes += 1;\\n            emit ProviderUpvoted(tasks[_taskID].provider,_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedUnsuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskReceivedResultsUnsuccessfully(_taskID);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n        }\\n    }\\n\\n\\n    function completePayment(bytes32 _taskID) public payable clientOnly(_taskID) inTaskState(_taskID,TaskState.ResultsReceivedSuccessfully) inPaymentState(_taskID,PaymentState.Pending) requiresValue(tasks[_taskID].cost - tasks[_taskID].clientCollateral) {\\n        require (tasks[_taskID].paymentState == PaymentState.Pending, \\\"Payment not needed\\\");\\n        tasks[_taskID].provider.transfer(msg.value);\\n        emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n        tasks[_taskID].paymentState = PaymentState.Completed;\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit PaymentCompleted(_taskID);\\n    }\\n\\n    function setAuctionAddress(address _auctionAddress) public ownerOnly {\\n        auctionAddress = _auctionAddress;\\n    }\\n\\n    //add time difference between lastUpdateTimestamp and now\\n    function deleteTasks() public ownerOnly { \\n        for (uint i = bytes32_tasks.length; i > 0; i--)\\n        {\\n            bytes32 _taskID = bytes32_tasks[i-1];\\n            if ((tasks[_taskID].taskState == TaskState.ResultsReceivedSuccessfully && tasks[_taskID].paymentState == PaymentState.Completed \\n            || tasks[_taskID].taskState == TaskState.ResultsReceivedUnsuccessfully \\n            || tasks[_taskID].taskState == TaskState.CompletedUnsuccessfully \\n            || tasks[_taskID].taskState == TaskState.Cancelled \\n            || tasks[_taskID].taskState == TaskState.Invalid) \\n            && block.timestamp > tasks[_taskID].lastUpdateTimestamp + 60) \\n            //TO ADD time difference between lastUpdateTimestamp eg 24h instead of 1 min\\n            {\\n                delete(tasks[_taskID]);\\n                bytes32_tasks[i-1] = bytes32_tasks[bytes32_tasks.length - 1];\\n                bytes32_tasks.pop();\\n                emit TaskDeleted(_taskID);\\n            }\\n        }\\n    }\\n\\n    function deleteTask(bytes32 _taskID) public ownerOnly registeredTaskOnly(_taskID) {\\n        delete(tasks[_taskID]);\\n        for (uint i=0; i < bytes32_tasks.length; i++)\\n        {\\n            if (bytes32_tasks[i] == _taskID)\\n            {\\n                bytes32_tasks[i] = bytes32_tasks[bytes32_tasks.length - 1];\\n                bytes32_tasks.pop();\\n                break;\\n            }\\n        }\\n        emit TaskDeleted(_taskID);\\n    }\\n\\n    function getActiveTasks() ownerOnly public view returns (uint256) {\\n        return bytes32_tasks.length;\\n    }\\n    //Functions -> Private/internal\\n    function InTime(bytes32 _taskID) private view returns (bool){\\n        return (tasks[_taskID].timeResultProvided <= tasks[_taskID].activationTime + tasks[_taskID].deadline) && (tasks[_taskID].duration <= tasks[_taskID].deadline);  \\n    }\\n\\n    function ProviderTime(bytes32 _taskID) private view returns (bool) {\\n        return (tasks[_taskID].timeResultReceived <= tasks[_taskID].timeResultProvided + 600) && (tasks[_taskID].timeResultReceived >= tasks[_taskID].timeResultProvided) && (tasks[_taskID].timeResultReceived >= tasks[_taskID].activationTime + tasks[_taskID].duration) && (tasks[_taskID].timeResultProvided >= tasks[_taskID].activationTime + tasks[_taskID].duration); //gives 600 sec to provider to send the results, time received must be greater than time provided\\n    }\\n\\n    function CorrectVerification(bytes32 _taskID, string memory ver) private view returns (bool){\\n        return (tasks[_taskID].clientVerification == keccak256(abi.encodePacked(ver)));\\n    }\\n\\n    function isRegistered(bytes32 _taskID) public view returns (bool) {\\n        return (tasks[_taskID].client != address(0));\\n    }\\n\\n    function getPerformance(address provider) public view returns (providerRating memory) {\\n        return performance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getComputationCode(bytes32 _taskID) public view returns (string memory) {\\n        return tasks[_taskID].computationCode;\\n    }\\n\\n    function getVerificationCode(bytes32 _taskID) public view returns (string memory) {\\n        return tasks[_taskID].verificationCode;\\n    }\\n\\n    //Getters - some to be deleted\\n    function getActivationTime(bytes32 _taskID) public view returns (uint)\\n    {\\n        return tasks[_taskID].activationTime;\\n    }\\n\\n    function getLastUpdateTimestamp(bytes32 _taskID) public view returns (uint)\\n    {\\n        return tasks[_taskID].lastUpdateTimestamp;\\n    }\\n\\n    function getResults(bytes32 _taskID) public clientOnly(_taskID) inTaskState(_taskID,TaskState.ResultsReceivedSuccessfully) inPaymentState(_taskID,PaymentState.Completed) view returns (string memory)  {\\n        return tasks[_taskID].results;\\n    }\\n\\n    function getTaskState(bytes32 _taskID) public clientOrProviderOnly(_taskID) view returns (string memory)\\n    {\\n        string memory ret = \\\"\\\";\\n        if (tasks[_taskID].taskState == TaskState.Created) \\n            ret = \\\"Created\\\";\\n        else if (tasks[_taskID].taskState == TaskState.Cancelled)\\n            ret = \\\"Cancelled\\\";\\n        else if (tasks[_taskID].taskState == TaskState.Active)\\n            ret = \\\"Active\\\";\\n        else if (tasks[_taskID].taskState == TaskState.CompletedSuccessfully)\\n            ret = \\\"CompletedSuccessfully\\\";\\n        else if (tasks[_taskID].taskState == TaskState.CompletedUnsuccessfully)\\n            ret = \\\"CompletedUnsuccessfully\\\";  \\n        else if (tasks[_taskID].taskState == TaskState.Invalid)\\n            ret = \\\"Invalid\\\";  \\n        else if (tasks[_taskID].taskState == TaskState.ResultsReceivedSuccessfully)\\n            ret = \\\"ResultsReceivedSuccessfully\\\";\\n        else if (tasks[_taskID].taskState == TaskState.ResultsReceivedUnsuccessfully)\\n            ret = \\\"ResultsReceivedUnsuccessfully\\\";\\n        else \\n            ret = \\\"Error\\\";\\n        return ret; \\n    }\\n\\n    function getPaymentState(bytes32 _taskID) public clientOrProviderOnly(_taskID) view returns (string memory)\\n    {\\n        string memory ret = \\\"\\\";\\n        if (tasks[_taskID].paymentState == PaymentState.Initialized) \\n            ret = \\\"Initialized\\\";\\n        else if (tasks[_taskID].paymentState == PaymentState.Pending) \\n            ret = \\\"Pending\\\";\\n        else if (tasks[_taskID].paymentState == PaymentState.Completed) \\n            ret = \\\"Completed\\\";\\n        else \\n            ret = \\\"Error\\\";  \\n        return ret; \\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getAuctionAddress() public view returns (address) {\\n        return auctionAddress;\\n    }\\n\\n    function getTask(bytes32 _taskID) public view returns (Task memory) {\\n        return tasks[_taskID];\\n    }\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0xe76fda14d211fdaa3e3a47cb60e4dbc349dd6059eb14e4d22e7b173b91d7341a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620030343803806200303483398181016040528101906200003791906200011f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e782620000ba565b9050919050565b620000f981620000da565b81146200010557600080fd5b50565b6000815190506200011981620000ee565b92915050565b600060208284031215620001385762000137620000b5565b5b6000620001488482850162000108565b91505092915050565b60805160601c612eaf62000185600039600081816102d001528181610f33015281816112c20152611beb0152612eaf6000f3fe6080604052600436106100a65760003560e01c8063893d20e811610064578063893d20e8146101aa5780639b680e7d146101d5578063a884741314610212578063cd772f5c1461024f578063cf44b5d514610278578063e1515563146102a3576100a6565b80629c3f8f146100ab57806312e1d724146100d457806315084b5d146101045780633ef4d1301461012d5780634df2ca18146101565780637a5a69e31461016d575b600080fd5b3480156100b757600080fd5b506100d260048036038101906100cd9190611eef565b6102ce565b005b6100ee60048036038101906100e99190611f7a565b610580565b6040516100fb9190611fc9565b60405180910390f35b34801561011057600080fd5b5061012b60048036038101906101269190612160565b610b32565b005b34801561013957600080fd5b50610154600480360381019061014f9190611eef565b610d3b565b005b34801561016257600080fd5b5061016b610f31565b005b34801561017957600080fd5b50610194600480360381019061018f9190611eef565b61124f565b6040516101a19190612240565b60405180910390f35b3480156101b657600080fd5b506101bf6112be565b6040516101cc919061226a565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190611eef565b6112e6565b60405161020991906123a7565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190611eef565b6113cf565b6040516102469190612451565b60405180910390f35b34801561025b57600080fd5b5061027660048036038101906102719190612473565b6115cf565b005b34801561028457600080fd5b5061028d611be7565b60405161029a91906124c2565b60405180910390f35b3480156102af57600080fd5b506102b8611c82565b6040516102c5919061226a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103539061254f565b60405180910390fd5b806103668161124f565b6103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c906125bb565b60405180910390fd5b60016000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160006104109190611cda565b6006820160006104209190611cda565b6007820160006104309190611d1a565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff0219169055505060005b6002805490508110156105445782600282815481106104a1576104a06125db565b5b9060005260206000200154141561053157600260016002805490506104c69190612639565b815481106104d7576104d66125db565b5b9060005260206000200154600282815481106104f6576104f56125db565b5b906000526020600020018190555060028054806105165761051561266d565b5b60019003818190600052602060002001600090559055610544565b808061053c9061269c565b91505061047f565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15826040516105749190611fc9565b60405180910390a15050565b6000826001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061e90612757565b60405180910390fd5b83600080600281111561063d5761063c612777565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff16600281111561067357610672612777565b5b146106b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106aa906127f2565b60405180910390fd5b856106bd8161124f565b6106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f3906125bb565b60405180910390fd5b60005b8673ffffffffffffffffffffffffffffffffffffffff16600160008a8152602001908152602001600020600701828154811061073e5761073d6125db565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107c45780806107969061269c565b91505060016000898152602001908152602001600020600701805490508111156107bf576107c4565b6106ff565b6001600089815260200190815260200160002060070180549050811115610820576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108179061285e565b60405180910390fd5b610828611d3e565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160008a81526020019081526020016000206007018281548110610888576108876125db565b5b906000526020600020906004020160010154816020018181525050600281602001516108b4919061287e565b3410156108f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed90612924565b60405180910390fd5b80600160008b815260200190815260200160002060080160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008b815260200190815260200160002090506002600160008c8152602001908152602001600020600a0160006101000a81548160ff021916908360028111156109b2576109b1612777565b5b02179055507f6898e0d44e43d4e52763adfb1a021d99067e84ba3cc756ea838142ac5f93a9428a8a6040516109e8929190612944565b60405180910390a160008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610a2b9392919061299c565b6040516020818303038152906040528051906020012090506000610a4e8c611cab565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8e669a882848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168f896020015189600301548a600401548b6006018c6005016040518a63ffffffff1660e01b8152600401610aee989796959493929190612ac9565b6000604051808303818588803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b505050505081995050505050505050505092915050565b85610b3c8161124f565b15610b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7390612ba1565b60405180910390fd5b336001600089815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600160008981526020019081526020016000206001018190555085600160008981526020019081526020016000206002018190555084600160008981526020019081526020016000206003018190555083600160008981526020019081526020016000206004018190555082600160008981526020019081526020016000206006019080519060200190610c67929190611d6e565b5081600160008981526020019081526020016000206005019080519060200190610c92929190611d6e565b50600060016000898152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610ccd57610ccc612777565b5b021790555060028790806001815401808255809150506001900390600052602060002001600090919091909150557f2a66b5a320edcb6b7fba849fd4173d545603571b82a650ae5ef95f12e0dada9e87604051610d2a9190611fc9565b60405180910390a150505050505050565b806001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610de0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd790612757565b60405180910390fd5b816000806002811115610df657610df5612777565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff166002811115610e2c57610e2b612777565b5b14610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e63906127f2565b60405180910390fd5b83610e768161124f565b610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac906125bb565b60405180910390fd5b6001806000878152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610eee57610eed612777565b5b02179055507fd88fab4b08bf76f15cf2d6e03e382acf1edd6790ab82967e406abac37db2028885604051610f229190611fc9565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb69061254f565b60405180910390fd5b600060028054905090505b600081111561124c5760006002600183610fe49190612639565b81548110610ff557610ff46125db565b5b9060005260206000200154905060028081111561101557611014612777565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff16600281111561104b5761104a612777565b5b148061109e57506001600281111561106657611065612777565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff16600281111561109c5761109b612777565b5b145b156112385760016000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055600482016000905560058201600061110e9190611cda565b60068201600061111e9190611cda565b60078201600061112e9190611d1a565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff021916905550506002600160028054905061118e9190612639565b8154811061119f5761119e6125db565b5b906000526020600020015460026001846111b99190612639565b815481106111ca576111c96125db565b5b906000526020600020018190555060028054806111ea576111e961266d565b5b600190038181906000526020600020016000905590557f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a158160405161122f9190611fc9565b60405180910390a15b50808061124490612bc1565b915050610fca565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b606060016000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156113c457838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061131e565b505050509050919050565b60606000604051806020016040528060008152509050600060028111156113f9576113f8612777565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff16600281111561142f5761142e612777565b5b1415611472576040518060400160405280600781526020017f437265617465640000000000000000000000000000000000000000000000000081525090506115c6565b6001600281111561148657611485612777565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff1660028111156114bc576114bb612777565b5b14156114ff576040518060400160405280600981526020017f43616e63656c6c6564000000000000000000000000000000000000000000000081525090506115c5565b60028081111561151257611511612777565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff16600281111561154857611547612777565b5b141561158b576040518060400160405280600981526020017f46696e616c697a6564000000000000000000000000000000000000000000000081525090506115c4565b6040518060400160405280600581526020017f4572726f7200000000000000000000000000000000000000000000000000000081525090505b5b5b80915050919050565b8160008060028111156115e5576115e4612777565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff16600281111561161b5761161a612777565b5b1461165b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611652906127f2565b60405180910390fd5b836116658161124f565b6116a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169b906125bb565b60405180910390fd5b6001600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174090612c37565b60405180910390fd5b600160008681526020019081526020016000206002015460016000878152602001908152602001600020600101546117819190612c57565b4211156117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ba90612cf9565b60405180910390fd5b600080600160008881526020019081526020016000206007018054905014611948575b3373ffffffffffffffffffffffffffffffffffffffff16600160008881526020019081526020016000206007018281548110611825576118246125db565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118ab57808061187d9061269c565b91505060016000878152602001908152602001600020600701805490508111156118a6576118ab565b6117e6565b60016000878152602001908152602001600020600701805490508111611947576001600087815260200190815260200160002060070181815481106118f3576118f26125db565b5b9060005260206000209060040201600101548510611946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193d90612d8b565b60405180910390fd5b5b5b611950611df4565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016119eb919061226a565b604080518083038186803b158015611a0257600080fd5b505afa158015611a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3a9190612e15565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611aa0919061226a565b604080518083038186803b158015611ab757600080fd5b505afa158015611acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aef9190612e15565b602001518160600181815250506001600088815260200190815260200160002060070181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550507f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c66873388604051611bd693929190612e42565b60405180910390a150505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e9061254f565b60405180910390fd5b600280549050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026001600084815260200190815260200160002060080160010154611cd3919061287e565b9050919050565b508054611ce690612a02565b6000825580601f10611cf85750611d17565b601f016020900490600052602060002090810190611d169190611e32565b5b50565b5080546000825560040290600052602060002090810190611d3b9190611e4f565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b828054611d7a90612a02565b90600052602060002090601f016020900481019282611d9c5760008555611de3565b82601f10611db557805160ff1916838001178555611de3565b82800160010185558215611de3579182015b82811115611de2578251825591602001919060010190611dc7565b5b509050611df09190611e32565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b80821115611e4b576000816000905550600101611e33565b5090565b5b80821115611ea157600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905550600401611e50565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ecc81611eb9565b8114611ed757600080fd5b50565b600081359050611ee981611ec3565b92915050565b600060208284031215611f0557611f04611eaf565b5b6000611f1384828501611eda565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4782611f1c565b9050919050565b611f5781611f3c565b8114611f6257600080fd5b50565b600081359050611f7481611f4e565b92915050565b60008060408385031215611f9157611f90611eaf565b5b6000611f9f85828601611eda565b9250506020611fb085828601611f65565b9150509250929050565b611fc381611eb9565b82525050565b6000602082019050611fde6000830184611fba565b92915050565b6000819050919050565b611ff781611fe4565b811461200257600080fd5b50565b60008135905061201481611fee565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61206d82612024565b810181811067ffffffffffffffff8211171561208c5761208b612035565b5b80604052505050565b600061209f611ea5565b90506120ab8282612064565b919050565b600067ffffffffffffffff8211156120cb576120ca612035565b5b6120d482612024565b9050602081019050919050565b82818337600083830152505050565b60006121036120fe846120b0565b612095565b90508281526020810184848401111561211f5761211e61201f565b5b61212a8482856120e1565b509392505050565b600082601f8301126121475761214661201a565b5b81356121578482602086016120f0565b91505092915050565b60008060008060008060c0878903121561217d5761217c611eaf565b5b600061218b89828a01611eda565b965050602061219c89828a01612005565b95505060406121ad89828a01612005565b94505060606121be89828a01611eda565b935050608087013567ffffffffffffffff8111156121df576121de611eb4565b5b6121eb89828a01612132565b92505060a087013567ffffffffffffffff81111561220c5761220b611eb4565b5b61221889828a01612132565b9150509295509295509295565b60008115159050919050565b61223a81612225565b82525050565b60006020820190506122556000830184612231565b92915050565b61226481611f3c565b82525050565b600060208201905061227f600083018461225b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122ba81611f3c565b82525050565b6122c981611fe4565b82525050565b6080820160008201516122e560008501826122b1565b5060208201516122f860208501826122c0565b50604082015161230b60408501826122c0565b50606082015161231e60608501826122c0565b50505050565b600061233083836122cf565b60808301905092915050565b6000602082019050919050565b600061235482612285565b61235e8185612290565b9350612369836122a1565b8060005b8381101561239a5781516123818882612324565b975061238c8361233c565b92505060018101905061236d565b5085935050505092915050565b600060208201905081810360008301526123c18184612349565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124035780820151818401526020810190506123e8565b83811115612412576000848401525b50505050565b6000612423826123c9565b61242d81856123d4565b935061243d8185602086016123e5565b61244681612024565b840191505092915050565b6000602082019050818103600083015261246b8184612418565b905092915050565b6000806040838503121561248a57612489611eaf565b5b600061249885828601611eda565b92505060206124a985828601612005565b9150509250929050565b6124bc81611fe4565b82525050565b60006020820190506124d760008301846124b3565b92915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b60006125396023836123d4565b9150612544826124dd565b604082019050919050565b600060208201905081810360008301526125688161252c565b9050919050565b7f41756374696f6e206d7573742065786973740000000000000000000000000000600082015250565b60006125a56012836123d4565b91506125b08261256f565b602082019050919050565b600060208201905081810360008301526125d481612598565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061264482611fe4565b915061264f83611fe4565b9250828210156126625761266161260a565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006126a782611fe4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156126da576126d961260a565b5b600182019050919050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c7920627920636c6960008201527f656e742e00000000000000000000000000000000000000000000000000000000602082015250565b60006127416024836123d4565b915061274c826126e5565b604082019050919050565b6000602082019050818103600083015261277081612734565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f496e76616c69642041756374696f6e53746174652e0000000000000000000000600082015250565b60006127dc6015836123d4565b91506127e7826127a6565b602082019050919050565b6000602082019050818103600083015261280b816127cf565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b60006128486016836123d4565b915061285382612812565b602082019050919050565b600060208201905081810360008301526128778161283b565b9050919050565b600061288982611fe4565b915061289483611fe4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128cd576128cc61260a565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420656e6f75676800600082015250565b600061290e601f836123d4565b9150612919826128d8565b602082019050919050565b6000602082019050818103600083015261293d81612901565b9050919050565b60006040820190506129596000830185611fba565b612966602083018461225b565b9392505050565b60408201600082015161298360008501826122b1565b50602082015161299660208501826122c0565b50505050565b60006080820190506129b1600083018661225b565b6129be602083018561296d565b6129cb60608301846124b3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a1a57607f821691505b60208210811415612a2e57612a2d6129d3565b5b50919050565b60008190508160005260206000209050919050565b60008154612a5681612a02565b612a6081866123d4565b94506001821660008114612a7b5760018114612a8d57612ac0565b60ff1983168652602086019350612ac0565b612a9685612a34565b60005b83811015612ab857815481890152600182019150602081019050612a99565b808801955050505b50505092915050565b600061010082019050612adf600083018b611fba565b612aec602083018a61225b565b612af9604083018961225b565b612b0660608301886124b3565b612b1360808301876124b3565b612b2060a0830186611fba565b81810360c0830152612b328185612a49565b905081810360e0830152612b468184612a49565b90509998505050505050505050565b7f41756374696f6e20616c72656164792065786973747300000000000000000000600082015250565b6000612b8b6016836123d4565b9150612b9682612b55565b602082019050919050565b60006020820190508181036000830152612bba81612b7e565b9050919050565b6000612bcc82611fe4565b91506000821415612be057612bdf61260a565b5b600182039050919050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b6000612c216020836123d4565b9150612c2c82612beb565b602082019050919050565b60006020820190508181036000830152612c5081612c14565b9050919050565b6000612c6282611fe4565b9150612c6d83611fe4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ca257612ca161260a565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000612ce36011836123d4565b9150612cee82612cad565b602082019050919050565b60006020820190508181036000830152612d1281612cd6565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000612d75602c836123d4565b9150612d8082612d19565b604082019050919050565b60006020820190508181036000830152612da481612d68565b9050919050565b600080fd5b600081519050612dbf81611fee565b92915050565b600060408284031215612ddb57612dda612dab565b5b612de56040612095565b90506000612df584828501612db0565b6000830152506020612e0984828501612db0565b60208301525092915050565b600060408284031215612e2b57612e2a611eaf565b5b6000612e3984828501612dc5565b91505092915050565b6000606082019050612e576000830186611fba565b612e64602083018561225b565b612e7160408301846124b3565b94935050505056fea2646970667358221220f2476063f2869ce7f6b9c2b8db3b6c1ab20d94aacf28fba72b1d839d8f326fcb64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a65760003560e01c8063893d20e811610064578063893d20e8146101aa5780639b680e7d146101d5578063a884741314610212578063cd772f5c1461024f578063cf44b5d514610278578063e1515563146102a3576100a6565b80629c3f8f146100ab57806312e1d724146100d457806315084b5d146101045780633ef4d1301461012d5780634df2ca18146101565780637a5a69e31461016d575b600080fd5b3480156100b757600080fd5b506100d260048036038101906100cd9190611eef565b6102ce565b005b6100ee60048036038101906100e99190611f7a565b610580565b6040516100fb9190611fc9565b60405180910390f35b34801561011057600080fd5b5061012b60048036038101906101269190612160565b610b32565b005b34801561013957600080fd5b50610154600480360381019061014f9190611eef565b610d3b565b005b34801561016257600080fd5b5061016b610f31565b005b34801561017957600080fd5b50610194600480360381019061018f9190611eef565b61124f565b6040516101a19190612240565b60405180910390f35b3480156101b657600080fd5b506101bf6112be565b6040516101cc919061226a565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190611eef565b6112e6565b60405161020991906123a7565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190611eef565b6113cf565b6040516102469190612451565b60405180910390f35b34801561025b57600080fd5b5061027660048036038101906102719190612473565b6115cf565b005b34801561028457600080fd5b5061028d611be7565b60405161029a91906124c2565b60405180910390f35b3480156102af57600080fd5b506102b8611c82565b6040516102c5919061226a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103539061254f565b60405180910390fd5b806103668161124f565b6103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c906125bb565b60405180910390fd5b60016000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160006104109190611cda565b6006820160006104209190611cda565b6007820160006104309190611d1a565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff0219169055505060005b6002805490508110156105445782600282815481106104a1576104a06125db565b5b9060005260206000200154141561053157600260016002805490506104c69190612639565b815481106104d7576104d66125db565b5b9060005260206000200154600282815481106104f6576104f56125db565b5b906000526020600020018190555060028054806105165761051561266d565b5b60019003818190600052602060002001600090559055610544565b808061053c9061269c565b91505061047f565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15826040516105749190611fc9565b60405180910390a15050565b6000826001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061e90612757565b60405180910390fd5b83600080600281111561063d5761063c612777565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff16600281111561067357610672612777565b5b146106b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106aa906127f2565b60405180910390fd5b856106bd8161124f565b6106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f3906125bb565b60405180910390fd5b60005b8673ffffffffffffffffffffffffffffffffffffffff16600160008a8152602001908152602001600020600701828154811061073e5761073d6125db565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107c45780806107969061269c565b91505060016000898152602001908152602001600020600701805490508111156107bf576107c4565b6106ff565b6001600089815260200190815260200160002060070180549050811115610820576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108179061285e565b60405180910390fd5b610828611d3e565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160008a81526020019081526020016000206007018281548110610888576108876125db565b5b906000526020600020906004020160010154816020018181525050600281602001516108b4919061287e565b3410156108f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed90612924565b60405180910390fd5b80600160008b815260200190815260200160002060080160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008b815260200190815260200160002090506002600160008c8152602001908152602001600020600a0160006101000a81548160ff021916908360028111156109b2576109b1612777565b5b02179055507f6898e0d44e43d4e52763adfb1a021d99067e84ba3cc756ea838142ac5f93a9428a8a6040516109e8929190612944565b60405180910390a160008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610a2b9392919061299c565b6040516020818303038152906040528051906020012090506000610a4e8c611cab565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8e669a882848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168f896020015189600301548a600401548b6006018c6005016040518a63ffffffff1660e01b8152600401610aee989796959493929190612ac9565b6000604051808303818588803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b505050505081995050505050505050505092915050565b85610b3c8161124f565b15610b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7390612ba1565b60405180910390fd5b336001600089815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600160008981526020019081526020016000206001018190555085600160008981526020019081526020016000206002018190555084600160008981526020019081526020016000206003018190555083600160008981526020019081526020016000206004018190555082600160008981526020019081526020016000206006019080519060200190610c67929190611d6e565b5081600160008981526020019081526020016000206005019080519060200190610c92929190611d6e565b50600060016000898152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610ccd57610ccc612777565b5b021790555060028790806001815401808255809150506001900390600052602060002001600090919091909150557f2a66b5a320edcb6b7fba849fd4173d545603571b82a650ae5ef95f12e0dada9e87604051610d2a9190611fc9565b60405180910390a150505050505050565b806001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610de0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd790612757565b60405180910390fd5b816000806002811115610df657610df5612777565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff166002811115610e2c57610e2b612777565b5b14610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e63906127f2565b60405180910390fd5b83610e768161124f565b610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac906125bb565b60405180910390fd5b6001806000878152602001908152602001600020600a0160006101000a81548160ff02191690836002811115610eee57610eed612777565b5b02179055507fd88fab4b08bf76f15cf2d6e03e382acf1edd6790ab82967e406abac37db2028885604051610f229190611fc9565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb69061254f565b60405180910390fd5b600060028054905090505b600081111561124c5760006002600183610fe49190612639565b81548110610ff557610ff46125db565b5b9060005260206000200154905060028081111561101557611014612777565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff16600281111561104b5761104a612777565b5b148061109e57506001600281111561106657611065612777565b5b60016000838152602001908152602001600020600a0160009054906101000a900460ff16600281111561109c5761109b612777565b5b145b156112385760016000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055600482016000905560058201600061110e9190611cda565b60068201600061111e9190611cda565b60078201600061112e9190611d1a565b60088201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600a820160006101000a81549060ff021916905550506002600160028054905061118e9190612639565b8154811061119f5761119e6125db565b5b906000526020600020015460026001846111b99190612639565b815481106111ca576111c96125db565b5b906000526020600020018190555060028054806111ea576111e961266d565b5b600190038181906000526020600020016000905590557f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a158160405161122f9190611fc9565b60405180910390a15b50808061124490612bc1565b915050610fca565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b606060016000838152602001908152602001600020600701805480602002602001604051908101604052809291908181526020016000905b828210156113c457838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061131e565b505050509050919050565b60606000604051806020016040528060008152509050600060028111156113f9576113f8612777565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff16600281111561142f5761142e612777565b5b1415611472576040518060400160405280600781526020017f437265617465640000000000000000000000000000000000000000000000000081525090506115c6565b6001600281111561148657611485612777565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff1660028111156114bc576114bb612777565b5b14156114ff576040518060400160405280600981526020017f43616e63656c6c6564000000000000000000000000000000000000000000000081525090506115c5565b60028081111561151257611511612777565b5b60016000858152602001908152602001600020600a0160009054906101000a900460ff16600281111561154857611547612777565b5b141561158b576040518060400160405280600981526020017f46696e616c697a6564000000000000000000000000000000000000000000000081525090506115c4565b6040518060400160405280600581526020017f4572726f7200000000000000000000000000000000000000000000000000000081525090505b5b5b80915050919050565b8160008060028111156115e5576115e4612777565b5b60016000848152602001908152602001600020600a0160009054906101000a900460ff16600281111561161b5761161a612777565b5b1461165b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611652906127f2565b60405180910390fd5b836116658161124f565b6116a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169b906125bb565b60405180910390fd5b6001600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174090612c37565b60405180910390fd5b600160008681526020019081526020016000206002015460016000878152602001908152602001600020600101546117819190612c57565b4211156117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ba90612cf9565b60405180910390fd5b600080600160008881526020019081526020016000206007018054905014611948575b3373ffffffffffffffffffffffffffffffffffffffff16600160008881526020019081526020016000206007018281548110611825576118246125db565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118ab57808061187d9061269c565b91505060016000878152602001908152602001600020600701805490508111156118a6576118ab565b6117e6565b60016000878152602001908152602001600020600701805490508111611947576001600087815260200190815260200160002060070181815481106118f3576118f26125db565b5b9060005260206000209060040201600101548510611946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193d90612d8b565b60405180910390fd5b5b5b611950611df4565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b81526004016119eb919061226a565b604080518083038186803b158015611a0257600080fd5b505afa158015611a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3a9190612e15565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611aa0919061226a565b604080518083038186803b158015611ab757600080fd5b505afa158015611acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aef9190612e15565b602001518160600181815250506001600088815260200190815260200160002060070181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550507f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c66873388604051611bd693929190612e42565b60405180910390a150505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e9061254f565b60405180910390fd5b600280549050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026001600084815260200190815260200160002060080160010154611cd3919061287e565b9050919050565b508054611ce690612a02565b6000825580601f10611cf85750611d17565b601f016020900490600052602060002090810190611d169190611e32565b5b50565b5080546000825560040290600052602060002090810190611d3b9190611e4f565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b828054611d7a90612a02565b90600052602060002090601f016020900481019282611d9c5760008555611de3565b82601f10611db557805160ff1916838001178555611de3565b82800160010185558215611de3579182015b82811115611de2578251825591602001919060010190611dc7565b5b509050611df09190611e32565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b80821115611e4b576000816000905550600101611e33565b5090565b5b80821115611ea157600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905550600401611e50565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ecc81611eb9565b8114611ed757600080fd5b50565b600081359050611ee981611ec3565b92915050565b600060208284031215611f0557611f04611eaf565b5b6000611f1384828501611eda565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4782611f1c565b9050919050565b611f5781611f3c565b8114611f6257600080fd5b50565b600081359050611f7481611f4e565b92915050565b60008060408385031215611f9157611f90611eaf565b5b6000611f9f85828601611eda565b9250506020611fb085828601611f65565b9150509250929050565b611fc381611eb9565b82525050565b6000602082019050611fde6000830184611fba565b92915050565b6000819050919050565b611ff781611fe4565b811461200257600080fd5b50565b60008135905061201481611fee565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61206d82612024565b810181811067ffffffffffffffff8211171561208c5761208b612035565b5b80604052505050565b600061209f611ea5565b90506120ab8282612064565b919050565b600067ffffffffffffffff8211156120cb576120ca612035565b5b6120d482612024565b9050602081019050919050565b82818337600083830152505050565b60006121036120fe846120b0565b612095565b90508281526020810184848401111561211f5761211e61201f565b5b61212a8482856120e1565b509392505050565b600082601f8301126121475761214661201a565b5b81356121578482602086016120f0565b91505092915050565b60008060008060008060c0878903121561217d5761217c611eaf565b5b600061218b89828a01611eda565b965050602061219c89828a01612005565b95505060406121ad89828a01612005565b94505060606121be89828a01611eda565b935050608087013567ffffffffffffffff8111156121df576121de611eb4565b5b6121eb89828a01612132565b92505060a087013567ffffffffffffffff81111561220c5761220b611eb4565b5b61221889828a01612132565b9150509295509295509295565b60008115159050919050565b61223a81612225565b82525050565b60006020820190506122556000830184612231565b92915050565b61226481611f3c565b82525050565b600060208201905061227f600083018461225b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122ba81611f3c565b82525050565b6122c981611fe4565b82525050565b6080820160008201516122e560008501826122b1565b5060208201516122f860208501826122c0565b50604082015161230b60408501826122c0565b50606082015161231e60608501826122c0565b50505050565b600061233083836122cf565b60808301905092915050565b6000602082019050919050565b600061235482612285565b61235e8185612290565b9350612369836122a1565b8060005b8381101561239a5781516123818882612324565b975061238c8361233c565b92505060018101905061236d565b5085935050505092915050565b600060208201905081810360008301526123c18184612349565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124035780820151818401526020810190506123e8565b83811115612412576000848401525b50505050565b6000612423826123c9565b61242d81856123d4565b935061243d8185602086016123e5565b61244681612024565b840191505092915050565b6000602082019050818103600083015261246b8184612418565b905092915050565b6000806040838503121561248a57612489611eaf565b5b600061249885828601611eda565b92505060206124a985828601612005565b9150509250929050565b6124bc81611fe4565b82525050565b60006020820190506124d760008301846124b3565b92915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b60006125396023836123d4565b9150612544826124dd565b604082019050919050565b600060208201905081810360008301526125688161252c565b9050919050565b7f41756374696f6e206d7573742065786973740000000000000000000000000000600082015250565b60006125a56012836123d4565b91506125b08261256f565b602082019050919050565b600060208201905081810360008301526125d481612598565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061264482611fe4565b915061264f83611fe4565b9250828210156126625761266161260a565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006126a782611fe4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156126da576126d961260a565b5b600182019050919050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c7920627920636c6960008201527f656e742e00000000000000000000000000000000000000000000000000000000602082015250565b60006127416024836123d4565b915061274c826126e5565b604082019050919050565b6000602082019050818103600083015261277081612734565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f496e76616c69642041756374696f6e53746174652e0000000000000000000000600082015250565b60006127dc6015836123d4565b91506127e7826127a6565b602082019050919050565b6000602082019050818103600083015261280b816127cf565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b60006128486016836123d4565b915061285382612812565b602082019050919050565b600060208201905081810360008301526128778161283b565b9050919050565b600061288982611fe4565b915061289483611fe4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128cd576128cc61260a565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420656e6f75676800600082015250565b600061290e601f836123d4565b9150612919826128d8565b602082019050919050565b6000602082019050818103600083015261293d81612901565b9050919050565b60006040820190506129596000830185611fba565b612966602083018461225b565b9392505050565b60408201600082015161298360008501826122b1565b50602082015161299660208501826122c0565b50505050565b60006080820190506129b1600083018661225b565b6129be602083018561296d565b6129cb60608301846124b3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a1a57607f821691505b60208210811415612a2e57612a2d6129d3565b5b50919050565b60008190508160005260206000209050919050565b60008154612a5681612a02565b612a6081866123d4565b94506001821660008114612a7b5760018114612a8d57612ac0565b60ff1983168652602086019350612ac0565b612a9685612a34565b60005b83811015612ab857815481890152600182019150602081019050612a99565b808801955050505b50505092915050565b600061010082019050612adf600083018b611fba565b612aec602083018a61225b565b612af9604083018961225b565b612b0660608301886124b3565b612b1360808301876124b3565b612b2060a0830186611fba565b81810360c0830152612b328185612a49565b905081810360e0830152612b468184612a49565b90509998505050505050505050565b7f41756374696f6e20616c72656164792065786973747300000000000000000000600082015250565b6000612b8b6016836123d4565b9150612b9682612b55565b602082019050919050565b60006020820190508181036000830152612bba81612b7e565b9050919050565b6000612bcc82611fe4565b91506000821415612be057612bdf61260a565b5b600182039050919050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b6000612c216020836123d4565b9150612c2c82612beb565b602082019050919050565b60006020820190508181036000830152612c5081612c14565b9050919050565b6000612c6282611fe4565b9150612c6d83611fe4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ca257612ca161260a565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000612ce36011836123d4565b9150612cee82612cad565b602082019050919050565b60006020820190508181036000830152612d1281612cd6565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000612d75602c836123d4565b9150612d8082612d19565b604082019050919050565b60006020820190508181036000830152612da481612d68565b9050919050565b600080fd5b600081519050612dbf81611fee565b92915050565b600060408284031215612ddb57612dda612dab565b5b612de56040612095565b90506000612df584828501612db0565b6000830152506020612e0984828501612db0565b60208301525092915050565b600060408284031215612e2b57612e2a611eaf565b5b6000612e3984828501612dc5565b91505092915050565b6000606082019050612e576000830186611fba565b612e64602083018561225b565b612e7160408301846124b3565b94935050505056fea2646970667358221220f2476063f2869ce7f6b9c2b8db3b6c1ab20d94aacf28fba72b1d839d8f326fcb64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "tasksManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TasksManager)2736"
      },
      {
        "astId": 55,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Auction)36_storage)"
      },
      {
        "astId": 58,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "bytes32_auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProviderBid)45_storage)dyn_storage": {
        "base": "t_struct(ProviderBid)45_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionsManager.ProviderBid[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TasksManager)2736": {
        "encoding": "inplace",
        "label": "contract TasksManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)11": {
        "encoding": "inplace",
        "label": "enum AuctionsManager.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)36_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionsManager.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)36_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)36_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.Auction",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionDeadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "clientVerification",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 23,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "computationCode",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 25,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "verificationCode",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 29,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerBids",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(ProviderBid)45_storage)dyn_storage"
          },
          {
            "astId": 32,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "winnerBid",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(WinnerBid)50_storage"
          },
          {
            "astId": 35,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionState",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(AuctionState)11"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ProviderBid)45_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.ProviderBid",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 40,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 42,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerUpVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerDownVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WinnerBid)50_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.WinnerBid",
        "members": [
          {
            "astId": 47,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 49,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}