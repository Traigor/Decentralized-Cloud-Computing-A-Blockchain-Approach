{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuctionsManager.AuctionState",
          "name": "auctionState",
          "type": "uint8"
        }
      ],
      "name": "AuctionNotInState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByClient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TasksManagerNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "TaskIDCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taskDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_clientVerification",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "auctionID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "client",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDeadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "taskDeadline",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "clientVerification",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "taskID",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "code",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "provider",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "bid",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "providerUpVotes",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "providerDownVotes",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct AuctionsManager.ProviderBid[]",
                  "name": "providerBids",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "provider",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "bid",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct AuctionsManager.WinnerBid",
                  "name": "winnerBid",
                  "type": "tuple"
                },
                {
                  "internalType": "enum AuctionsManager.AuctionState",
                  "name": "auctionState",
                  "type": "uint8"
                }
              ],
              "internalType": "struct AuctionsManager.Auction",
              "name": "auction",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "clientUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "clientDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ActiveAuction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionActiveBidsByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ProviderBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionWinnersByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionsByClient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tasksManagerAddress",
          "type": "address"
        }
      ],
      "name": "setTasksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x605474cbdf5f1591b63b1fec2c82306e28aa9d6c58954fcbcd96a2efb356405e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3932378",
    "logsBloom": "0x
    "blockHash": "0xbe78b7295df0730131bbf99cf894bf9ef763d6d5653426783829772518e280e2",
    "transactionHash": "0x605474cbdf5f1591b63b1fec2c82306e28aa9d6c58954fcbcd96a2efb356405e",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3932378",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "af6b0912159f5df0c18f67cf4c32f5ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"name\":\"AuctionNotInState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByClient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TasksManagerNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"TaskIDCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction\",\"name\":\"auction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"clientUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ActiveAuction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionActiveBidsByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionWinnersByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionsByClient\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tasksManagerAddress\",\"type\":\"address\"}],\"name\":\"setTasksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TasksManager.sol\\\";\\n\\ncontract AuctionsManager {\\n     address private immutable owner; \\n     TasksManager tasksManager;\\n\\n     enum AuctionState {\\n        Created,\\n        Cancelled, \\n        Finalized\\n    }\\n\\n    struct Auction {\\n        bytes32 auctionID;\\n        address client;\\n        uint creationTime;\\n        uint auctionDeadline;\\n        uint taskDeadline;\\n        bytes32 clientVerification;\\n        bytes32 taskID;\\n        string code;\\n        ProviderBid[] providerBids;\\n        WinnerBid winnerBid;\\n        AuctionState auctionState;   \\n    }\\n\\n    struct ProviderBid {\\n        address provider;\\n        uint bid;\\n        uint providerUpVotes;\\n        uint providerDownVotes;\\n    }\\n\\n    struct WinnerBid {\\n        address provider;\\n        uint bid;\\n    }\\n\\n    struct ActiveAuction {\\n        Auction auction;\\n        uint clientUpVotes;\\n        uint clientDownVotes;\\n    }\\n\\n    mapping (bytes32 => Auction) private auctions;\\n\\n    bytes32[] private bytes32_auctions;\\n\\n    //Events\\n    event AuctionCreated(bytes32 auctionID, address client);\\n    event AuctionCancelled(bytes32 auctionID, address client);\\n    event AuctionFinalized(bytes32 auctionID, address client, address provider);\\n    event AuctionDeleted(bytes32 auctionID);\\n    event BidPlaced(bytes32 auctionID, address provider, uint bid);\\n    event TaskIDCreated(bytes32 auctionID, bytes32 taskID, address client, address provider);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByClient();\\n    error AuctionDoesNotExist();\\n    error AuctionNotInState(AuctionState auctionState);\\n    error TasksManagerNotSet();\\n\\n    constructor()  {\\n        owner = msg.sender;\\n    }\\n\\n    function setTasksManager(address payable _tasksManagerAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        tasksManager = TasksManager(_tasksManagerAddress);\\n    }\\n\\n    function createAuction(\\n        uint _auctionDeadline, \\n        uint _taskDeadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public \\n    {\\n        bytes32 _auctionID = keccak256(abi.encode(block.timestamp, msg.sender, _auctionDeadline, _taskDeadline, _clientVerification, _code));\\n        auctions[_auctionID].auctionID = _auctionID;\\n        auctions[_auctionID].client = msg.sender;\\n        auctions[_auctionID].creationTime = block.timestamp;\\n        auctions[_auctionID].auctionDeadline = _auctionDeadline;\\n        auctions[_auctionID].taskDeadline = _taskDeadline;\\n        auctions[_auctionID].clientVerification = _clientVerification;\\n        auctions[_auctionID].code = _code;\\n\\n        auctions[_auctionID].auctionState = AuctionState.Created;\\n        bytes32_auctions.push(_auctionID);\\n        emit AuctionCreated( _auctionID, msg.sender);\\n    }\\n\\n    function cancelAuction(bytes32 _auctionID) public   {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();   \\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        auctions[_auctionID].auctionState = AuctionState.Cancelled;\\n        emit AuctionCancelled(_auctionID, auctions[_auctionID].client);\\n     }\\n\\n    function bid(bytes32 _auctionID, uint _bid) public {\\n        //tasks manager set\\n        if (address(tasksManager) == address(0))\\n            revert TasksManagerNotSet();\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        require(msg.sender != auctions[_auctionID].client, \\\"Client can't bid to this auction\\\"); \\n        require(\\n            (block.timestamp <= auctions[_auctionID].creationTime + auctions[_auctionID].auctionDeadline),\\n            \\\"Time has expired.\\\"\\n        );\\n        uint providerIndex = 0;\\n        bool providerExists = false;\\n        if(auctions[_auctionID].providerBids.length != 0)\\n        {    while(auctions[_auctionID].providerBids[providerIndex].provider != msg.sender)\\n            {\\n                providerIndex++;\\n                if(providerIndex > auctions[_auctionID].providerBids.length)\\n                    break;\\n            }\\n            if (providerIndex <= auctions[_auctionID].providerBids.length)\\n            {\\n                require(\\n                _bid < auctions[_auctionID].providerBids[providerIndex].bid,\\n                \\\"Bid is not lower than than the previous one.\\\"\\n                );\\n                providerExists = true;\\n            }\\n        }\\n        if(providerExists == true)\\n        {\\n            auctions[_auctionID].providerBids[providerIndex].bid = _bid;\\n            auctions[_auctionID].providerBids[providerIndex].providerUpVotes = tasksManager.getProviderPerformance(msg.sender).upVotes;\\n            auctions[_auctionID].providerBids[providerIndex].providerDownVotes = tasksManager.getProviderPerformance(msg.sender).downVotes;\\n        }\\n        else \\n        {\\n            ProviderBid memory currentBid;\\n            currentBid.provider = msg.sender;\\n            currentBid.bid = _bid;\\n            currentBid.providerUpVotes = tasksManager.getProviderPerformance(msg.sender).upVotes;\\n            currentBid.providerDownVotes = tasksManager.getProviderPerformance(msg.sender).downVotes;\\n            auctions[_auctionID].providerBids.push(currentBid);\\n        }\\n        emit BidPlaced(_auctionID, msg.sender, _bid);\\n     }\\n\\n    function finalize(bytes32 _auctionID, address _provider) public payable  {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        uint providerIndex = 0;\\n        if (auctions[_auctionID].providerBids.length == 0)\\n            revert(\\\"Auction has no bids.\\\");\\n        while(auctions[_auctionID].providerBids[providerIndex].provider != _provider)\\n        {\\n            providerIndex++;\\n            if(providerIndex >= auctions[_auctionID].providerBids.length)\\n                break;\\n        }\\n        if(providerIndex >= auctions[_auctionID].providerBids.length)\\n         revert(\\\"Wrong provider address\\\");\\n        WinnerBid memory _winnerBid;\\n        _winnerBid.provider = _provider;\\n        _winnerBid.bid = auctions[_auctionID].providerBids[providerIndex].bid;\\n        require (msg.value ==(_winnerBid.bid * 2), \\\"Client collateral is not correct\\\");\\n        auctions[_auctionID].winnerBid = _winnerBid;\\n        Auction storage currentAuction = auctions[_auctionID];\\n        auctions[_auctionID].auctionState = AuctionState.Finalized;\\n        emit AuctionFinalized(_auctionID, auctions[_auctionID].client,  _provider);\\n        bytes32 taskID = keccak256(abi.encode(currentAuction.client, _winnerBid, block.timestamp));\\n        auctions[_auctionID].taskID = taskID;\\n        emit TaskIDCreated(_auctionID, taskID, auctions[_auctionID].client , _provider);\\n        uint clientCollateral = auctions[_auctionID].winnerBid.bid * 2;\\n        tasksManager.createTask{value: clientCollateral}(taskID, currentAuction.client, _provider,  _winnerBid.bid, currentAuction.taskDeadline, currentAuction.clientVerification,currentAuction.code);\\n    }\\n\\n    function getActiveAuctions() public view returns (ActiveAuction[] memory) {\\n        //tasks manager set\\n        if (address(tasksManager) == address(0))\\n            revert TasksManagerNotSet();\\n        Auction[] memory activeAuctions = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline && auctions[bytes32_auctions[i]].client != msg.sender)\\n            {\\n                activeAuctions[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n         ActiveAuction[] memory result = new ActiveAuction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i].auction = activeAuctions[i];\\n            result[i].clientUpVotes = tasksManager.getClientPerformance(activeAuctions[i].client).upVotes;\\n            result[i].clientDownVotes = tasksManager.getClientPerformance(activeAuctions[i].client).downVotes;\\n        }\\n        return result;\\n    }\\n\\n\\n\\n    function getAuctionBids(bytes32 _auctionID) public view returns(ProviderBid[] memory) {\\n        return auctions[_auctionID].providerBids;\\n    }\\n\\n    function getAuctionsByClient() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByClient = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].client == msg.sender)\\n            {\\n                auctionsByClient[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByClient[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionWinnersByProvider() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].winnerBid.provider == msg.sender)\\n            {\\n                auctionsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionActiveBidsByProvider() public view returns (Auction[] memory) \\n    {\\n        Auction[] memory activeBidsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline)\\n            {\\n                for (uint j = 0; j < auctions[bytes32_auctions[i]].providerBids.length; j++)\\n                {\\n                    if (auctions[bytes32_auctions[i]].providerBids[j].provider == msg.sender)\\n                    {\\n                        activeBidsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                        auctionsLength++;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = activeBidsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return owner;\\n    }\\n    \\n    function getTasksManager() public view returns(address) {\\n         //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return address(tasksManager);\\n    }\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x7705a82034246df88d093032e7188aa6eb2ca5e4a5f0b065e75ca703c872d6dc\",\"license\":\"GPL-3.0\"},\"contracts/TasksManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract TasksManager {\\n\\n    address private immutable owner; \\n    address private auctionAddress;\\n    uint private bank = 0;\\n\\n    enum TaskState {\\n        Created,\\n        Cancelled, \\n        Active,\\n        CompletedSuccessfully,\\n        CompletedUnsuccessfully,\\n        Invalid, \\n        ResultsReceivedSuccessfully,\\n        ResultsReceivedUnsuccessfully\\n    }\\n\\n    enum PaymentState {\\n        Initialized,\\n        Pending,\\n        Completed \\n    }\\n\\n    struct Task {\\n        bytes32 taskID;\\n        address payable client; \\n        address payable provider;\\n        uint deadline;\\n        uint price;\\n        uint duration;\\n        uint activationTime;\\n        uint completionTime;\\n        string code;\\n        string results;\\n        bytes32 clientVerification;\\n        TaskState taskState;\\n        PaymentState paymentState;\\n    }\\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    struct clientRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping (bytes32 => Task) private tasks;\\n    bytes32[] private bytes32_tasks;\\n    mapping(address => providerRating) private providerPerformance;\\n    mapping(address => clientRating) private clientPerformance;\\n\\n    //Events\\n    event TaskCreated(bytes32 taskID, address client, address provider);\\n    event TaskActivated(bytes32 taskID, address client, address provider);\\n    event TaskCompletedSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCompletedUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCancelled(bytes32 taskID, address client, address provider);\\n    event TaskInvalidated(bytes32 taskID, address client, address provider);\\n    event PaymentPending(bytes32 taskID, address client, address provider, uint payment);\\n    event PaymentCompleted(bytes32 taskID, address client, address provider);\\n    event TransferMadeToClient(address client, uint amount);\\n    event TransferMadeToProvider(address provider, uint amount);\\n    event ProviderUpvoted(address provider, bytes32 taskID);\\n    event ProviderDownvoted(address provider, bytes32 taskID);\\n    event ClientUpvoted(address client, bytes32 taskID);\\n    event ClientDownvoted(address client, bytes32 taskID);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByAuction();\\n    error NotCalledByClient();\\n    error NotCalledByProvider();\\n    error NotCorrectValue(uint correctValue, uint receivedValue);\\n    error TaskNotInState(TaskState taskState);\\n    error PaymentNotInState(PaymentState paymentState);\\n    error TaskDoesNotExist();\\n    error TaskAlreadyExists();\\n    error AuctionsManagerNotSet();\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function setAuctionsManager(address _auctionAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        auctionAddress = _auctionAddress;\\n    }\\n\\n    function createTask(\\n        bytes32 _taskID,\\n        address _client,\\n        address _provider,\\n        uint _price,\\n        uint _deadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public payable \\n    {\\n        //auctions manager set\\n        if (auctionAddress == address(0)) \\n            revert AuctionsManagerNotSet();\\n        //auction only\\n        if (msg.sender != auctionAddress) \\n            revert NotCalledByAuction();\\n        //not registered task\\n        if (tasks[_taskID].taskID != bytes32(0)) \\n            revert TaskAlreadyExists();\\n        //correct client collateral\\n        if (msg.value != _price * 2)\\n            revert NotCorrectValue(_price * 2, msg.value);\\n        tasks[_taskID].taskID = _taskID;\\n        tasks[_taskID].client = payable (_client);\\n        tasks[_taskID].provider = payable(_provider);\\n        tasks[_taskID].price = _price;\\n        tasks[_taskID].deadline = _deadline;\\n        tasks[_taskID].clientVerification = _clientVerification;\\n        tasks[_taskID].code = _code;\\n        tasks[_taskID].taskState = TaskState.Created;\\n        tasks[_taskID].paymentState = PaymentState.Initialized;\\n        bytes32_tasks.push(_taskID);\\n        emit TaskCreated(_taskID, _client, _provider);\\n        //clientCollateral = 2 * price\\n        //providerCollateral = 10 * price\\n    }\\n\\n    //Cancel\\n    //TaskState -> Cancel\\n    //refunds payment to client\\n    //can be called only by client and only if contract hasnt been activated by provider\\n\\n    function cancelTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        tasks[_taskID].taskState = TaskState.Cancelled;\\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n        emit TransferMadeToClient(tasks[_taskID].client,tasks[_taskID].price * 2);\\n        emit TaskCancelled(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function invalidateTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n         //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        require(\\n            (block.timestamp > tasks[_taskID].activationTime + tasks[_taskID].deadline + 86400), //give one day to be invalidated\\n            \\\"Time has not expired.\\\"\\n        );\\n        tasks[_taskID].taskState = TaskState.Invalid;\\n  \\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 12 ); //clientCollateral + providerCollateral\\n        emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 12);\\n        emit TaskInvalidated(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    // Activate\\n    // TaskState -> Activated\\n    // can be called only by provider to start the process\\n\\n    function activateTask(bytes32 _taskID) public payable\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in taskState Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        //correct provider collateral\\n        if (msg.value != tasks[_taskID].price * 10)\\n            revert NotCorrectValue(tasks[_taskID].price * 10, msg.value);\\n        tasks[_taskID].activationTime = block.timestamp;\\n        tasks[_taskID].taskState = TaskState.Active;\\n        emit TaskActivated(_taskID, tasks[_taskID].client ,tasks[_taskID].provider);\\n    }\\n\\n    // Complete\\n    // TaskState -> Completed\\n    // can be called only by provider when the computation is over\\n\\n    //called by docker container\\n    function completeTask(bytes32 _taskID,string memory ver,  uint _duration, uint _timeReceivedProvider) public\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        tasks[_taskID].completionTime = _timeReceivedProvider;\\n        tasks[_taskID].duration = _duration + 1;\\n        //in time and correct verification\\n        if ((tasks[_taskID].completionTime <= tasks[_taskID].activationTime + tasks[_taskID].deadline) \\n            && (tasks[_taskID].duration <= tasks[_taskID].deadline) \\n            && (tasks[_taskID].clientVerification == keccak256(abi.encodePacked(ver))))\\n        {\\n            tasks[_taskID].taskState = TaskState.CompletedSuccessfully;\\n            emit TaskCompletedSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            providerPerformance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n            tasks[_taskID].taskState = TaskState.CompletedUnsuccessfully;\\n            emit TaskCompletedUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n    }\\n\\n\\n    //called by provider\\n    function sendResults(bytes32 _taskID, string memory _results) public {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state CompletedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.CompletedSuccessfully) \\n            revert TaskNotInState(TaskState.CompletedSuccessfully);\\n        //in payment state Initialized\\n        if (tasks[_taskID].paymentState != PaymentState.Initialized) \\n            revert PaymentNotInState(PaymentState.Initialized);\\n        uint receiptTime = block.timestamp;\\n        tasks[_taskID].results = _results;\\n        //gives 1 day to provider to send the results, time received must be greater than completion time\\n        if ((receiptTime >= tasks[_taskID].completionTime)\\n        && (receiptTime <= tasks[_taskID].completionTime + 86400) \\n        && (receiptTime >= tasks[_taskID].activationTime + tasks[_taskID].duration) \\n        && (tasks[_taskID].completionTime >= tasks[_taskID].activationTime + tasks[_taskID].duration)) \\n        {\\n            if (tasks[_taskID].price * tasks[_taskID].duration <= tasks[_taskID].price * 2) {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].price * tasks[_taskID].duration + tasks[_taskID].price * 10);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration + tasks[_taskID].price * 10);\\n                tasks[_taskID].client.transfer(tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n                emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n                tasks[_taskID].paymentState = PaymentState.Completed;\\n                emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);                \\n            }\\n            else {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].price * 12); //clientCollateral + providerCollateral\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * 12);\\n                tasks[_taskID].paymentState = PaymentState.Pending;\\n                emit PaymentPending(_taskID, tasks[_taskID].client, tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n            }\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedSuccessfully;\\n            emit TaskReceivedResultsSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            providerPerformance[tasks[_taskID].provider].upVotes += 1;\\n            emit ProviderUpvoted(tasks[_taskID].provider,_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedUnsuccessfully;\\n            emit TaskReceivedResultsUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            providerPerformance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n        }\\n    }\\n\\n\\n    function completePayment(bytes32 _taskID) public payable {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //correct payment value\\n        if (msg.value != tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2)\\n            revert NotCorrectValue(tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2, msg.value);\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Pending\\n        if (tasks[_taskID].paymentState != PaymentState.Pending) \\n            revert PaymentNotInState(PaymentState.Pending);\\n        tasks[_taskID].provider.transfer(msg.value);\\n        emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n        clientPerformance[tasks[_taskID].client].upVotes += 1;\\n        emit ClientUpvoted(tasks[_taskID].client,_taskID);\\n        tasks[_taskID].paymentState = PaymentState.Completed;\\n        emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function reportClient(bytes32 _taskID) public {\\n       //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider(); \\n        clientPerformance[tasks[_taskID].client].downVotes += 1;\\n        emit ClientDownvoted(tasks[_taskID].client,_taskID);\\n    }\\n\\n\\n    function getProviderPerformance(address provider) public view returns (providerRating memory) {\\n        return providerPerformance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getClientPerformance(address client) public view returns (clientRating memory) {\\n        return clientPerformance[client];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getCode(bytes32 _taskID) public view returns (string memory) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        return tasks[_taskID].code;\\n    }\\n\\n    function getResults(bytes32 _taskID) public view returns (string memory)  {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Completed\\n        if (tasks[_taskID].paymentState != PaymentState.Completed) \\n            revert PaymentNotInState(PaymentState.Completed);\\n        return tasks[_taskID].results;\\n    }\\n\\n    function getTasksByClient() public view returns (Task[] memory) {\\n        Task[] memory tasksByClient = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].client == msg.sender) {\\n                tasksByClient[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n        for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByClient[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getTasksByProvider() public view returns (Task[] memory) {\\n        Task[] memory tasksByProvider = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].provider == msg.sender) {\\n                tasksByProvider[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n         for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByProvider[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getProviderCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 10;\\n    }\\n\\n    function getClientCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 2;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getAuctionAddress() public  view returns (address) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return auctionAddress;\\n    }\\n\\n    function getTasks() public view returns (Task[] memory) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        Task[] memory ret = new Task[](bytes32_tasks.length);\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            ret[i] = tasks[bytes32_tasks[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getBank() public view returns (uint) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return bank;\\n    }\\n\\n    function withdraw(uint amount) public {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        //correct amount\\n        if (amount > bank)\\n            revert NotCorrectValue(bank, amount);\\n        payable(owner).transfer(amount);\\n        bank -= amount;\\n    }\\n\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x0fdb027a5eae2bba824e7436a705e04acbb0b058f1b396a546cd8ab2ce246a76\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c61465f61007460003960008181610bfd015281816129990152612a63015261465f6000f3fe6080604052600436106100ab5760003560e01c8063c618e93811610064578063c618e938146101f1578063cd772f5c1461021c578063cf44b5d514610245578063e0a7632414610270578063e151556314610299578063e369e93c146102c4576100eb565b806312e1d724146100f05780633ef4d1301461010c578063893d20e8146101355780639ad01fde146101605780639b680e7d1461018b578063a02daf96146101c8576100eb565b366100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e290613372565b60405180910390fd5b600080fd5b61010a6004803603810190610105919061343a565b6102ef565b005b34801561011857600080fd5b50610133600480360381019061012e919061347a565b6109ce565b005b34801561014157600080fd5b5061014a610bf9565b60405161015791906134b6565b60405180910390f35b34801561016c57600080fd5b50610175610c21565b6040516101829190613903565b60405180910390f35b34801561019757600080fd5b506101b260048036038101906101ad919061347a565b6110f6565b6040516101bf9190613994565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190613b17565b6111df565b005b3480156101fd57600080fd5b506102066113c3565b6040516102139190613903565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190613b9a565b61189b565b005b34801561025157600080fd5b5061025a61216c565b6040516102679190613cec565b60405180910390f35b34801561027c57600080fd5b5061029760048036038101906102929190613d4c565b612997565b005b3480156102a557600080fd5b506102ae612a5f565b6040516102bb91906134b6565b60405180910390f35b3480156102d057600080fd5b506102d9612b0c565b6040516102e69190613903565b60405180910390f35b6000801b60016000848152602001908152602001600020600001541415610342576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103dd576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156103f1576103f0613700565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561042757610426613700565b5b1461046a5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016104619190613d88565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90613def565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff1660016000858152602001908152602001600020600801828154811061050857610507613e0f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461058d57808061056090613e6d565b915050600160008481526020019081526020016000206008018054905081106105885761058d565b6104c9565b600160008481526020019081526020016000206008018054905081106105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90613f02565b60405180910390fd5b6105f061314c565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600085815260200190815260200160002060080182815481106106505761064f613e0f565b5b9060005260206000209060040201600101548160200181815250506002816020015161067c9190613f22565b34146106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490613fc8565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561077957610778613700565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516107e793929190613ff7565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16834260405160200161082a9392919061406c565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040516108c894939291906140a3565b60405180910390a16000600260016000898152602001908152602001600020600901600101546108f89190613f22565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b815260040161099397969594939291906141de565b6000604051808303818588803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610a21576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610abc576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610ad057610acf613700565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610b0657610b05613700565b5b14610b495760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610b409190613d88565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610b8257610b81613700565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610bee929190614254565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610c4457610c436139ec565b5b604051908082528060200260200182016040528015610c7d57816020015b610c6a61317c565b815260200190600190039081610c625790505b5090506000805b60028054905081101561103c573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610cc057610cbf613e0f565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611029576001600060028381548110610d3157610d30613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054610df890614117565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2490614117565b8015610e715780601f10610e4657610100808354040283529160200191610e71565b820191906000526020600020905b815481529060010190602001808311610e5457829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f4557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610e9f565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115610fe657610fe5613700565b5b6002811115610ff857610ff7613700565b5b8152505083838151811061100f5761100e613e0f565b5b6020026020010181905250818061102590613e6d565b9250505b808061103490613e6d565b915050610c84565b5060008167ffffffffffffffff811115611059576110586139ec565b5b60405190808252806020026020018201604052801561109257816020015b61107f61317c565b8152602001906001900390816110775790505b50905060005b828110156110ec578381815181106110b3576110b2613e0f565b5b60200260200101518282815181106110ce576110cd613e0f565b5b602002602001018190525080806110e490613e6d565b915050611098565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156111d457838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061112e565b505050509050919050565b60004233868686866040516020016111fc969594939291906142b6565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061131a92919061320d565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561135557611354613700565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516113b4929190614254565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156113e6576113e56139ec565b5b60405190808252806020026020018201604052801561141f57816020015b61140c61317c565b8152602001906001900390816114045790505b5090506000805b6002805490508110156117e1573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061146257611461613e0f565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117ce5760016000600283815481106114d6576114d5613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461159d90614117565b80601f01602080910402602001604051908101604052809291908181526020018280546115c990614117565b80156116165780601f106115eb57610100808354040283529160200191611616565b820191906000526020600020905b8154815290600101906020018083116115f957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156116ea57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611644565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561178b5761178a613700565b5b600281111561179d5761179c613700565b5b815250508383815181106117b4576117b3613e0f565b5b602002602001018190525081806117ca90613e6d565b9250505b80806117d990613e6d565b915050611426565b5060008167ffffffffffffffff8111156117fe576117fd6139ec565b5b60405190808252806020026020018201604052801561183757816020015b61182461317c565b81526020019060019003908161181c5790505b50905060005b828110156118915783818151811061185857611857613e0f565b5b602002602001015182828151811061187357611872613e0f565b5b6020026020010181905250808061188990613e6d565b91505061183d565b5080935050505090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611922576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b60016000848152602001908152602001600020600001541415611975576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600281111561198957611988613700565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff1660028111156119bf576119be613700565b5b14611a025760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016119f99190613d88565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e9061436a565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611adf919061438a565b421115611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b189061442c565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611cac575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611b8557611b84613e0f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c0b578180611bdd90613e6d565b9250506001600085815260200190815260200160002060080180549050821115611c0657611c0b565b611b46565b60016000858152602001908152602001600020600801805490508211611cab57600160008581526020019081526020016000206008018281548110611c5357611c52613e0f565b5b9060005260206000209060040201600101548310611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d906144be565b60405180910390fd5b600190505b5b600115158115151415611ece5782600160008681526020019081526020016000206008018381548110611ce257611ce1613e0f565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611d5091906134b6565b604080518083038186803b158015611d6757600080fd5b505afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f9190614548565b60000151600160008681526020019081526020016000206008018381548110611dcb57611dca613e0f565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611e3991906134b6565b604080518083038186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e889190614548565b60200151600160008681526020019081526020016000206008018381548110611eb457611eb3613e0f565b5b90600052602060002090600402016003018190555061212b565b611ed6613293565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611f7191906134b6565b604080518083038186803b158015611f8857600080fd5b505afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc09190614548565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b815260040161202691906134b6565b604080518083038186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190614548565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c6684338560405161215e93929190614575565b60405180910390a150505050565b6060600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156121f5576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054905067ffffffffffffffff811115612216576122156139ec565b5b60405190808252806020026020018201604052801561224f57816020015b61223c61317c565b8152602001906001900390816122345790505b5090506000805b6002805490508110156126ff576000600281111561227757612276613700565b5b600160006002848154811061228f5761228e613e0f565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff1660028111156122cb576122ca613700565b5b14801561234b575060016000600283815481106122eb576122ea613e0f565b5b906000526020600020015481526020019081526020016000206003015460016000600284815481106123205761231f613e0f565b5b9060005260206000200154815260200190815260200160002060020154612347919061438a565b4211155b80156123d757503373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061238157612380613e0f565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156126ec5760016000600283815481106123f4576123f3613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546124bb90614117565b80601f01602080910402602001604051908101604052809291908181526020018280546124e790614117565b80156125345780601f1061250957610100808354040283529160200191612534565b820191906000526020600020905b81548152906001019060200180831161251757829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561260857838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612562565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156126a9576126a8613700565b5b60028111156126bb576126ba613700565b5b815250508383815181106126d2576126d1613e0f565b5b602002602001018190525081806126e890613e6d565b9250505b80806126f790613e6d565b915050612256565b5060008167ffffffffffffffff81111561271c5761271b6139ec565b5b60405190808252806020026020018201604052801561275557816020015b6127426132d1565b81526020019060019003908161273a5790505b50905060005b8281101561298d5783818151811061277657612775613e0f565b5b602002602001015182828151811061279157612790613e0f565b5b60200260200101516000018190525060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db58583815181106127ef576127ee613e0f565b5b6020026020010151602001516040518263ffffffff1660e01b815260040161281791906134b6565b604080518083038186803b15801561282e57600080fd5b505afa158015612842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286691906145fc565b6000015182828151811061287d5761287c613e0f565b5b6020026020010151602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db58583815181106128dc576128db613e0f565b5b6020026020010151602001516040518263ffffffff1660e01b815260040161290491906134b6565b604080518083038186803b15801561291b57600080fd5b505afa15801561292f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295391906145fc565b6020015182828151811061296a57612969613e0f565b5b60200260200101516040018181525050808061298590613e6d565b91505061275b565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a1c576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ae6576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612b2f57612b2e6139ec565b5b604051908082528060200260200182016040528015612b6857816020015b612b5561317c565b815260200190600190039081612b4d5790505b5090506000805b6002805490508110156130925760006002811115612b9057612b8f613700565b5b6001600060028481548110612ba857612ba7613e0f565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612be457612be3613700565b5b148015612c6457506001600060028381548110612c0457612c03613e0f565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612c3957612c38613e0f565b5b9060005260206000200154815260200190815260200160002060020154612c60919061438a565b4211155b1561307f5760005b6001600060028481548110612c8457612c83613e0f565b5b906000526020600020015481526020019081526020016000206008018054905081101561307d573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612cda57612cd9613e0f565b5b906000526020600020015481526020019081526020016000206008018281548110612d0857612d07613e0f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561306a576001600060028481548110612d6e57612d6d613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612e3590614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612e6190614117565b8015612eae5780601f10612e8357610100808354040283529160200191612eae565b820191906000526020600020905b815481529060010190602001808311612e9157829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612f8257838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612edc565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561302357613022613700565b5b600281111561303557613034613700565b5b8152505084848151811061304c5761304b613e0f565b5b6020026020010181905250828061306290613e6d565b93505061307d565b808061307590613e6d565b915050612c6c565b505b808061308a90613e6d565b915050612b6f565b5060008167ffffffffffffffff8111156130af576130ae6139ec565b5b6040519080825280602002602001820160405280156130e857816020015b6130d561317c565b8152602001906001900390816130cd5790505b50905060005b828110156131425783818151811061310957613108613e0f565b5b602002602001015182828151811061312457613123613e0f565b5b6020026020010181905250808061313a90613e6d565b9150506130ee565b5080935050505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160608152602001606081526020016131ee61314c565b81526020016000600281111561320757613206613700565b5b81525090565b82805461321990614117565b90600052602060002090601f01602090048101928261323b5760008555613282565b82601f1061325457805160ff1916838001178555613282565b82800160010185558215613282579182015b82811115613281578251825591602001919060010190613266565b5b50905061328f91906132f8565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b60405180606001604052806132e461317c565b815260200160008152602001600081525090565b5b808211156133115760008160009055506001016132f9565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b600061335c600883613315565b915061336782613326565b602082019050919050565b6000602082019050818103600083015261338b8161334f565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6133b9816133a6565b81146133c457600080fd5b50565b6000813590506133d6816133b0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613407826133dc565b9050919050565b613417816133fc565b811461342257600080fd5b50565b6000813590506134348161340e565b92915050565b600080604083850312156134515761345061339c565b5b600061345f858286016133c7565b925050602061347085828601613425565b9150509250929050565b6000602082840312156134905761348f61339c565b5b600061349e848285016133c7565b91505092915050565b6134b0816133fc565b82525050565b60006020820190506134cb60008301846134a7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613506816133a6565b82525050565b613515816133fc565b82525050565b6000819050919050565b61352e8161351b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561356e578082015181840152602081019050613553565b8381111561357d576000848401525b50505050565b6000601f19601f8301169050919050565b600061359f82613534565b6135a9818561353f565b93506135b9818560208601613550565b6135c281613583565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60808201600082015161360f600085018261350c565b5060208201516136226020850182613525565b5060408201516136356040850182613525565b5060608201516136486060850182613525565b50505050565b600061365a83836135f9565b60808301905092915050565b6000602082019050919050565b600061367e826135cd565b61368881856135d8565b9350613693836135e9565b8060005b838110156136c45781516136ab888261364e565b97506136b683613666565b925050600181019050613697565b5085935050505092915050565b6040820160008201516136e7600085018261350c565b5060208201516136fa6020850182613525565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106137405761373f613700565b5b50565b60008190506137518261372f565b919050565b600061376182613743565b9050919050565b61377181613756565b82525050565b60006101808301600083015161379060008601826134fd565b5060208301516137a3602086018261350c565b5060408301516137b66040860182613525565b5060608301516137c96060860182613525565b5060808301516137dc6080860182613525565b5060a08301516137ef60a08601826134fd565b5060c083015161380260c08601826134fd565b5060e083015184820360e086015261381a8282613594565b9150506101008301518482036101008601526138368282613673565b91505061012083015161384d6101208601826136d1565b50610140830151613862610160860182613768565b508091505092915050565b60006138798383613777565b905092915050565b6000602082019050919050565b6000613899826134d1565b6138a381856134dc565b9350836020820285016138b5856134ed565b8060005b858110156138f157848403895281516138d2858261386d565b94506138dd83613881565b925060208a019950506001810190506138b9565b50829750879550505050505092915050565b6000602082019050818103600083015261391d818461388e565b905092915050565b600082825260208201905092915050565b6000613941826135cd565b61394b8185613925565b9350613956836135e9565b8060005b8381101561398757815161396e888261364e565b975061397983613666565b92505060018101905061395a565b5085935050505092915050565b600060208201905081810360008301526139ae8184613936565b905092915050565b6139bf8161351b565b81146139ca57600080fd5b50565b6000813590506139dc816139b6565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613a2482613583565b810181811067ffffffffffffffff82111715613a4357613a426139ec565b5b80604052505050565b6000613a56613392565b9050613a628282613a1b565b919050565b600067ffffffffffffffff821115613a8257613a816139ec565b5b613a8b82613583565b9050602081019050919050565b82818337600083830152505050565b6000613aba613ab584613a67565b613a4c565b905082815260208101848484011115613ad657613ad56139e7565b5b613ae1848285613a98565b509392505050565b600082601f830112613afe57613afd6139e2565b5b8135613b0e848260208601613aa7565b91505092915050565b60008060008060808587031215613b3157613b3061339c565b5b6000613b3f878288016139cd565b9450506020613b50878288016139cd565b9350506040613b61878288016133c7565b925050606085013567ffffffffffffffff811115613b8257613b816133a1565b5b613b8e87828801613ae9565b91505092959194509250565b60008060408385031215613bb157613bb061339c565b5b6000613bbf858286016133c7565b9250506020613bd0858286016139cd565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301518482036000860152613c238282613777565b9150506020830151613c386020860182613525565b506040830151613c4b6040860182613525565b508091505092915050565b6000613c628383613c06565b905092915050565b6000602082019050919050565b6000613c8282613bda565b613c8c8185613be5565b935083602082028501613c9e85613bf6565b8060005b85811015613cda5784840389528151613cbb8582613c56565b9450613cc683613c6a565b925060208a01995050600181019050613ca2565b50829750879550505050505092915050565b60006020820190508181036000830152613d068184613c77565b905092915050565b6000613d19826133dc565b9050919050565b613d2981613d0e565b8114613d3457600080fd5b50565b600081359050613d4681613d20565b92915050565b600060208284031215613d6257613d6161339c565b5b6000613d7084828501613d37565b91505092915050565b613d8281613756565b82525050565b6000602082019050613d9d6000830184613d79565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613dd9601483613315565b9150613de482613da3565b602082019050919050565b60006020820190508181036000830152613e0881613dcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e788261351b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613eab57613eaa613e3e565b5b600182019050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613eec601683613315565b9150613ef782613eb6565b602082019050919050565b60006020820190508181036000830152613f1b81613edf565b9050919050565b6000613f2d8261351b565b9150613f388361351b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f7157613f70613e3e565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b6000613fb2602083613315565b9150613fbd82613f7c565b602082019050919050565b60006020820190508181036000830152613fe181613fa5565b9050919050565b613ff1816133a6565b82525050565b600060608201905061400c6000830186613fe8565b61401960208301856134a7565b61402660408301846134a7565b949350505050565b604082016000820151614044600085018261350c565b5060208201516140576020850182613525565b50505050565b6140668161351b565b82525050565b600060808201905061408160008301866134a7565b61408e602083018561402e565b61409b606083018461405d565b949350505050565b60006080820190506140b86000830187613fe8565b6140c56020830186613fe8565b6140d260408301856134a7565b6140df60608301846134a7565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061412f57607f821691505b60208210811415614143576141426140e8565b5b50919050565b60008190508160005260206000209050919050565b6000815461416b81614117565b6141758186613315565b9450600182166000811461419057600181146141a2576141d5565b60ff19831686526020860193506141d5565b6141ab85614149565b60005b838110156141cd578154818901526001820191506020810190506141ae565b808801955050505b50505092915050565b600060e0820190506141f3600083018a613fe8565b61420060208301896134a7565b61420d60408301886134a7565b61421a606083018761405d565b614227608083018661405d565b61423460a0830185613fe8565b81810360c0830152614246818461415e565b905098975050505050505050565b60006040820190506142696000830185613fe8565b61427660208301846134a7565b9392505050565b600061428882613534565b6142928185613315565b93506142a2818560208601613550565b6142ab81613583565b840191505092915050565b600060c0820190506142cb600083018961405d565b6142d860208301886134a7565b6142e5604083018761405d565b6142f2606083018661405d565b6142ff6080830185613fe8565b81810360a0830152614311818461427d565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b6000614354602083613315565b915061435f8261431e565b602082019050919050565b6000602082019050818103600083015261438381614347565b9050919050565b60006143958261351b565b91506143a08361351b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143d5576143d4613e3e565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000614416601183613315565b9150614421826143e0565b602082019050919050565b6000602082019050818103600083015261444581614409565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b60006144a8602c83613315565b91506144b38261444c565b604082019050919050565b600060208201905081810360008301526144d78161449b565b9050919050565b600080fd5b6000815190506144f2816139b6565b92915050565b60006040828403121561450e5761450d6144de565b5b6145186040613a4c565b90506000614528848285016144e3565b600083015250602061453c848285016144e3565b60208301525092915050565b60006040828403121561455e5761455d61339c565b5b600061456c848285016144f8565b91505092915050565b600060608201905061458a6000830186613fe8565b61459760208301856134a7565b6145a4604083018461405d565b949350505050565b6000604082840312156145c2576145c16144de565b5b6145cc6040613a4c565b905060006145dc848285016144e3565b60008301525060206145f0848285016144e3565b60208301525092915050565b6000604082840312156146125761461161339c565b5b6000614620848285016145ac565b9150509291505056fea264697066735822122026b259dc06f1a4e7d10f559f1f415464aed8499a2c2e54092b385a102044fc3064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c8063c618e93811610064578063c618e938146101f1578063cd772f5c1461021c578063cf44b5d514610245578063e0a7632414610270578063e151556314610299578063e369e93c146102c4576100eb565b806312e1d724146100f05780633ef4d1301461010c578063893d20e8146101355780639ad01fde146101605780639b680e7d1461018b578063a02daf96146101c8576100eb565b366100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e290613372565b60405180910390fd5b600080fd5b61010a6004803603810190610105919061343a565b6102ef565b005b34801561011857600080fd5b50610133600480360381019061012e919061347a565b6109ce565b005b34801561014157600080fd5b5061014a610bf9565b60405161015791906134b6565b60405180910390f35b34801561016c57600080fd5b50610175610c21565b6040516101829190613903565b60405180910390f35b34801561019757600080fd5b506101b260048036038101906101ad919061347a565b6110f6565b6040516101bf9190613994565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190613b17565b6111df565b005b3480156101fd57600080fd5b506102066113c3565b6040516102139190613903565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190613b9a565b61189b565b005b34801561025157600080fd5b5061025a61216c565b6040516102679190613cec565b60405180910390f35b34801561027c57600080fd5b5061029760048036038101906102929190613d4c565b612997565b005b3480156102a557600080fd5b506102ae612a5f565b6040516102bb91906134b6565b60405180910390f35b3480156102d057600080fd5b506102d9612b0c565b6040516102e69190613903565b60405180910390f35b6000801b60016000848152602001908152602001600020600001541415610342576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103dd576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156103f1576103f0613700565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561042757610426613700565b5b1461046a5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016104619190613d88565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90613def565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff1660016000858152602001908152602001600020600801828154811061050857610507613e0f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461058d57808061056090613e6d565b915050600160008481526020019081526020016000206008018054905081106105885761058d565b6104c9565b600160008481526020019081526020016000206008018054905081106105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90613f02565b60405180910390fd5b6105f061314c565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600085815260200190815260200160002060080182815481106106505761064f613e0f565b5b9060005260206000209060040201600101548160200181815250506002816020015161067c9190613f22565b34146106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490613fc8565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561077957610778613700565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516107e793929190613ff7565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16834260405160200161082a9392919061406c565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040516108c894939291906140a3565b60405180910390a16000600260016000898152602001908152602001600020600901600101546108f89190613f22565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b815260040161099397969594939291906141de565b6000604051808303818588803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610a21576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610abc576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610ad057610acf613700565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610b0657610b05613700565b5b14610b495760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610b409190613d88565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610b8257610b81613700565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610bee929190614254565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610c4457610c436139ec565b5b604051908082528060200260200182016040528015610c7d57816020015b610c6a61317c565b815260200190600190039081610c625790505b5090506000805b60028054905081101561103c573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610cc057610cbf613e0f565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611029576001600060028381548110610d3157610d30613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054610df890614117565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2490614117565b8015610e715780601f10610e4657610100808354040283529160200191610e71565b820191906000526020600020905b815481529060010190602001808311610e5457829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f4557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610e9f565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115610fe657610fe5613700565b5b6002811115610ff857610ff7613700565b5b8152505083838151811061100f5761100e613e0f565b5b6020026020010181905250818061102590613e6d565b9250505b808061103490613e6d565b915050610c84565b5060008167ffffffffffffffff811115611059576110586139ec565b5b60405190808252806020026020018201604052801561109257816020015b61107f61317c565b8152602001906001900390816110775790505b50905060005b828110156110ec578381815181106110b3576110b2613e0f565b5b60200260200101518282815181106110ce576110cd613e0f565b5b602002602001018190525080806110e490613e6d565b915050611098565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156111d457838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061112e565b505050509050919050565b60004233868686866040516020016111fc969594939291906142b6565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061131a92919061320d565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561135557611354613700565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516113b4929190614254565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156113e6576113e56139ec565b5b60405190808252806020026020018201604052801561141f57816020015b61140c61317c565b8152602001906001900390816114045790505b5090506000805b6002805490508110156117e1573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061146257611461613e0f565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117ce5760016000600283815481106114d6576114d5613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461159d90614117565b80601f01602080910402602001604051908101604052809291908181526020018280546115c990614117565b80156116165780601f106115eb57610100808354040283529160200191611616565b820191906000526020600020905b8154815290600101906020018083116115f957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156116ea57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611644565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561178b5761178a613700565b5b600281111561179d5761179c613700565b5b815250508383815181106117b4576117b3613e0f565b5b602002602001018190525081806117ca90613e6d565b9250505b80806117d990613e6d565b915050611426565b5060008167ffffffffffffffff8111156117fe576117fd6139ec565b5b60405190808252806020026020018201604052801561183757816020015b61182461317c565b81526020019060019003908161181c5790505b50905060005b828110156118915783818151811061185857611857613e0f565b5b602002602001015182828151811061187357611872613e0f565b5b6020026020010181905250808061188990613e6d565b91505061183d565b5080935050505090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611922576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b60016000848152602001908152602001600020600001541415611975576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600281111561198957611988613700565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff1660028111156119bf576119be613700565b5b14611a025760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016119f99190613d88565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e9061436a565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611adf919061438a565b421115611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b189061442c565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611cac575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611b8557611b84613e0f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c0b578180611bdd90613e6d565b9250506001600085815260200190815260200160002060080180549050821115611c0657611c0b565b611b46565b60016000858152602001908152602001600020600801805490508211611cab57600160008581526020019081526020016000206008018281548110611c5357611c52613e0f565b5b9060005260206000209060040201600101548310611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d906144be565b60405180910390fd5b600190505b5b600115158115151415611ece5782600160008681526020019081526020016000206008018381548110611ce257611ce1613e0f565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611d5091906134b6565b604080518083038186803b158015611d6757600080fd5b505afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f9190614548565b60000151600160008681526020019081526020016000206008018381548110611dcb57611dca613e0f565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611e3991906134b6565b604080518083038186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e889190614548565b60200151600160008681526020019081526020016000206008018381548110611eb457611eb3613e0f565b5b90600052602060002090600402016003018190555061212b565b611ed6613293565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611f7191906134b6565b604080518083038186803b158015611f8857600080fd5b505afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc09190614548565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b815260040161202691906134b6565b604080518083038186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190614548565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c6684338560405161215e93929190614575565b60405180910390a150505050565b6060600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156121f5576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054905067ffffffffffffffff811115612216576122156139ec565b5b60405190808252806020026020018201604052801561224f57816020015b61223c61317c565b8152602001906001900390816122345790505b5090506000805b6002805490508110156126ff576000600281111561227757612276613700565b5b600160006002848154811061228f5761228e613e0f565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff1660028111156122cb576122ca613700565b5b14801561234b575060016000600283815481106122eb576122ea613e0f565b5b906000526020600020015481526020019081526020016000206003015460016000600284815481106123205761231f613e0f565b5b9060005260206000200154815260200190815260200160002060020154612347919061438a565b4211155b80156123d757503373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061238157612380613e0f565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156126ec5760016000600283815481106123f4576123f3613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546124bb90614117565b80601f01602080910402602001604051908101604052809291908181526020018280546124e790614117565b80156125345780601f1061250957610100808354040283529160200191612534565b820191906000526020600020905b81548152906001019060200180831161251757829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561260857838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612562565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156126a9576126a8613700565b5b60028111156126bb576126ba613700565b5b815250508383815181106126d2576126d1613e0f565b5b602002602001018190525081806126e890613e6d565b9250505b80806126f790613e6d565b915050612256565b5060008167ffffffffffffffff81111561271c5761271b6139ec565b5b60405190808252806020026020018201604052801561275557816020015b6127426132d1565b81526020019060019003908161273a5790505b50905060005b8281101561298d5783818151811061277657612775613e0f565b5b602002602001015182828151811061279157612790613e0f565b5b60200260200101516000018190525060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db58583815181106127ef576127ee613e0f565b5b6020026020010151602001516040518263ffffffff1660e01b815260040161281791906134b6565b604080518083038186803b15801561282e57600080fd5b505afa158015612842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286691906145fc565b6000015182828151811061287d5761287c613e0f565b5b6020026020010151602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db58583815181106128dc576128db613e0f565b5b6020026020010151602001516040518263ffffffff1660e01b815260040161290491906134b6565b604080518083038186803b15801561291b57600080fd5b505afa15801561292f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295391906145fc565b6020015182828151811061296a57612969613e0f565b5b60200260200101516040018181525050808061298590613e6d565b91505061275b565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a1c576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ae6576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612b2f57612b2e6139ec565b5b604051908082528060200260200182016040528015612b6857816020015b612b5561317c565b815260200190600190039081612b4d5790505b5090506000805b6002805490508110156130925760006002811115612b9057612b8f613700565b5b6001600060028481548110612ba857612ba7613e0f565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612be457612be3613700565b5b148015612c6457506001600060028381548110612c0457612c03613e0f565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612c3957612c38613e0f565b5b9060005260206000200154815260200190815260200160002060020154612c60919061438a565b4211155b1561307f5760005b6001600060028481548110612c8457612c83613e0f565b5b906000526020600020015481526020019081526020016000206008018054905081101561307d573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612cda57612cd9613e0f565b5b906000526020600020015481526020019081526020016000206008018281548110612d0857612d07613e0f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561306a576001600060028481548110612d6e57612d6d613e0f565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612e3590614117565b80601f0160208091040260200160405190810160405280929190818152602001828054612e6190614117565b8015612eae5780601f10612e8357610100808354040283529160200191612eae565b820191906000526020600020905b815481529060010190602001808311612e9157829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612f8257838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612edc565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561302357613022613700565b5b600281111561303557613034613700565b5b8152505084848151811061304c5761304b613e0f565b5b6020026020010181905250828061306290613e6d565b93505061307d565b808061307590613e6d565b915050612c6c565b505b808061308a90613e6d565b915050612b6f565b5060008167ffffffffffffffff8111156130af576130ae6139ec565b5b6040519080825280602002602001820160405280156130e857816020015b6130d561317c565b8152602001906001900390816130cd5790505b50905060005b828110156131425783818151811061310957613108613e0f565b5b602002602001015182828151811061312457613123613e0f565b5b6020026020010181905250808061313a90613e6d565b9150506130ee565b5080935050505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160608152602001606081526020016131ee61314c565b81526020016000600281111561320757613206613700565b5b81525090565b82805461321990614117565b90600052602060002090601f01602090048101928261323b5760008555613282565b82601f1061325457805160ff1916838001178555613282565b82800160010185558215613282579182015b82811115613281578251825591602001919060010190613266565b5b50905061328f91906132f8565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b60405180606001604052806132e461317c565b815260200160008152602001600081525090565b5b808211156133115760008160009055506001016132f9565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b600061335c600883613315565b915061336782613326565b602082019050919050565b6000602082019050818103600083015261338b8161334f565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6133b9816133a6565b81146133c457600080fd5b50565b6000813590506133d6816133b0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613407826133dc565b9050919050565b613417816133fc565b811461342257600080fd5b50565b6000813590506134348161340e565b92915050565b600080604083850312156134515761345061339c565b5b600061345f858286016133c7565b925050602061347085828601613425565b9150509250929050565b6000602082840312156134905761348f61339c565b5b600061349e848285016133c7565b91505092915050565b6134b0816133fc565b82525050565b60006020820190506134cb60008301846134a7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613506816133a6565b82525050565b613515816133fc565b82525050565b6000819050919050565b61352e8161351b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561356e578082015181840152602081019050613553565b8381111561357d576000848401525b50505050565b6000601f19601f8301169050919050565b600061359f82613534565b6135a9818561353f565b93506135b9818560208601613550565b6135c281613583565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60808201600082015161360f600085018261350c565b5060208201516136226020850182613525565b5060408201516136356040850182613525565b5060608201516136486060850182613525565b50505050565b600061365a83836135f9565b60808301905092915050565b6000602082019050919050565b600061367e826135cd565b61368881856135d8565b9350613693836135e9565b8060005b838110156136c45781516136ab888261364e565b97506136b683613666565b925050600181019050613697565b5085935050505092915050565b6040820160008201516136e7600085018261350c565b5060208201516136fa6020850182613525565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106137405761373f613700565b5b50565b60008190506137518261372f565b919050565b600061376182613743565b9050919050565b61377181613756565b82525050565b60006101808301600083015161379060008601826134fd565b5060208301516137a3602086018261350c565b5060408301516137b66040860182613525565b5060608301516137c96060860182613525565b5060808301516137dc6080860182613525565b5060a08301516137ef60a08601826134fd565b5060c083015161380260c08601826134fd565b5060e083015184820360e086015261381a8282613594565b9150506101008301518482036101008601526138368282613673565b91505061012083015161384d6101208601826136d1565b50610140830151613862610160860182613768565b508091505092915050565b60006138798383613777565b905092915050565b6000602082019050919050565b6000613899826134d1565b6138a381856134dc565b9350836020820285016138b5856134ed565b8060005b858110156138f157848403895281516138d2858261386d565b94506138dd83613881565b925060208a019950506001810190506138b9565b50829750879550505050505092915050565b6000602082019050818103600083015261391d818461388e565b905092915050565b600082825260208201905092915050565b6000613941826135cd565b61394b8185613925565b9350613956836135e9565b8060005b8381101561398757815161396e888261364e565b975061397983613666565b92505060018101905061395a565b5085935050505092915050565b600060208201905081810360008301526139ae8184613936565b905092915050565b6139bf8161351b565b81146139ca57600080fd5b50565b6000813590506139dc816139b6565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613a2482613583565b810181811067ffffffffffffffff82111715613a4357613a426139ec565b5b80604052505050565b6000613a56613392565b9050613a628282613a1b565b919050565b600067ffffffffffffffff821115613a8257613a816139ec565b5b613a8b82613583565b9050602081019050919050565b82818337600083830152505050565b6000613aba613ab584613a67565b613a4c565b905082815260208101848484011115613ad657613ad56139e7565b5b613ae1848285613a98565b509392505050565b600082601f830112613afe57613afd6139e2565b5b8135613b0e848260208601613aa7565b91505092915050565b60008060008060808587031215613b3157613b3061339c565b5b6000613b3f878288016139cd565b9450506020613b50878288016139cd565b9350506040613b61878288016133c7565b925050606085013567ffffffffffffffff811115613b8257613b816133a1565b5b613b8e87828801613ae9565b91505092959194509250565b60008060408385031215613bb157613bb061339c565b5b6000613bbf858286016133c7565b9250506020613bd0858286016139cd565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301518482036000860152613c238282613777565b9150506020830151613c386020860182613525565b506040830151613c4b6040860182613525565b508091505092915050565b6000613c628383613c06565b905092915050565b6000602082019050919050565b6000613c8282613bda565b613c8c8185613be5565b935083602082028501613c9e85613bf6565b8060005b85811015613cda5784840389528151613cbb8582613c56565b9450613cc683613c6a565b925060208a01995050600181019050613ca2565b50829750879550505050505092915050565b60006020820190508181036000830152613d068184613c77565b905092915050565b6000613d19826133dc565b9050919050565b613d2981613d0e565b8114613d3457600080fd5b50565b600081359050613d4681613d20565b92915050565b600060208284031215613d6257613d6161339c565b5b6000613d7084828501613d37565b91505092915050565b613d8281613756565b82525050565b6000602082019050613d9d6000830184613d79565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613dd9601483613315565b9150613de482613da3565b602082019050919050565b60006020820190508181036000830152613e0881613dcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e788261351b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613eab57613eaa613e3e565b5b600182019050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613eec601683613315565b9150613ef782613eb6565b602082019050919050565b60006020820190508181036000830152613f1b81613edf565b9050919050565b6000613f2d8261351b565b9150613f388361351b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f7157613f70613e3e565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b6000613fb2602083613315565b9150613fbd82613f7c565b602082019050919050565b60006020820190508181036000830152613fe181613fa5565b9050919050565b613ff1816133a6565b82525050565b600060608201905061400c6000830186613fe8565b61401960208301856134a7565b61402660408301846134a7565b949350505050565b604082016000820151614044600085018261350c565b5060208201516140576020850182613525565b50505050565b6140668161351b565b82525050565b600060808201905061408160008301866134a7565b61408e602083018561402e565b61409b606083018461405d565b949350505050565b60006080820190506140b86000830187613fe8565b6140c56020830186613fe8565b6140d260408301856134a7565b6140df60608301846134a7565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061412f57607f821691505b60208210811415614143576141426140e8565b5b50919050565b60008190508160005260206000209050919050565b6000815461416b81614117565b6141758186613315565b9450600182166000811461419057600181146141a2576141d5565b60ff19831686526020860193506141d5565b6141ab85614149565b60005b838110156141cd578154818901526001820191506020810190506141ae565b808801955050505b50505092915050565b600060e0820190506141f3600083018a613fe8565b61420060208301896134a7565b61420d60408301886134a7565b61421a606083018761405d565b614227608083018661405d565b61423460a0830185613fe8565b81810360c0830152614246818461415e565b905098975050505050505050565b60006040820190506142696000830185613fe8565b61427660208301846134a7565b9392505050565b600061428882613534565b6142928185613315565b93506142a2818560208601613550565b6142ab81613583565b840191505092915050565b600060c0820190506142cb600083018961405d565b6142d860208301886134a7565b6142e5604083018761405d565b6142f2606083018661405d565b6142ff6080830185613fe8565b81810360a0830152614311818461427d565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b6000614354602083613315565b915061435f8261431e565b602082019050919050565b6000602082019050818103600083015261438381614347565b9050919050565b60006143958261351b565b91506143a08361351b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143d5576143d4613e3e565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000614416601183613315565b9150614421826143e0565b602082019050919050565b6000602082019050818103600083015261444581614409565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b60006144a8602c83613315565b91506144b38261444c565b604082019050919050565b600060208201905081810360008301526144d78161449b565b9050919050565b600080fd5b6000815190506144f2816139b6565b92915050565b60006040828403121561450e5761450d6144de565b5b6145186040613a4c565b90506000614528848285016144e3565b600083015250602061453c848285016144e3565b60208301525092915050565b60006040828403121561455e5761455d61339c565b5b600061456c848285016144f8565b91505092915050565b600060608201905061458a6000830186613fe8565b61459760208301856134a7565b6145a4604083018461405d565b949350505050565b6000604082840312156145c2576145c16144de565b5b6145cc6040613a4c565b905060006145dc848285016144e3565b60008301525060206145f0848285016144e3565b60208301525092915050565b6000604082840312156146125761461161339c565b5b6000614620848285016145ac565b9150509291505056fea264697066735822122026b259dc06f1a4e7d10f559f1f415464aed8499a2c2e54092b385a102044fc3064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "tasksManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TasksManager)3442"
      },
      {
        "astId": 65,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Auction)38_storage)"
      },
      {
        "astId": 68,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "bytes32_auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProviderBid)47_storage)dyn_storage": {
        "base": "t_struct(ProviderBid)47_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionsManager.ProviderBid[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TasksManager)3442": {
        "encoding": "inplace",
        "label": "contract TasksManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)11": {
        "encoding": "inplace",
        "label": "enum AuctionsManager.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)38_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionsManager.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)38_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)38_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.Auction",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "client",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskDeadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "clientVerification",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 25,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskID",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 27,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "code",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 31,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerBids",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(ProviderBid)47_storage)dyn_storage"
          },
          {
            "astId": 34,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "winnerBid",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(WinnerBid)52_storage"
          },
          {
            "astId": 37,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionState",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(AuctionState)11"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(ProviderBid)47_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.ProviderBid",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 42,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerUpVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerDownVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WinnerBid)52_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.WinnerBid",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 51,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}