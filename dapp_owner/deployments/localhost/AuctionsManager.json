{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskID",
          "type": "bytes32"
        }
      ],
      "name": "TaskIDCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "auctionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_auctionDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taskDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_clientVerification",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "deleteAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteAuctions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ProviderBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionState",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getWinnerBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.WinnerBid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tasksManager",
          "type": "address"
        }
      ],
      "name": "setTasksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xedc038dca51f6abe45b060ff0dc910de0f0cdb66ba3af7eaec4bb4ee9e244a88",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2821274",
    "logsBloom": "0x
    "blockHash": "0x77c1452dc0db3c460372c931826312b05b4e4b8f06114cee6b4b6482075ce7ba",
    "transactionHash": "0xedc038dca51f6abe45b060ff0dc910de0f0cdb66ba3af7eaec4bb4ee9e244a88",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2821274",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "018f5bb2decedbec736996d18858efd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"}],\"name\":\"TaskIDCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"auctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"deleteAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getWinnerBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tasksManager\",\"type\":\"address\"}],\"name\":\"setTasksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TasksManager.sol\\\";\\n\\ncontract AuctionsManager {\\n     address private immutable owner; \\n     TasksManager tasksManager;\\n\\n     enum AuctionState {\\n        Created,\\n        Cancelled, \\n        Finalized\\n    }\\n\\n    struct Auction {\\n        address client;\\n        uint creationTime;\\n        uint auctionDeadline;\\n        uint taskDeadline;\\n        bytes32 clientVerification;\\n        string code;\\n        ProviderBid[] providerBids;\\n        WinnerBid winnerBid;\\n        AuctionState auctionState;   \\n        uint lastUpdateTimestamp;\\n    }\\n\\n    struct ProviderBid {\\n        address provider;\\n        uint bid;\\n        uint providerUpVotes;\\n        uint providerDownVotes;\\n    }\\n\\n    struct WinnerBid {\\n        address provider;\\n        uint bid;\\n    }\\n\\n    mapping (bytes32 => Auction) private auctions;\\n    bytes32[] private bytes32_auctions;\\n\\n    event AuctionCreated(bytes32 auctionID);\\n    event AuctionCancelled(bytes32 auctionID);\\n    event AuctionFinalized(bytes32 auctionID, address provider);\\n    event AuctionDeleted(bytes32 auctionID);\\n    event BidPlaced(bytes32 auctionID, address provider, uint bid);\\n    event TaskIDCreated(bytes32 auctionID, bytes32 taskID);\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOnly(bytes32 _auctionID) {\\n        require(\\n            msg.sender == auctions[_auctionID].client,\\n            \\\"Method can be called only by client.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inAuctionState(bytes32 _auctionID,AuctionState _auctionState) {\\n        require(\\n            auctions[_auctionID].auctionState == _auctionState,\\n            \\\"Invalid AuctionState.\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    modifier existingAuctionOnly(bytes32 _auctionID) {\\n        require(\\n            auctionExists(_auctionID),\\n            \\\"Auction must exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notExistingAuctionOnly(bytes32 _auctionID) {\\n        require(\\n            !auctionExists(_auctionID),\\n            \\\"Auction already exists\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    constructor()  {\\n        owner = msg.sender;\\n    }\\n\\n    function setTasksManager(address payable _tasksManager) public ownerOnly() {\\n        tasksManager = TasksManager(_tasksManager);\\n    }\\n\\n    function createAuction(\\n        bytes32 _auctionID, \\n        uint _auctionDeadline, \\n        uint _taskDeadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public notExistingAuctionOnly(_auctionID)\\n        {\\n        auctions[_auctionID].client = msg.sender;\\n        auctions[_auctionID].creationTime = block.timestamp;\\n        auctions[_auctionID].auctionDeadline = _auctionDeadline;\\n        auctions[_auctionID].taskDeadline = _taskDeadline;\\n        auctions[_auctionID].clientVerification = _clientVerification;\\n        auctions[_auctionID].code = _code;\\n\\n        auctions[_auctionID].auctionState = AuctionState.Created;\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        bytes32_auctions.push(_auctionID);\\n        emit AuctionCreated(_auctionID);\\n    }\\n\\n    function cancelAuction(bytes32 _auctionID) public clientOnly(_auctionID) inAuctionState(_auctionID, AuctionState.Created) existingAuctionOnly(_auctionID) {\\n        auctions[_auctionID].auctionState = AuctionState.Cancelled;\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        emit AuctionCancelled(_auctionID);\\n     }\\n\\n    function bid(bytes32 _auctionID, uint _bid) public  inAuctionState(_auctionID, AuctionState.Created)  existingAuctionOnly(_auctionID) {\\n        require(msg.sender != auctions[_auctionID].client, \\\"Client can't bid to this auction\\\"); \\n        require(\\n            (block.timestamp <= auctions[_auctionID].creationTime + auctions[_auctionID].auctionDeadline),\\n            \\\"Time has expired.\\\"\\n        );\\n        uint providerIndex = 0;\\n        if(auctions[_auctionID].providerBids.length != 0)\\n        {    while(auctions[_auctionID].providerBids[providerIndex].provider != msg.sender)\\n            {\\n                providerIndex++;\\n                if(providerIndex > auctions[_auctionID].providerBids.length)\\n                    break;\\n            }\\n            if (providerIndex <= auctions[_auctionID].providerBids.length)\\n            {\\n                require(\\n                _bid < auctions[_auctionID].providerBids[providerIndex].bid,\\n                \\\"Bid is not lower than than the previous one.\\\"\\n                );\\n            }\\n        }\\n        ProviderBid memory currentBid;\\n        currentBid.provider = msg.sender;\\n        currentBid.bid = _bid;\\n        currentBid.providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n        currentBid.providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n        auctions[_auctionID].providerBids.push(currentBid);\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        emit BidPlaced(_auctionID, msg.sender, _bid);\\n     }\\n\\n    function finalize(bytes32 _auctionID, address _provider) public payable clientOnly(_auctionID) inAuctionState(_auctionID, AuctionState.Created) existingAuctionOnly(_auctionID) {\\n        uint providerIndex = 0;\\n        if (auctions[_auctionID].providerBids.length == 0)\\n            revert(\\\"Auction has no bids.\\\");\\n        while(auctions[_auctionID].providerBids[providerIndex].provider != _provider)\\n        {\\n            providerIndex++;\\n            if(providerIndex >= auctions[_auctionID].providerBids.length)\\n                break;\\n        }\\n        if(providerIndex >= auctions[_auctionID].providerBids.length)\\n         revert(\\\"Wrong provider address\\\");\\n        WinnerBid memory _winnerBid;\\n        _winnerBid.provider = _provider;\\n        _winnerBid.bid = auctions[_auctionID].providerBids[providerIndex].bid;\\n        require (msg.value >= _winnerBid.bid * 2, \\\"Client collateral is not enough\\\");\\n        auctions[_auctionID].winnerBid = _winnerBid;\\n        Auction storage currentAuction = auctions[_auctionID];\\n        auctions[_auctionID].auctionState = AuctionState.Finalized;\\n        auctions[_auctionID].lastUpdateTimestamp = block.timestamp;\\n        emit AuctionFinalized(_auctionID, _provider);\\n        bytes32 taskID = keccak256(abi.encode(currentAuction.client, _winnerBid, block.timestamp));\\n        uint clientCollateral = getClientCollateral(_auctionID);\\n        tasksManager.createTask{value: clientCollateral}(taskID, currentAuction.client, _provider,  _winnerBid.bid, currentAuction.taskDeadline, currentAuction.clientVerification,currentAuction.code);\\n        emit TaskIDCreated(_auctionID, taskID);\\n    }\\n\\n    function getClientCollateral(bytes32 _auctionID) private view returns (uint) {\\n        return auctions[_auctionID].winnerBid.bid * 2;\\n    }\\n\\n    function auctionExists(bytes32 _auctionID) public view returns (bool) {\\n            return (auctions[_auctionID].client != address(0));\\n        }\\n\\n    function deleteAuctions() public ownerOnly { \\n        for (uint i = bytes32_auctions.length; i > 0; i--)\\n        {\\n            bytes32 _auctionID = bytes32_auctions[i-1];\\n            if ((auctions[_auctionID].auctionState == AuctionState.Finalized \\n            || auctions[_auctionID].auctionState == AuctionState.Cancelled)\\n            && block.timestamp > auctions[_auctionID].lastUpdateTimestamp + 60)\\n            {\\n                delete(auctions[_auctionID]);\\n                bytes32_auctions[i-1] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                emit AuctionDeleted(_auctionID);\\n            }\\n        }\\n    }\\n\\n    function deleteAuction(bytes32 _auctionID) public ownerOnly existingAuctionOnly(_auctionID) {\\n        delete(auctions[_auctionID]);\\n        for (uint i=0; i < bytes32_auctions.length; i++)\\n        {\\n            if (bytes32_auctions[i] == _auctionID)\\n            {\\n                bytes32_auctions[i] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                break;\\n            }\\n        }\\n        emit AuctionDeleted(_auctionID);\\n    }\\n\\n    function getActiveAuctions() ownerOnly public view returns (uint256) {\\n        return bytes32_auctions.length;\\n    }\\n\\n    function getAuctionBids(bytes32 _auctionID) public view returns(ProviderBid[] memory) {\\n        return auctions[_auctionID].providerBids;\\n    }\\n\\n    function getWinnerBid(bytes32 _auctionID) public view returns(WinnerBid memory) {\\n        return auctions[_auctionID].winnerBid;\\n    }\\n\\n    function getAuctionState(bytes32 _auctionID) public view returns(string memory) {\\n        string memory ret = \\\"\\\";\\n        if (auctions[_auctionID].auctionState == AuctionState.Created) \\n            ret = \\\"Created\\\";\\n        else if (auctions[_auctionID].auctionState == AuctionState.Cancelled) \\n            ret = \\\"Cancelled\\\";\\n        else if (auctions[_auctionID].auctionState == AuctionState.Finalized) \\n            ret = \\\"Finalized\\\";\\n        else \\n            ret = \\\"Error\\\";\\n        return ret;\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return owner;\\n    }\\n    \\n    function getTasksManager() public view returns(address) {\\n        return address(tasksManager);\\n    }\\n}\",\"keccak256\":\"0x06150c3ecdc897a8b6bdcafe085eb54f536e28b15758a9122809bac85b1e7f96\",\"license\":\"GPL-3.0\"},\"contracts/TasksManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract TasksManager {\\n\\n    address private immutable owner; \\n    address private auctionAddress;\\n\\n    enum TaskState {\\n        Created,\\n        Cancelled, \\n        Active,\\n        CompletedSuccessfully,\\n        CompletedUnsuccessfully,\\n        Invalid, \\n        ResultsReceivedSuccessfully,\\n        ResultsReceivedUnsuccessfully\\n    }\\n\\n    enum PaymentState {\\n        Initialized,\\n        Pending,\\n        Completed \\n    }\\n\\n    struct Task {\\n        address payable client; \\n        address payable provider;\\n        uint providerCollateral;\\n        uint clientCollateral; \\n        uint deadline;\\n        uint price;\\n        uint duration;\\n        uint cost;       \\n        uint activationTime;\\n        uint timeResultProvided;\\n        uint timeResultReceived;\\n        string code;\\n        string results;\\n        bytes32 clientVerification;\\n        uint lastUpdateTimestamp;\\n        TaskState taskState;\\n        PaymentState paymentState;\\n    }\\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping (bytes32 => Task) private tasks;\\n    bytes32[] private bytes32_tasks;\\n    mapping(address => providerRating) private performance;\\n\\n    //Events\\n    event TaskCreated(bytes32 taskID);\\n    event TaskActivated(bytes32 taskID);\\n    event TaskCompletedSuccessfully(bytes32 taskID);\\n    event TaskCompletedUnsuccessfully(bytes32 taskID);\\n    event TaskReceivedResultsSuccessfully(bytes32 taskID);\\n    event TaskReceivedResultsUnsuccessfully(bytes32 taskID);\\n    event TaskCancelled(bytes32 taskID);\\n    event TaskInvalidated(bytes32 taskID);\\n    event PaymentPending(bytes32 taskID, uint payment);\\n    event PaymentCompleted(bytes32 taskID);\\n    event TransferMadeToClient(address client, uint amount);\\n    event TransferMadeToProvider(address provider, uint amount);\\n    event ProviderUpvoted(address provider, bytes32 taskID);\\n    event ProviderDownvoted(address provider, bytes32 taskID);\\n    event TaskDeleted(bytes32 taskID);\\n\\n    //Modifiers\\n\\n    modifier ownerOnly() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Method can be called only by owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auctionOnly() {\\n        require(\\n            msg.sender == auctionAddress,\\n            \\\"Method can be called only by auction.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOnly(bytes32 _taskID) {\\n        require(\\n            msg.sender == tasks[_taskID].client,\\n            \\\"Method can be called only by client.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier providerOnly(bytes32 _taskID) {\\n        require(\\n            msg.sender == tasks[_taskID].provider,\\n            \\\"Method can be called only by provider.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier clientOrProviderOnly(bytes32 _taskID) {\\n        require(\\n            (msg.sender == tasks[_taskID].client) || (msg.sender == tasks[_taskID].provider) || (msg.sender == owner),\\n            \\\"Method can be called only by client, provider or the owner.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inTaskState(bytes32 _taskID,TaskState _taskState) {\\n        require(\\n            tasks[_taskID].taskState == _taskState,\\n            \\\"Invalid TaskState.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier inPaymentState(bytes32 _taskID,PaymentState _paymentState) {\\n        require(\\n            tasks[_taskID].paymentState == _paymentState,\\n            \\\"Invalid PaymentState.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requiresValue(uint amount) {\\n        require(\\n            msg.value == amount,\\n            \\\"Value sent is not the expected\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier registeredTaskOnly(bytes32 _taskID) {\\n        require(\\n            isRegistered(_taskID),\\n            \\\"Task must be registered\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notRegisteredTaskOnly(bytes32 _taskID) {\\n        require(\\n            !isRegistered(_taskID),\\n            \\\"Task already exists\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function createTask(\\n        bytes32 _taskID, \\n        address _client,\\n        address _provider,\\n        uint _price,\\n        uint _deadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public payable notRegisteredTaskOnly(_taskID) auctionOnly\\n    {\\n        require (msg.value >= _price * 2, \\\"Client collateral is not enough\\\");\\n        tasks[_taskID].client = payable (_client);\\n        tasks[_taskID].clientCollateral = msg.value;\\n        tasks[_taskID].provider = payable(_provider);\\n        tasks[_taskID].providerCollateral = _price * 10;\\n        tasks[_taskID].price = _price;\\n        tasks[_taskID].deadline = _deadline;\\n        tasks[_taskID].clientVerification = _clientVerification;\\n        tasks[_taskID].code = _code;\\n        tasks[_taskID].taskState = TaskState.Created;\\n        tasks[_taskID].paymentState = PaymentState.Initialized;\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        bytes32_tasks.push(_taskID);\\n        emit TaskCreated(_taskID);\\n    }\\n\\n    //Cancel\\n    //TaskState -> Cancel\\n    //refunds payment to client\\n    //can be called only by client and only if contract hasnt been activated by provider\\n\\n    function cancelTask(bytes32 _taskID) public clientOnly(_taskID) inTaskState(_taskID,TaskState.Created) \\n    {\\n        tasks[_taskID].taskState = TaskState.Cancelled;\\n        tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral);\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TransferMadeToClient(tasks[_taskID].client,tasks[_taskID].clientCollateral);\\n        emit TaskCancelled(_taskID);\\n    }\\n\\n    function invalidateTask(bytes32 _taskID) public  clientOnly(_taskID) inTaskState(_taskID, TaskState.Active) \\n    {\\n        require(\\n            (block.timestamp > tasks[_taskID].activationTime + tasks[_taskID].deadline),\\n            \\\"Time has not expired.\\\"\\n        );\\n        tasks[_taskID].taskState = TaskState.Invalid;\\n  \\n        tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n        emit TaskInvalidated(_taskID);\\n    }\\n\\n    // Activate\\n    // TaskState -> Activated\\n    // can be called only by provider to start the process\\n\\n    function activateTask(bytes32 _taskID) public payable providerOnly(_taskID) inTaskState(_taskID,TaskState.Created) registeredTaskOnly(_taskID)\\n    {\\n        require (msg.value >= tasks[_taskID].providerCollateral, \\\"Provider collateral is not enough\\\");\\n        tasks[_taskID].activationTime = block.timestamp;\\n        tasks[_taskID].providerCollateral = msg.value;\\n        tasks[_taskID].taskState = TaskState.Active;\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit TaskActivated(_taskID);\\n    }\\n\\n    // Complete\\n    // TaskState -> Completed\\n    // can be called only by provider when the computation is over\\n\\n    //called by docker container\\n    function completeTask(bytes32 _taskID,string memory ver,  uint _duration, uint _timeReceivedProvider) public providerOnly(_taskID) inTaskState(_taskID,TaskState.Active) \\n    {\\n        tasks[_taskID].timeResultProvided = _timeReceivedProvider;\\n        tasks[_taskID].duration = _duration;\\n        if (InTime(_taskID) && CorrectVerification(_taskID, ver)){\\n            tasks[_taskID].cost = tasks[_taskID].price * tasks[_taskID].duration;\\n            tasks[_taskID].taskState = TaskState.CompletedSuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskCompletedSuccessfully(_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n            tasks[_taskID].taskState = TaskState.CompletedUnsuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskCompletedUnsuccessfully(_taskID);\\n        }\\n    }\\n\\n\\n    //called by provider\\n    function sendResults(bytes32 _taskID, string memory _results) public providerOnly(_taskID) inTaskState(_taskID,TaskState.CompletedSuccessfully) inPaymentState(_taskID,PaymentState.Initialized){\\n        tasks[_taskID].timeResultReceived = block.timestamp;\\n        tasks[_taskID].results = _results;\\n        if (ProviderTime(_taskID)){\\n            if (tasks[_taskID].cost <= tasks[_taskID].clientCollateral) {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].cost + tasks[_taskID].providerCollateral);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost + tasks[_taskID].providerCollateral);\\n                tasks[_taskID].client.transfer(tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n                emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n                tasks[_taskID].paymentState = PaymentState.Completed;\\n                tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n                emit PaymentCompleted(_taskID);                \\n            }\\n            else {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].clientCollateral+tasks[_taskID].providerCollateral);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].clientCollateral+tasks[_taskID].providerCollateral);\\n                tasks[_taskID].paymentState = PaymentState.Pending;\\n                tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n                emit PaymentPending(_taskID,tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n            }\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedSuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskReceivedResultsSuccessfully(_taskID);\\n            performance[tasks[_taskID].provider].upVotes += 1;\\n            emit ProviderUpvoted(tasks[_taskID].provider,_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].clientCollateral + tasks[_taskID].providerCollateral);\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedUnsuccessfully;\\n            tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n            emit TaskReceivedResultsUnsuccessfully(_taskID);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n        }\\n    }\\n\\n\\n    function completePayment(bytes32 _taskID) public payable clientOnly(_taskID) inTaskState(_taskID,TaskState.ResultsReceivedSuccessfully) inPaymentState(_taskID,PaymentState.Pending) requiresValue(tasks[_taskID].cost - tasks[_taskID].clientCollateral) {\\n        require (tasks[_taskID].paymentState == PaymentState.Pending, \\\"Payment not needed\\\");\\n        tasks[_taskID].provider.transfer(msg.value);\\n        emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].cost - tasks[_taskID].clientCollateral);\\n        tasks[_taskID].paymentState = PaymentState.Completed;\\n        tasks[_taskID].lastUpdateTimestamp = block.timestamp;\\n        emit PaymentCompleted(_taskID);\\n    }\\n\\n    function setAuctionsManager(address _auctionAddress) public ownerOnly {\\n        auctionAddress = _auctionAddress;\\n    }\\n\\n    //add time difference between lastUpdateTimestamp and now\\n    function deleteTasks() public ownerOnly { \\n        for (uint i = bytes32_tasks.length; i > 0; i--)\\n        {\\n            bytes32 _taskID = bytes32_tasks[i-1];\\n            if ((tasks[_taskID].taskState == TaskState.ResultsReceivedSuccessfully && tasks[_taskID].paymentState == PaymentState.Completed \\n            || tasks[_taskID].taskState == TaskState.ResultsReceivedUnsuccessfully \\n            || tasks[_taskID].taskState == TaskState.CompletedUnsuccessfully \\n            || tasks[_taskID].taskState == TaskState.Cancelled \\n            || tasks[_taskID].taskState == TaskState.Invalid) \\n            && block.timestamp > tasks[_taskID].lastUpdateTimestamp + 60) \\n            //TO ADD time difference between lastUpdateTimestamp eg 24h instead of 1 min\\n            {\\n                delete(tasks[_taskID]);\\n                bytes32_tasks[i-1] = bytes32_tasks[bytes32_tasks.length - 1];\\n                bytes32_tasks.pop();\\n                emit TaskDeleted(_taskID);\\n            }\\n        }\\n    }\\n\\n    function deleteTask(bytes32 _taskID) public ownerOnly registeredTaskOnly(_taskID) {\\n        delete(tasks[_taskID]);\\n        for (uint i=0; i < bytes32_tasks.length; i++)\\n        {\\n            if (bytes32_tasks[i] == _taskID)\\n            {\\n                bytes32_tasks[i] = bytes32_tasks[bytes32_tasks.length - 1];\\n                bytes32_tasks.pop();\\n                break;\\n            }\\n        }\\n        emit TaskDeleted(_taskID);\\n    }\\n\\n    function getActiveTasks() ownerOnly public view returns (uint256) {\\n        return bytes32_tasks.length;\\n    }\\n    //Functions -> Private/internal\\n    function InTime(bytes32 _taskID) private view returns (bool){\\n        return (tasks[_taskID].timeResultProvided <= tasks[_taskID].activationTime + tasks[_taskID].deadline) && (tasks[_taskID].duration <= tasks[_taskID].deadline);  \\n    }\\n\\n    function ProviderTime(bytes32 _taskID) private view returns (bool) {\\n        return (tasks[_taskID].timeResultReceived <= tasks[_taskID].timeResultProvided + 600) && (tasks[_taskID].timeResultReceived >= tasks[_taskID].timeResultProvided) && (tasks[_taskID].timeResultReceived >= tasks[_taskID].activationTime + tasks[_taskID].duration) && (tasks[_taskID].timeResultProvided >= tasks[_taskID].activationTime + tasks[_taskID].duration); //gives 600 sec to provider to send the results, time received must be greater than time provided\\n    }\\n\\n    function CorrectVerification(bytes32 _taskID, string memory ver) private view returns (bool){\\n        return (tasks[_taskID].clientVerification == keccak256(abi.encodePacked(ver)));\\n    }\\n\\n    function isRegistered(bytes32 _taskID) public view returns (bool) {\\n        return (tasks[_taskID].client != address(0));\\n    }\\n\\n    function getPerformance(address provider) public view returns (providerRating memory) {\\n        return performance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getCode(bytes32 _taskID) public view returns (string memory) {\\n        return tasks[_taskID].code;\\n    }\\n\\n \\n    //Getters - some to be deleted\\n    function getActivationTime(bytes32 _taskID) public view returns (uint)\\n    {\\n        return tasks[_taskID].activationTime;\\n    }\\n\\n    function getLastUpdateTimestamp(bytes32 _taskID) public view returns (uint)\\n    {\\n        return tasks[_taskID].lastUpdateTimestamp;\\n    }\\n\\n    function getResults(bytes32 _taskID) public clientOnly(_taskID) inTaskState(_taskID,TaskState.ResultsReceivedSuccessfully) inPaymentState(_taskID,PaymentState.Completed) view returns (string memory)  {\\n        return tasks[_taskID].results;\\n    }\\n\\n    function getTaskState(bytes32 _taskID) public clientOrProviderOnly(_taskID) view returns (string memory)\\n    {\\n        string memory ret = \\\"\\\";\\n        if (tasks[_taskID].taskState == TaskState.Created) \\n            ret = \\\"Created\\\";\\n        else if (tasks[_taskID].taskState == TaskState.Cancelled)\\n            ret = \\\"Cancelled\\\";\\n        else if (tasks[_taskID].taskState == TaskState.Active)\\n            ret = \\\"Active\\\";\\n        else if (tasks[_taskID].taskState == TaskState.CompletedSuccessfully)\\n            ret = \\\"CompletedSuccessfully\\\";\\n        else if (tasks[_taskID].taskState == TaskState.CompletedUnsuccessfully)\\n            ret = \\\"CompletedUnsuccessfully\\\";  \\n        else if (tasks[_taskID].taskState == TaskState.Invalid)\\n            ret = \\\"Invalid\\\";  \\n        else if (tasks[_taskID].taskState == TaskState.ResultsReceivedSuccessfully)\\n            ret = \\\"ResultsReceivedSuccessfully\\\";\\n        else if (tasks[_taskID].taskState == TaskState.ResultsReceivedUnsuccessfully)\\n            ret = \\\"ResultsReceivedUnsuccessfully\\\";\\n        else \\n            ret = \\\"Error\\\";\\n        return ret; \\n    }\\n\\n    function getPaymentState(bytes32 _taskID) public clientOrProviderOnly(_taskID) view returns (string memory)\\n    {\\n        string memory ret = \\\"\\\";\\n        if (tasks[_taskID].paymentState == PaymentState.Initialized) \\n            ret = \\\"Initialized\\\";\\n        else if (tasks[_taskID].paymentState == PaymentState.Pending) \\n            ret = \\\"Pending\\\";\\n        else if (tasks[_taskID].paymentState == PaymentState.Completed) \\n            ret = \\\"Completed\\\";\\n        else \\n            ret = \\\"Error\\\";  \\n        return ret; \\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getAuctionAddress() public view returns (address) {\\n        return auctionAddress;\\n    }\\n\\n    function getTask(bytes32 _taskID) public view returns (Task memory) {\\n        return tasks[_taskID];\\n    }\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x7522c76b6677d6af9e3f77729bdf685e94ec3f4f2daec8aa2c32d068c0bbeeba\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c6132536100826000396000818161035801528181610e670152818161121b01528181611d570152611e8001526132536000f3fe6080604052600436106100dc5760003560e01c80639b680e7d1161007f578063cf44b5d511610059578063cf44b5d51461029a578063da051b9b146102c5578063e0a7632414610302578063e15155631461032b576100dc565b80639b680e7d146101f7578063a884741314610234578063cd772f5c14610271576100dc565b80634df2ca18116100bb5780634df2ca181461014f5780637a5a69e314610166578063893d20e8146101a35780638fd4fcc7146101ce576100dc565b80629c3f8f146100e157806312e1d7241461010a5780633ef4d13014610126575b600080fd5b3480156100ed57600080fd5b50610108600480360381019061010391906121bc565b610356565b005b610124600480360381019061011f9190612247565b610600565b005b34801561013257600080fd5b5061014d600480360381019061014891906121bc565b610c54565b005b34801561015b57600080fd5b50610164610e65565b005b34801561017257600080fd5b5061018d600480360381019061018891906121bc565b6111a8565b60405161019a91906122a2565b60405180910390f35b3480156101af57600080fd5b506101b8611217565b6040516101c591906122cc565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f09190612463565b61123f565b005b34801561020357600080fd5b5061021e600480360381019061021991906121bc565b611437565b60405161022b919061261c565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906121bc565b611520565b60405161026891906126c6565b60405180910390f35b34801561027d57600080fd5b50610298600480360381019061029391906126e8565b611720565b005b3480156102a657600080fd5b506102af611d53565b6040516102bc9190612737565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e791906121bc565b611dee565b6040516102f99190612781565b60405180910390f35b34801561030e57600080fd5b50610329600480360381019061032491906127da565b611e7e565b005b34801561033757600080fd5b50610340611f4f565b60405161034d91906122cc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103db90612879565b60405180910390fd5b806103ee816111a8565b61042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610424906128e5565b60405180910390fd5b60016000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160006104989190611fa7565b6006820160006104a89190611fe7565b60078201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550506009820160006101000a81549060ff0219169055600a820160009055505060005b6002805490508110156105c457826002828154811061052157610520612905565b5b906000526020600020015414156105b157600260016002805490506105469190612963565b8154811061055757610556612905565b5b90600052602060002001546002828154811061057657610575612905565b5b9060005260206000200181905550600280548061059657610595612997565b5b600190038181906000526020600020016000905590556105c4565b80806105bc906129c6565b9150506104ff565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15826040516105f49190612a1e565b60405180910390a15050565b816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c90612aab565b60405180910390fd5b8260008060028111156106bb576106ba612acb565b5b6001600084815260200190815260200160002060090160009054906101000a900460ff1660028111156106f1576106f0612acb565b5b14610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890612b46565b60405180910390fd5b8461073b816111a8565b61077a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610771906128e5565b60405180910390fd5b600080600160008981526020019081526020016000206006018054905014156107d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cf90612bb2565b60405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660016000898152602001908152602001600020600601828154811061081857610817612905565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461089d578080610870906129c6565b915050600160008881526020019081526020016000206006018054905081106108985761089d565b6107d9565b600160008881526020019081526020016000206006018054905081106108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ef90612c1e565b60405180910390fd5b61090061200b565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600089815260200190815260200160002060060182815481106109605761095f612905565b5b9060005260206000209060040201600101548160200181815250506002816020015161098c9190612c3e565b3410156109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590612ce4565b60405180910390fd5b80600160008a815260200190815260200160002060070160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008a815260200190815260200160002090506002600160008b815260200190815260200160002060090160006101000a81548160ff02191690836002811115610a8a57610a89612acb565b5b021790555042600160008b8152602001908152602001600020600a01819055507f6898e0d44e43d4e52763adfb1a021d99067e84ba3cc756ea838142ac5f93a9428989604051610adb929190612d04565b60405180910390a160008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610b1e93929190612d2d565b6040516020818303038152906040528051906020012090506000610b418b611f78565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e896020015189600301548a600401548b6005016040518963ffffffff1660e01b8152600401610bdc9796959493929190612e5a565b6000604051808303818588803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b50505050507f6f8e99fbce606417155943e39f235814e905d7ecda831d34d0632d17e9cbf7038b83604051610c3f929190612ed0565b60405180910390a15050505050505050505050565b806001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf090612aab565b60405180910390fd5b816000806002811115610d0f57610d0e612acb565b5b6001600084815260200190815260200160002060090160009054906101000a900460ff166002811115610d4557610d44612acb565b5b14610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c90612b46565b60405180910390fd5b83610d8f816111a8565b610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc5906128e5565b60405180910390fd5b600180600087815260200190815260200160002060090160006101000a81548160ff02191690836002811115610e0757610e06612acb565b5b02179055504260016000878152602001908152602001600020600a01819055507fd88fab4b08bf76f15cf2d6e03e382acf1edd6790ab82967e406abac37db2028885604051610e569190612a1e565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ef3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eea90612879565b60405180910390fd5b600060028054905090505b60008111156111a55760006002600183610f189190612963565b81548110610f2957610f28612905565b5b90600052602060002001549050600280811115610f4957610f48612acb565b5b6001600083815260200190815260200160002060090160009054906101000a900460ff166002811115610f7f57610f7e612acb565b5b1480610fd2575060016002811115610f9a57610f99612acb565b5b6001600083815260200190815260200160002060090160009054906101000a900460ff166002811115610fd057610fcf612acb565b5b145b8015610fff5750603c60016000838152602001908152602001600020600a0154610ffc9190612ef9565b42115b156111915760016000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055600482016000905560058201600061106f9190611fa7565b60068201600061107f9190611fe7565b60078201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550506009820160006101000a81549060ff0219169055600a8201600090555050600260016002805490506110e79190612963565b815481106110f8576110f7612905565b5b906000526020600020015460026001846111129190612963565b8154811061112357611122612905565b5b9060005260206000200181905550600280548061114357611142612997565b5b600190038181906000526020600020016000905590557f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516111889190612a1e565b60405180910390a15b50808061119d90612f4f565b915050610efe565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b84611249816111a8565b15611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612fc5565b60405180910390fd5b336001600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000888152602001908152602001600020600101819055508460016000888152602001908152602001600020600201819055508360016000888152602001908152602001600020600301819055508260016000888152602001908152602001600020600401819055508160016000888152602001908152602001600020600501908051906020019061137492919061203b565b5060006001600088815260200190815260200160002060090160006101000a81548160ff021916908360028111156113af576113ae612acb565b5b02179055504260016000888152602001908152602001600020600a018190555060028690806001815401808255809150506001900390600052602060002001600090919091909150557f2a66b5a320edcb6b7fba849fd4173d545603571b82a650ae5ef95f12e0dada9e866040516114279190612a1e565b60405180910390a1505050505050565b606060016000838152602001908152602001600020600601805480602002602001604051908101604052809291908181526020016000905b8282101561151557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061146f565b505050509050919050565b606060006040518060200160405280600081525090506000600281111561154a57611549612acb565b5b6001600085815260200190815260200160002060090160009054906101000a900460ff1660028111156115805761157f612acb565b5b14156115c3576040518060400160405280600781526020017f43726561746564000000000000000000000000000000000000000000000000008152509050611717565b600160028111156115d7576115d6612acb565b5b6001600085815260200190815260200160002060090160009054906101000a900460ff16600281111561160d5761160c612acb565b5b1415611650576040518060400160405280600981526020017f43616e63656c6c656400000000000000000000000000000000000000000000008152509050611716565b60028081111561166357611662612acb565b5b6001600085815260200190815260200160002060090160009054906101000a900460ff16600281111561169957611698612acb565b5b14156116dc576040518060400160405280600981526020017f46696e616c697a656400000000000000000000000000000000000000000000008152509050611715565b6040518060400160405280600581526020017f4572726f7200000000000000000000000000000000000000000000000000000081525090505b5b5b80915050919050565b81600080600281111561173657611735612acb565b5b6001600084815260200190815260200160002060090160009054906101000a900460ff16600281111561176c5761176b612acb565b5b146117ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a390612b46565b60405180910390fd5b836117b6816111a8565b6117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec906128e5565b60405180910390fd5b6001600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561189a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189190613031565b60405180910390fd5b600160008681526020019081526020016000206002015460016000878152602001908152602001600020600101546118d29190612ef9565b421115611914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190b9061309d565b60405180910390fd5b600080600160008881526020019081526020016000206006018054905014611a99575b3373ffffffffffffffffffffffffffffffffffffffff1660016000888152602001908152602001600020600601828154811061197657611975612905565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119fc5780806119ce906129c6565b91505060016000878152602001908152602001600020600601805490508111156119f7576119fc565b611937565b60016000878152602001908152602001600020600601805490508111611a9857600160008781526020019081526020016000206006018181548110611a4457611a43612905565b5b9060005260206000209060040201600101548510611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e9061312f565b60405180910390fd5b5b5b611aa16120c1565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611b3c91906122cc565b604080518083038186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8b91906131b9565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611bf191906122cc565b604080518083038186803b158015611c0857600080fd5b505afa158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4091906131b9565b602001518160600181815250506001600088815260200190815260200160002060060181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550504260016000898152602001908152602001600020600a01819055507f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c66873388604051611d42939291906131e6565b60405180910390a150505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dda90612879565b60405180910390fd5b600280549050905090565b611df661200b565b600160008381526020019081526020016000206007016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0390612879565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026001600084815260200190815260200160002060070160010154611fa09190612c3e565b9050919050565b508054611fb390612d93565b6000825580601f10611fc55750611fe4565b601f016020900490600052602060002090810190611fe391906120ff565b5b50565b5080546000825560040290600052602060002090810190612008919061211c565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b82805461204790612d93565b90600052602060002090601f01602090048101928261206957600085556120b0565b82601f1061208257805160ff19168380011785556120b0565b828001600101855582156120b0579182015b828111156120af578251825591602001919060010190612094565b5b5090506120bd91906120ff565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b80821115612118576000816000905550600101612100565b5090565b5b8082111561216e57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090555060040161211d565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61219981612186565b81146121a457600080fd5b50565b6000813590506121b681612190565b92915050565b6000602082840312156121d2576121d161217c565b5b60006121e0848285016121a7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612214826121e9565b9050919050565b61222481612209565b811461222f57600080fd5b50565b6000813590506122418161221b565b92915050565b6000806040838503121561225e5761225d61217c565b5b600061226c858286016121a7565b925050602061227d85828601612232565b9150509250929050565b60008115159050919050565b61229c81612287565b82525050565b60006020820190506122b76000830184612293565b92915050565b6122c681612209565b82525050565b60006020820190506122e160008301846122bd565b92915050565b6000819050919050565b6122fa816122e7565b811461230557600080fd5b50565b600081359050612317816122f1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61237082612327565b810181811067ffffffffffffffff8211171561238f5761238e612338565b5b80604052505050565b60006123a2612172565b90506123ae8282612367565b919050565b600067ffffffffffffffff8211156123ce576123cd612338565b5b6123d782612327565b9050602081019050919050565b82818337600083830152505050565b6000612406612401846123b3565b612398565b90508281526020810184848401111561242257612421612322565b5b61242d8482856123e4565b509392505050565b600082601f83011261244a5761244961231d565b5b813561245a8482602086016123f3565b91505092915050565b600080600080600060a0868803121561247f5761247e61217c565b5b600061248d888289016121a7565b955050602061249e88828901612308565b94505060406124af88828901612308565b93505060606124c0888289016121a7565b925050608086013567ffffffffffffffff8111156124e1576124e0612181565b5b6124ed88828901612435565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61252f81612209565b82525050565b61253e816122e7565b82525050565b60808201600082015161255a6000850182612526565b50602082015161256d6020850182612535565b5060408201516125806040850182612535565b5060608201516125936060850182612535565b50505050565b60006125a58383612544565b60808301905092915050565b6000602082019050919050565b60006125c9826124fa565b6125d38185612505565b93506125de83612516565b8060005b8381101561260f5781516125f68882612599565b9750612601836125b1565b9250506001810190506125e2565b5085935050505092915050565b6000602082019050818103600083015261263681846125be565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561267857808201518184015260208101905061265d565b83811115612687576000848401525b50505050565b60006126988261263e565b6126a28185612649565b93506126b281856020860161265a565b6126bb81612327565b840191505092915050565b600060208201905081810360008301526126e0818461268d565b905092915050565b600080604083850312156126ff576126fe61217c565b5b600061270d858286016121a7565b925050602061271e85828601612308565b9150509250929050565b612731816122e7565b82525050565b600060208201905061274c6000830184612728565b92915050565b6040820160008201516127686000850182612526565b50602082015161277b6020850182612535565b50505050565b60006040820190506127966000830184612752565b92915050565b60006127a7826121e9565b9050919050565b6127b78161279c565b81146127c257600080fd5b50565b6000813590506127d4816127ae565b92915050565b6000602082840312156127f0576127ef61217c565b5b60006127fe848285016127c5565b91505092915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000612863602383612649565b915061286e82612807565b604082019050919050565b6000602082019050818103600083015261289281612856565b9050919050565b7f41756374696f6e206d7573742065786973740000000000000000000000000000600082015250565b60006128cf601283612649565b91506128da82612899565b602082019050919050565b600060208201905081810360008301526128fe816128c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061296e826122e7565b9150612979836122e7565b92508282101561298c5761298b612934565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006129d1826122e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a0457612a03612934565b5b600182019050919050565b612a1881612186565b82525050565b6000602082019050612a336000830184612a0f565b92915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c7920627920636c6960008201527f656e742e00000000000000000000000000000000000000000000000000000000602082015250565b6000612a95602483612649565b9150612aa082612a39565b604082019050919050565b60006020820190508181036000830152612ac481612a88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f496e76616c69642041756374696f6e53746174652e0000000000000000000000600082015250565b6000612b30601583612649565b9150612b3b82612afa565b602082019050919050565b60006020820190508181036000830152612b5f81612b23565b9050919050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000612b9c601483612649565b9150612ba782612b66565b602082019050919050565b60006020820190508181036000830152612bcb81612b8f565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000612c08601683612649565b9150612c1382612bd2565b602082019050919050565b60006020820190508181036000830152612c3781612bfb565b9050919050565b6000612c49826122e7565b9150612c54836122e7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c8d57612c8c612934565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420656e6f75676800600082015250565b6000612cce601f83612649565b9150612cd982612c98565b602082019050919050565b60006020820190508181036000830152612cfd81612cc1565b9050919050565b6000604082019050612d196000830185612a0f565b612d2660208301846122bd565b9392505050565b6000608082019050612d4260008301866122bd565b612d4f6020830185612752565b612d5c6060830184612728565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612dab57607f821691505b60208210811415612dbf57612dbe612d64565b5b50919050565b60008190508160005260206000209050919050565b60008154612de781612d93565b612df18186612649565b94506001821660008114612e0c5760018114612e1e57612e51565b60ff1983168652602086019350612e51565b612e2785612dc5565b60005b83811015612e4957815481890152600182019150602081019050612e2a565b808801955050505b50505092915050565b600060e082019050612e6f600083018a612a0f565b612e7c60208301896122bd565b612e8960408301886122bd565b612e966060830187612728565b612ea36080830186612728565b612eb060a0830185612a0f565b81810360c0830152612ec28184612dda565b905098975050505050505050565b6000604082019050612ee56000830185612a0f565b612ef26020830184612a0f565b9392505050565b6000612f04826122e7565b9150612f0f836122e7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f4457612f43612934565b5b828201905092915050565b6000612f5a826122e7565b91506000821415612f6e57612f6d612934565b5b600182039050919050565b7f41756374696f6e20616c72656164792065786973747300000000000000000000600082015250565b6000612faf601683612649565b9150612fba82612f79565b602082019050919050565b60006020820190508181036000830152612fde81612fa2565b9050919050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b600061301b602083612649565b915061302682612fe5565b602082019050919050565b6000602082019050818103600083015261304a8161300e565b9050919050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000613087601183612649565b915061309282613051565b602082019050919050565b600060208201905081810360008301526130b68161307a565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000613119602c83612649565b9150613124826130bd565b604082019050919050565b600060208201905081810360008301526131488161310c565b9050919050565b600080fd5b600081519050613163816122f1565b92915050565b60006040828403121561317f5761317e61314f565b5b6131896040612398565b9050600061319984828501613154565b60008301525060206131ad84828501613154565b60208301525092915050565b6000604082840312156131cf576131ce61217c565b5b60006131dd84828501613169565b91505092915050565b60006060820190506131fb6000830186612a0f565b61320860208301856122bd565b6132156040830184612728565b94935050505056fea2646970667358221220749fbaa389fd414ed026016432f43bc8596d562346aa37bda405a45fb9acc4ad64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100dc5760003560e01c80639b680e7d1161007f578063cf44b5d511610059578063cf44b5d51461029a578063da051b9b146102c5578063e0a7632414610302578063e15155631461032b576100dc565b80639b680e7d146101f7578063a884741314610234578063cd772f5c14610271576100dc565b80634df2ca18116100bb5780634df2ca181461014f5780637a5a69e314610166578063893d20e8146101a35780638fd4fcc7146101ce576100dc565b80629c3f8f146100e157806312e1d7241461010a5780633ef4d13014610126575b600080fd5b3480156100ed57600080fd5b50610108600480360381019061010391906121bc565b610356565b005b610124600480360381019061011f9190612247565b610600565b005b34801561013257600080fd5b5061014d600480360381019061014891906121bc565b610c54565b005b34801561015b57600080fd5b50610164610e65565b005b34801561017257600080fd5b5061018d600480360381019061018891906121bc565b6111a8565b60405161019a91906122a2565b60405180910390f35b3480156101af57600080fd5b506101b8611217565b6040516101c591906122cc565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f09190612463565b61123f565b005b34801561020357600080fd5b5061021e600480360381019061021991906121bc565b611437565b60405161022b919061261c565b60405180910390f35b34801561024057600080fd5b5061025b600480360381019061025691906121bc565b611520565b60405161026891906126c6565b60405180910390f35b34801561027d57600080fd5b50610298600480360381019061029391906126e8565b611720565b005b3480156102a657600080fd5b506102af611d53565b6040516102bc9190612737565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e791906121bc565b611dee565b6040516102f99190612781565b60405180910390f35b34801561030e57600080fd5b50610329600480360381019061032491906127da565b611e7e565b005b34801561033757600080fd5b50610340611f4f565b60405161034d91906122cc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103db90612879565b60405180910390fd5b806103ee816111a8565b61042d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610424906128e5565b60405180910390fd5b60016000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160006104989190611fa7565b6006820160006104a89190611fe7565b60078201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550506009820160006101000a81549060ff0219169055600a820160009055505060005b6002805490508110156105c457826002828154811061052157610520612905565b5b906000526020600020015414156105b157600260016002805490506105469190612963565b8154811061055757610556612905565b5b90600052602060002001546002828154811061057657610575612905565b5b9060005260206000200181905550600280548061059657610595612997565b5b600190038181906000526020600020016000905590556105c4565b80806105bc906129c6565b9150506104ff565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15826040516105f49190612a1e565b60405180910390a15050565b816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c90612aab565b60405180910390fd5b8260008060028111156106bb576106ba612acb565b5b6001600084815260200190815260200160002060090160009054906101000a900460ff1660028111156106f1576106f0612acb565b5b14610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890612b46565b60405180910390fd5b8461073b816111a8565b61077a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610771906128e5565b60405180910390fd5b600080600160008981526020019081526020016000206006018054905014156107d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cf90612bb2565b60405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660016000898152602001908152602001600020600601828154811061081857610817612905565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461089d578080610870906129c6565b915050600160008881526020019081526020016000206006018054905081106108985761089d565b6107d9565b600160008881526020019081526020016000206006018054905081106108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ef90612c1e565b60405180910390fd5b61090061200b565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600089815260200190815260200160002060060182815481106109605761095f612905565b5b9060005260206000209060040201600101548160200181815250506002816020015161098c9190612c3e565b3410156109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590612ce4565b60405180910390fd5b80600160008a815260200190815260200160002060070160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008a815260200190815260200160002090506002600160008b815260200190815260200160002060090160006101000a81548160ff02191690836002811115610a8a57610a89612acb565b5b021790555042600160008b8152602001908152602001600020600a01819055507f6898e0d44e43d4e52763adfb1a021d99067e84ba3cc756ea838142ac5f93a9428989604051610adb929190612d04565b60405180910390a160008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610b1e93929190612d2d565b6040516020818303038152906040528051906020012090506000610b418b611f78565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e896020015189600301548a600401548b6005016040518963ffffffff1660e01b8152600401610bdc9796959493929190612e5a565b6000604051808303818588803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b50505050507f6f8e99fbce606417155943e39f235814e905d7ecda831d34d0632d17e9cbf7038b83604051610c3f929190612ed0565b60405180910390a15050505050505050505050565b806001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf090612aab565b60405180910390fd5b816000806002811115610d0f57610d0e612acb565b5b6001600084815260200190815260200160002060090160009054906101000a900460ff166002811115610d4557610d44612acb565b5b14610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c90612b46565b60405180910390fd5b83610d8f816111a8565b610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc5906128e5565b60405180910390fd5b600180600087815260200190815260200160002060090160006101000a81548160ff02191690836002811115610e0757610e06612acb565b5b02179055504260016000878152602001908152602001600020600a01819055507fd88fab4b08bf76f15cf2d6e03e382acf1edd6790ab82967e406abac37db2028885604051610e569190612a1e565b60405180910390a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ef3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eea90612879565b60405180910390fd5b600060028054905090505b60008111156111a55760006002600183610f189190612963565b81548110610f2957610f28612905565b5b90600052602060002001549050600280811115610f4957610f48612acb565b5b6001600083815260200190815260200160002060090160009054906101000a900460ff166002811115610f7f57610f7e612acb565b5b1480610fd2575060016002811115610f9a57610f99612acb565b5b6001600083815260200190815260200160002060090160009054906101000a900460ff166002811115610fd057610fcf612acb565b5b145b8015610fff5750603c60016000838152602001908152602001600020600a0154610ffc9190612ef9565b42115b156111915760016000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055600482016000905560058201600061106f9190611fa7565b60068201600061107f9190611fe7565b60078201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550506009820160006101000a81549060ff0219169055600a8201600090555050600260016002805490506110e79190612963565b815481106110f8576110f7612905565b5b906000526020600020015460026001846111129190612963565b8154811061112357611122612905565b5b9060005260206000200181905550600280548061114357611142612997565b5b600190038181906000526020600020016000905590557f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516111889190612a1e565b60405180910390a15b50808061119d90612f4f565b915050610efe565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b84611249816111a8565b15611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612fc5565b60405180910390fd5b336001600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000888152602001908152602001600020600101819055508460016000888152602001908152602001600020600201819055508360016000888152602001908152602001600020600301819055508260016000888152602001908152602001600020600401819055508160016000888152602001908152602001600020600501908051906020019061137492919061203b565b5060006001600088815260200190815260200160002060090160006101000a81548160ff021916908360028111156113af576113ae612acb565b5b02179055504260016000888152602001908152602001600020600a018190555060028690806001815401808255809150506001900390600052602060002001600090919091909150557f2a66b5a320edcb6b7fba849fd4173d545603571b82a650ae5ef95f12e0dada9e866040516114279190612a1e565b60405180910390a1505050505050565b606060016000838152602001908152602001600020600601805480602002602001604051908101604052809291908181526020016000905b8282101561151557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061146f565b505050509050919050565b606060006040518060200160405280600081525090506000600281111561154a57611549612acb565b5b6001600085815260200190815260200160002060090160009054906101000a900460ff1660028111156115805761157f612acb565b5b14156115c3576040518060400160405280600781526020017f43726561746564000000000000000000000000000000000000000000000000008152509050611717565b600160028111156115d7576115d6612acb565b5b6001600085815260200190815260200160002060090160009054906101000a900460ff16600281111561160d5761160c612acb565b5b1415611650576040518060400160405280600981526020017f43616e63656c6c656400000000000000000000000000000000000000000000008152509050611716565b60028081111561166357611662612acb565b5b6001600085815260200190815260200160002060090160009054906101000a900460ff16600281111561169957611698612acb565b5b14156116dc576040518060400160405280600981526020017f46696e616c697a656400000000000000000000000000000000000000000000008152509050611715565b6040518060400160405280600581526020017f4572726f7200000000000000000000000000000000000000000000000000000081525090505b5b5b80915050919050565b81600080600281111561173657611735612acb565b5b6001600084815260200190815260200160002060090160009054906101000a900460ff16600281111561176c5761176b612acb565b5b146117ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a390612b46565b60405180910390fd5b836117b6816111a8565b6117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec906128e5565b60405180910390fd5b6001600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561189a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189190613031565b60405180910390fd5b600160008681526020019081526020016000206002015460016000878152602001908152602001600020600101546118d29190612ef9565b421115611914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190b9061309d565b60405180910390fd5b600080600160008881526020019081526020016000206006018054905014611a99575b3373ffffffffffffffffffffffffffffffffffffffff1660016000888152602001908152602001600020600601828154811061197657611975612905565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119fc5780806119ce906129c6565b91505060016000878152602001908152602001600020600601805490508111156119f7576119fc565b611937565b60016000878152602001908152602001600020600601805490508111611a9857600160008781526020019081526020016000206006018181548110611a4457611a43612905565b5b9060005260206000209060040201600101548510611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e9061312f565b60405180910390fd5b5b5b611aa16120c1565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611b3c91906122cc565b604080518083038186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8b91906131b9565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b8152600401611bf191906122cc565b604080518083038186803b158015611c0857600080fd5b505afa158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4091906131b9565b602001518160600181815250506001600088815260200190815260200160002060060181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550504260016000898152602001908152602001600020600a01819055507f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c66873388604051611d42939291906131e6565b60405180910390a150505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dda90612879565b60405180910390fd5b600280549050905090565b611df661200b565b600160008381526020019081526020016000206007016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0390612879565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026001600084815260200190815260200160002060070160010154611fa09190612c3e565b9050919050565b508054611fb390612d93565b6000825580601f10611fc55750611fe4565b601f016020900490600052602060002090810190611fe391906120ff565b5b50565b5080546000825560040290600052602060002090810190612008919061211c565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b82805461204790612d93565b90600052602060002090601f01602090048101928261206957600085556120b0565b82601f1061208257805160ff19168380011785556120b0565b828001600101855582156120b0579182015b828111156120af578251825591602001919060010190612094565b5b5090506120bd91906120ff565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b80821115612118576000816000905550600101612100565b5090565b5b8082111561216e57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090555060040161211d565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61219981612186565b81146121a457600080fd5b50565b6000813590506121b681612190565b92915050565b6000602082840312156121d2576121d161217c565b5b60006121e0848285016121a7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612214826121e9565b9050919050565b61222481612209565b811461222f57600080fd5b50565b6000813590506122418161221b565b92915050565b6000806040838503121561225e5761225d61217c565b5b600061226c858286016121a7565b925050602061227d85828601612232565b9150509250929050565b60008115159050919050565b61229c81612287565b82525050565b60006020820190506122b76000830184612293565b92915050565b6122c681612209565b82525050565b60006020820190506122e160008301846122bd565b92915050565b6000819050919050565b6122fa816122e7565b811461230557600080fd5b50565b600081359050612317816122f1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61237082612327565b810181811067ffffffffffffffff8211171561238f5761238e612338565b5b80604052505050565b60006123a2612172565b90506123ae8282612367565b919050565b600067ffffffffffffffff8211156123ce576123cd612338565b5b6123d782612327565b9050602081019050919050565b82818337600083830152505050565b6000612406612401846123b3565b612398565b90508281526020810184848401111561242257612421612322565b5b61242d8482856123e4565b509392505050565b600082601f83011261244a5761244961231d565b5b813561245a8482602086016123f3565b91505092915050565b600080600080600060a0868803121561247f5761247e61217c565b5b600061248d888289016121a7565b955050602061249e88828901612308565b94505060406124af88828901612308565b93505060606124c0888289016121a7565b925050608086013567ffffffffffffffff8111156124e1576124e0612181565b5b6124ed88828901612435565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61252f81612209565b82525050565b61253e816122e7565b82525050565b60808201600082015161255a6000850182612526565b50602082015161256d6020850182612535565b5060408201516125806040850182612535565b5060608201516125936060850182612535565b50505050565b60006125a58383612544565b60808301905092915050565b6000602082019050919050565b60006125c9826124fa565b6125d38185612505565b93506125de83612516565b8060005b8381101561260f5781516125f68882612599565b9750612601836125b1565b9250506001810190506125e2565b5085935050505092915050565b6000602082019050818103600083015261263681846125be565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561267857808201518184015260208101905061265d565b83811115612687576000848401525b50505050565b60006126988261263e565b6126a28185612649565b93506126b281856020860161265a565b6126bb81612327565b840191505092915050565b600060208201905081810360008301526126e0818461268d565b905092915050565b600080604083850312156126ff576126fe61217c565b5b600061270d858286016121a7565b925050602061271e85828601612308565b9150509250929050565b612731816122e7565b82525050565b600060208201905061274c6000830184612728565b92915050565b6040820160008201516127686000850182612526565b50602082015161277b6020850182612535565b50505050565b60006040820190506127966000830184612752565b92915050565b60006127a7826121e9565b9050919050565b6127b78161279c565b81146127c257600080fd5b50565b6000813590506127d4816127ae565b92915050565b6000602082840312156127f0576127ef61217c565b5b60006127fe848285016127c5565b91505092915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c79206279206f776e60008201527f65722e0000000000000000000000000000000000000000000000000000000000602082015250565b6000612863602383612649565b915061286e82612807565b604082019050919050565b6000602082019050818103600083015261289281612856565b9050919050565b7f41756374696f6e206d7573742065786973740000000000000000000000000000600082015250565b60006128cf601283612649565b91506128da82612899565b602082019050919050565b600060208201905081810360008301526128fe816128c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061296e826122e7565b9150612979836122e7565b92508282101561298c5761298b612934565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006129d1826122e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a0457612a03612934565b5b600182019050919050565b612a1881612186565b82525050565b6000602082019050612a336000830184612a0f565b92915050565b7f4d6574686f642063616e2062652063616c6c6564206f6e6c7920627920636c6960008201527f656e742e00000000000000000000000000000000000000000000000000000000602082015250565b6000612a95602483612649565b9150612aa082612a39565b604082019050919050565b60006020820190508181036000830152612ac481612a88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f496e76616c69642041756374696f6e53746174652e0000000000000000000000600082015250565b6000612b30601583612649565b9150612b3b82612afa565b602082019050919050565b60006020820190508181036000830152612b5f81612b23565b9050919050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000612b9c601483612649565b9150612ba782612b66565b602082019050919050565b60006020820190508181036000830152612bcb81612b8f565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000612c08601683612649565b9150612c1382612bd2565b602082019050919050565b60006020820190508181036000830152612c3781612bfb565b9050919050565b6000612c49826122e7565b9150612c54836122e7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c8d57612c8c612934565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420656e6f75676800600082015250565b6000612cce601f83612649565b9150612cd982612c98565b602082019050919050565b60006020820190508181036000830152612cfd81612cc1565b9050919050565b6000604082019050612d196000830185612a0f565b612d2660208301846122bd565b9392505050565b6000608082019050612d4260008301866122bd565b612d4f6020830185612752565b612d5c6060830184612728565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612dab57607f821691505b60208210811415612dbf57612dbe612d64565b5b50919050565b60008190508160005260206000209050919050565b60008154612de781612d93565b612df18186612649565b94506001821660008114612e0c5760018114612e1e57612e51565b60ff1983168652602086019350612e51565b612e2785612dc5565b60005b83811015612e4957815481890152600182019150602081019050612e2a565b808801955050505b50505092915050565b600060e082019050612e6f600083018a612a0f565b612e7c60208301896122bd565b612e8960408301886122bd565b612e966060830187612728565b612ea36080830186612728565b612eb060a0830185612a0f565b81810360c0830152612ec28184612dda565b905098975050505050505050565b6000604082019050612ee56000830185612a0f565b612ef26020830184612a0f565b9392505050565b6000612f04826122e7565b9150612f0f836122e7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f4457612f43612934565b5b828201905092915050565b6000612f5a826122e7565b91506000821415612f6e57612f6d612934565b5b600182039050919050565b7f41756374696f6e20616c72656164792065786973747300000000000000000000600082015250565b6000612faf601683612649565b9150612fba82612f79565b602082019050919050565b60006020820190508181036000830152612fde81612fa2565b9050919050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b600061301b602083612649565b915061302682612fe5565b602082019050919050565b6000602082019050818103600083015261304a8161300e565b9050919050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000613087601183612649565b915061309282613051565b602082019050919050565b600060208201905081810360008301526130b68161307a565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000613119602c83612649565b9150613124826130bd565b604082019050919050565b600060208201905081810360008301526131488161310c565b9050919050565b600080fd5b600081519050613163816122f1565b92915050565b60006040828403121561317f5761317e61314f565b5b6131896040612398565b9050600061319984828501613154565b60008301525060206131ad84828501613154565b60208301525092915050565b6000604082840312156131cf576131ce61217c565b5b60006131dd84828501613169565b91505092915050565b60006060820190506131fb6000830186612a0f565b61320860208301856122bd565b6132156040830184612728565b94935050505056fea2646970667358221220749fbaa389fd414ed026016432f43bc8596d562346aa37bda405a45fb9acc4ad64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "tasksManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TasksManager)2783"
      },
      {
        "astId": 55,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Auction)36_storage)"
      },
      {
        "astId": 58,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "bytes32_auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProviderBid)45_storage)dyn_storage": {
        "base": "t_struct(ProviderBid)45_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionsManager.ProviderBid[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TasksManager)2783": {
        "encoding": "inplace",
        "label": "contract TasksManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)11": {
        "encoding": "inplace",
        "label": "enum AuctionsManager.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)36_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionsManager.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)36_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)36_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.Auction",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionDeadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "clientVerification",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 23,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "code",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 27,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerBids",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(ProviderBid)45_storage)dyn_storage"
          },
          {
            "astId": 30,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "winnerBid",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(WinnerBid)50_storage"
          },
          {
            "astId": 33,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionState",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(AuctionState)11"
          },
          {
            "astId": 35,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ProviderBid)45_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.ProviderBid",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 40,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 42,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerUpVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerDownVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WinnerBid)50_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.WinnerBid",
        "members": [
          {
            "astId": 47,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 49,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}