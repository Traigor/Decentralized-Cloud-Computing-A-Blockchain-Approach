{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuctionsManager.AuctionState",
          "name": "auctionState",
          "type": "uint8"
        }
      ],
      "name": "AuctionNotInState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByClient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TasksManagerNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "TaskIDCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taskDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_clientVerification",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "auctionID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "client",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDeadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "taskDeadline",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "clientVerification",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "taskID",
                  "type": "bytes32"
                },
                {
                  "internalType": "string",
                  "name": "code",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "provider",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "bid",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "providerUpVotes",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "providerDownVotes",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct AuctionsManager.ProviderBid[]",
                  "name": "providerBids",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "provider",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "bid",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct AuctionsManager.WinnerBid",
                  "name": "winnerBid",
                  "type": "tuple"
                },
                {
                  "internalType": "enum AuctionsManager.AuctionState",
                  "name": "auctionState",
                  "type": "uint8"
                }
              ],
              "internalType": "struct AuctionsManager.Auction",
              "name": "auction",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "clientUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "clientDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ActiveAuction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionActiveBidsByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ProviderBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionWinnersByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionsByClient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tasksManagerAddress",
          "type": "address"
        }
      ],
      "name": "setTasksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x618e841c2827bd427443c8abba5af9749f4387f4a1f46f5907a840d7550b3030",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3903833",
    "logsBloom": "0x
    "blockHash": "0x355c78cf0b4f507686af29e20bf13187667943aac6c67b86ac309425245dfd8f",
    "transactionHash": "0x618e841c2827bd427443c8abba5af9749f4387f4a1f46f5907a840d7550b3030",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3903833",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "43109133c77246ddc7e1aa6c178d53fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"name\":\"AuctionNotInState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByClient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TasksManagerNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"TaskIDCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction\",\"name\":\"auction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"clientUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ActiveAuction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionActiveBidsByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionWinnersByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionsByClient\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tasksManagerAddress\",\"type\":\"address\"}],\"name\":\"setTasksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TasksManager.sol\\\";\\n\\ncontract AuctionsManager {\\n     address private immutable owner; \\n     TasksManager tasksManager;\\n\\n     enum AuctionState {\\n        Created,\\n        Cancelled, \\n        Finalized\\n    }\\n\\n    struct Auction {\\n        bytes32 auctionID;\\n        address client;\\n        uint creationTime;\\n        uint auctionDeadline;\\n        uint taskDeadline;\\n        bytes32 clientVerification;\\n        bytes32 taskID;\\n        string code;\\n        ProviderBid[] providerBids;\\n        WinnerBid winnerBid;\\n        AuctionState auctionState;   \\n    }\\n\\n    struct ProviderBid {\\n        address provider;\\n        uint bid;\\n        uint providerUpVotes;\\n        uint providerDownVotes;\\n    }\\n\\n    struct WinnerBid {\\n        address provider;\\n        uint bid;\\n    }\\n\\n    struct ActiveAuction {\\n        Auction auction;\\n        uint clientUpVotes;\\n        uint clientDownVotes;\\n    }\\n\\n    mapping (bytes32 => Auction) private auctions;\\n\\n    bytes32[] private bytes32_auctions;\\n\\n    //Events\\n    event AuctionCreated(bytes32 auctionID, address client);\\n    event AuctionCancelled(bytes32 auctionID, address client);\\n    event AuctionFinalized(bytes32 auctionID, address client, address provider);\\n    event AuctionDeleted(bytes32 auctionID);\\n    event BidPlaced(bytes32 auctionID, address provider, uint bid);\\n    event TaskIDCreated(bytes32 auctionID, bytes32 taskID, address client, address provider);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByClient();\\n    error AuctionDoesNotExist();\\n    error AuctionNotInState(AuctionState auctionState);\\n    error TasksManagerNotSet();\\n\\n    constructor()  {\\n        owner = msg.sender;\\n    }\\n\\n    function setTasksManager(address payable _tasksManagerAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        tasksManager = TasksManager(_tasksManagerAddress);\\n    }\\n\\n    function createAuction(\\n        uint _auctionDeadline, \\n        uint _taskDeadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public \\n    {\\n        bytes32 _auctionID = keccak256(abi.encode(block.timestamp, msg.sender, _auctionDeadline, _taskDeadline, _clientVerification, _code));\\n        auctions[_auctionID].auctionID = _auctionID;\\n        auctions[_auctionID].client = msg.sender;\\n        auctions[_auctionID].creationTime = block.timestamp;\\n        auctions[_auctionID].auctionDeadline = _auctionDeadline;\\n        auctions[_auctionID].taskDeadline = _taskDeadline;\\n        auctions[_auctionID].clientVerification = _clientVerification;\\n        auctions[_auctionID].code = _code;\\n\\n        auctions[_auctionID].auctionState = AuctionState.Created;\\n        bytes32_auctions.push(_auctionID);\\n        emit AuctionCreated( _auctionID, msg.sender);\\n    }\\n\\n    function cancelAuction(bytes32 _auctionID) public   {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();   \\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        auctions[_auctionID].auctionState = AuctionState.Cancelled;\\n        emit AuctionCancelled(_auctionID, auctions[_auctionID].client);\\n     }\\n\\n    function bid(bytes32 _auctionID, uint _bid) public {\\n        //tasks manager set\\n        if (address(tasksManager) == address(0))\\n            revert TasksManagerNotSet();\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        require(msg.sender != auctions[_auctionID].client, \\\"Client can't bid to this auction\\\"); \\n        require(\\n            (block.timestamp <= auctions[_auctionID].creationTime + auctions[_auctionID].auctionDeadline),\\n            \\\"Time has expired.\\\"\\n        );\\n        uint providerIndex = 0;\\n        bool providerExists = false;\\n        if(auctions[_auctionID].providerBids.length != 0)\\n        {    while(auctions[_auctionID].providerBids[providerIndex].provider != msg.sender)\\n            {\\n                providerIndex++;\\n                if(providerIndex > auctions[_auctionID].providerBids.length)\\n                    break;\\n            }\\n            if (providerIndex <= auctions[_auctionID].providerBids.length)\\n            {\\n                require(\\n                _bid < auctions[_auctionID].providerBids[providerIndex].bid,\\n                \\\"Bid is not lower than than the previous one.\\\"\\n                );\\n                providerExists = true;\\n            }\\n        }\\n        if(providerExists == true)\\n        {\\n            auctions[_auctionID].providerBids[providerIndex].bid = _bid;\\n            auctions[_auctionID].providerBids[providerIndex].providerUpVotes = tasksManager.getProviderPerformance(msg.sender).upVotes;\\n            auctions[_auctionID].providerBids[providerIndex].providerDownVotes = tasksManager.getProviderPerformance(msg.sender).downVotes;\\n        }\\n        else \\n        {\\n            ProviderBid memory currentBid;\\n            currentBid.provider = msg.sender;\\n            currentBid.bid = _bid;\\n            currentBid.providerUpVotes = tasksManager.getProviderPerformance(msg.sender).upVotes;\\n            currentBid.providerDownVotes = tasksManager.getProviderPerformance(msg.sender).downVotes;\\n            auctions[_auctionID].providerBids.push(currentBid);\\n        }\\n        emit BidPlaced(_auctionID, msg.sender, _bid);\\n     }\\n\\n    function finalize(bytes32 _auctionID, address _provider) public payable  {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        uint providerIndex = 0;\\n        if (auctions[_auctionID].providerBids.length == 0)\\n            revert(\\\"Auction has no bids.\\\");\\n        while(auctions[_auctionID].providerBids[providerIndex].provider != _provider)\\n        {\\n            providerIndex++;\\n            if(providerIndex >= auctions[_auctionID].providerBids.length)\\n                break;\\n        }\\n        if(providerIndex >= auctions[_auctionID].providerBids.length)\\n         revert(\\\"Wrong provider address\\\");\\n        WinnerBid memory _winnerBid;\\n        _winnerBid.provider = _provider;\\n        _winnerBid.bid = auctions[_auctionID].providerBids[providerIndex].bid;\\n        require (msg.value ==(_winnerBid.bid * 2), \\\"Client collateral is not correct\\\");\\n        auctions[_auctionID].winnerBid = _winnerBid;\\n        Auction storage currentAuction = auctions[_auctionID];\\n        auctions[_auctionID].auctionState = AuctionState.Finalized;\\n        emit AuctionFinalized(_auctionID, auctions[_auctionID].client,  _provider);\\n        bytes32 taskID = keccak256(abi.encode(currentAuction.client, _winnerBid, block.timestamp));\\n        auctions[_auctionID].taskID = taskID;\\n        emit TaskIDCreated(_auctionID, taskID, auctions[_auctionID].client , _provider);\\n        uint clientCollateral = auctions[_auctionID].winnerBid.bid * 2;\\n        tasksManager.createTask{value: clientCollateral}(taskID, currentAuction.client, _provider,  _winnerBid.bid, currentAuction.taskDeadline, currentAuction.clientVerification,currentAuction.code);\\n    }\\n\\n    function getActiveAuctions() public view returns (ActiveAuction[] memory) {\\n        Auction[] memory activeAuctions = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline && auctions[bytes32_auctions[i]].client != msg.sender)\\n            {\\n                activeAuctions[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n         ActiveAuction[] memory result = new ActiveAuction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i].auction = activeAuctions[i];\\n            result[i].clientUpVotes = tasksManager.getClientPerformance(activeAuctions[i].client).upVotes;\\n            result[i].clientDownVotes = tasksManager.getClientPerformance(activeAuctions[i].client).downVotes;\\n        }\\n        return result;\\n    }\\n\\n\\n\\n    function getAuctionBids(bytes32 _auctionID) public view returns(ProviderBid[] memory) {\\n        return auctions[_auctionID].providerBids;\\n    }\\n\\n    function getAuctionsByClient() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByClient = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].client == msg.sender)\\n            {\\n                auctionsByClient[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByClient[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionWinnersByProvider() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].winnerBid.provider == msg.sender)\\n            {\\n                auctionsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionActiveBidsByProvider() public view returns (Auction[] memory) \\n    {\\n        Auction[] memory activeBidsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline)\\n            {\\n                for (uint j = 0; j < auctions[bytes32_auctions[i]].providerBids.length; j++)\\n                {\\n                    if (auctions[bytes32_auctions[i]].providerBids[j].provider == msg.sender)\\n                    {\\n                        activeBidsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                        auctionsLength++;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = activeBidsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return owner;\\n    }\\n    \\n    function getTasksManager() public view returns(address) {\\n         //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return address(tasksManager);\\n    }\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0xb86555a20b05b6ca53022d087e1957641ee8f8844ec4fbf690a2915ef11ed389\",\"license\":\"GPL-3.0\"},\"contracts/TasksManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract TasksManager {\\n\\n    address private immutable owner; \\n    address private auctionAddress;\\n    uint private bank = 0;\\n\\n    enum TaskState {\\n        Created,\\n        Cancelled, \\n        Active,\\n        CompletedSuccessfully,\\n        CompletedUnsuccessfully,\\n        Invalid, \\n        ResultsReceivedSuccessfully,\\n        ResultsReceivedUnsuccessfully\\n    }\\n\\n    enum PaymentState {\\n        Initialized,\\n        Pending,\\n        Completed \\n    }\\n\\n    struct Task {\\n        bytes32 taskID;\\n        address payable client; \\n        address payable provider;\\n        uint deadline;\\n        uint price;\\n        uint duration;\\n        uint activationTime;\\n        uint completionTime;\\n        string code;\\n        string results;\\n        bytes32 clientVerification;\\n        TaskState taskState;\\n        PaymentState paymentState;\\n    }\\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    struct clientRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping (bytes32 => Task) private tasks;\\n    bytes32[] private bytes32_tasks;\\n    mapping(address => providerRating) private providerPerformance;\\n    mapping(address => clientRating) private clientPerformance;\\n\\n    //Events\\n    event TaskCreated(bytes32 taskID, address client, address provider);\\n    event TaskActivated(bytes32 taskID, address client, address provider);\\n    event TaskCompletedSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCompletedUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCancelled(bytes32 taskID, address client, address provider);\\n    event TaskInvalidated(bytes32 taskID, address client, address provider);\\n    event PaymentPending(bytes32 taskID, address client, address provider, uint payment);\\n    event PaymentCompleted(bytes32 taskID, address client, address provider);\\n    event TransferMadeToClient(address client, uint amount);\\n    event TransferMadeToProvider(address provider, uint amount);\\n    event ProviderUpvoted(address provider, bytes32 taskID);\\n    event ProviderDownvoted(address provider, bytes32 taskID);\\n    event ClientUpvoted(address client, bytes32 taskID);\\n    event ClientDownvoted(address client, bytes32 taskID);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByAuction();\\n    error NotCalledByClient();\\n    error NotCalledByProvider();\\n    error NotCorrectValue(uint correctValue, uint receivedValue);\\n    error TaskNotInState(TaskState taskState);\\n    error PaymentNotInState(PaymentState paymentState);\\n    error TaskDoesNotExist();\\n    error TaskAlreadyExists();\\n    error AuctionsManagerNotSet();\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function setAuctionsManager(address _auctionAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        auctionAddress = _auctionAddress;\\n    }\\n\\n    function createTask(\\n        bytes32 _taskID,\\n        address _client,\\n        address _provider,\\n        uint _price,\\n        uint _deadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public payable \\n    {\\n        //auctions manager set\\n        if (auctionAddress == address(0)) \\n            revert AuctionsManagerNotSet();\\n        //auction only\\n        if (msg.sender != auctionAddress) \\n            revert NotCalledByAuction();\\n        //not registered task\\n        if (tasks[_taskID].taskID != bytes32(0)) \\n            revert TaskAlreadyExists();\\n        //correct client collateral\\n        if (msg.value != _price * 2)\\n            revert NotCorrectValue(_price * 2, msg.value);\\n        tasks[_taskID].taskID = _taskID;\\n        tasks[_taskID].client = payable (_client);\\n        tasks[_taskID].provider = payable(_provider);\\n        tasks[_taskID].price = _price;\\n        tasks[_taskID].deadline = _deadline;\\n        tasks[_taskID].clientVerification = _clientVerification;\\n        tasks[_taskID].code = _code;\\n        tasks[_taskID].taskState = TaskState.Created;\\n        tasks[_taskID].paymentState = PaymentState.Initialized;\\n        bytes32_tasks.push(_taskID);\\n        emit TaskCreated(_taskID, _client, _provider);\\n        //clientCollateral = 2 * price\\n        //providerCollateral = 10 * price\\n    }\\n\\n    //Cancel\\n    //TaskState -> Cancel\\n    //refunds payment to client\\n    //can be called only by client and only if contract hasnt been activated by provider\\n\\n    function cancelTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        tasks[_taskID].taskState = TaskState.Cancelled;\\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n        emit TransferMadeToClient(tasks[_taskID].client,tasks[_taskID].price * 2);\\n        emit TaskCancelled(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function invalidateTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n         //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        require(\\n            (block.timestamp > tasks[_taskID].activationTime + tasks[_taskID].deadline + 86400), //give one day to be invalidated\\n            \\\"Time has not expired.\\\"\\n        );\\n        tasks[_taskID].taskState = TaskState.Invalid;\\n  \\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 12 ); //clientCollateral + providerCollateral\\n        emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 12);\\n        emit TaskInvalidated(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    // Activate\\n    // TaskState -> Activated\\n    // can be called only by provider to start the process\\n\\n    function activateTask(bytes32 _taskID) public payable\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in taskState Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        //correct provider collateral\\n        if (msg.value != tasks[_taskID].price * 10)\\n            revert NotCorrectValue(tasks[_taskID].price * 10, msg.value);\\n        tasks[_taskID].activationTime = block.timestamp;\\n        tasks[_taskID].taskState = TaskState.Active;\\n        emit TaskActivated(_taskID, tasks[_taskID].client ,tasks[_taskID].provider);\\n    }\\n\\n    // Complete\\n    // TaskState -> Completed\\n    // can be called only by provider when the computation is over\\n\\n    //called by docker container\\n    function completeTask(bytes32 _taskID,string memory ver,  uint _duration, uint _timeReceivedProvider) public\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        tasks[_taskID].completionTime = _timeReceivedProvider;\\n        tasks[_taskID].duration = _duration + 1;\\n        //in time and correct verification\\n        if ((tasks[_taskID].completionTime <= tasks[_taskID].activationTime + tasks[_taskID].deadline) \\n            && (tasks[_taskID].duration <= tasks[_taskID].deadline) \\n            && (tasks[_taskID].clientVerification == keccak256(abi.encodePacked(ver))))\\n        {\\n            tasks[_taskID].taskState = TaskState.CompletedSuccessfully;\\n            emit TaskCompletedSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            providerPerformance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n            tasks[_taskID].taskState = TaskState.CompletedUnsuccessfully;\\n            emit TaskCompletedUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n    }\\n\\n\\n    //called by provider\\n    function sendResults(bytes32 _taskID, string memory _results) public {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state CompletedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.CompletedSuccessfully) \\n            revert TaskNotInState(TaskState.CompletedSuccessfully);\\n        //in payment state Initialized\\n        if (tasks[_taskID].paymentState != PaymentState.Initialized) \\n            revert PaymentNotInState(PaymentState.Initialized);\\n        uint receiptTime = block.timestamp;\\n        tasks[_taskID].results = _results;\\n        //gives 1 day to provider to send the results, time received must be greater than completion time\\n        if ((receiptTime >= tasks[_taskID].completionTime)\\n        && (receiptTime <= tasks[_taskID].completionTime + 86400) \\n        && (receiptTime >= tasks[_taskID].activationTime + tasks[_taskID].duration) \\n        && (tasks[_taskID].completionTime >= tasks[_taskID].activationTime + tasks[_taskID].duration)) \\n        {\\n            if (tasks[_taskID].price * tasks[_taskID].duration <= tasks[_taskID].price * 2) {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].price * tasks[_taskID].duration + tasks[_taskID].price * 10);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration + tasks[_taskID].price * 10);\\n                tasks[_taskID].client.transfer(tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n                emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n                tasks[_taskID].paymentState = PaymentState.Completed;\\n                emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);                \\n            }\\n            else {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].price * 12); //clientCollateral + providerCollateral\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * 12);\\n                tasks[_taskID].paymentState = PaymentState.Pending;\\n                emit PaymentPending(_taskID, tasks[_taskID].client, tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n            }\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedSuccessfully;\\n            emit TaskReceivedResultsSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            providerPerformance[tasks[_taskID].provider].upVotes += 1;\\n            emit ProviderUpvoted(tasks[_taskID].provider,_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedUnsuccessfully;\\n            emit TaskReceivedResultsUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            providerPerformance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n        }\\n    }\\n\\n\\n    function completePayment(bytes32 _taskID) public payable {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //correct payment value\\n        if (msg.value != tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2)\\n            revert NotCorrectValue(tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2, msg.value);\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Pending\\n        if (tasks[_taskID].paymentState != PaymentState.Pending) \\n            revert PaymentNotInState(PaymentState.Pending);\\n        tasks[_taskID].provider.transfer(msg.value);\\n        emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n        clientPerformance[tasks[_taskID].client].upVotes += 1;\\n        emit ClientUpvoted(tasks[_taskID].client,_taskID);\\n        tasks[_taskID].paymentState = PaymentState.Completed;\\n        emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function reportClient(bytes32 _taskID) public {\\n       //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider(); \\n        clientPerformance[tasks[_taskID].client].downVotes += 1;\\n        emit ClientDownvoted(tasks[_taskID].client,_taskID);\\n    }\\n\\n\\n    function getProviderPerformance(address provider) public view returns (providerRating memory) {\\n        return providerPerformance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getClientPerformance(address client) public view returns (clientRating memory) {\\n        return clientPerformance[client];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getCode(bytes32 _taskID) public view returns (string memory) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        return tasks[_taskID].code;\\n    }\\n\\n    function getResults(bytes32 _taskID) public view returns (string memory)  {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Completed\\n        if (tasks[_taskID].paymentState != PaymentState.Completed) \\n            revert PaymentNotInState(PaymentState.Completed);\\n        return tasks[_taskID].results;\\n    }\\n\\n    function getTasksByClient() public view returns (Task[] memory) {\\n        Task[] memory tasksByClient = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].client == msg.sender) {\\n                tasksByClient[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n        for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByClient[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getTasksByProvider() public view returns (Task[] memory) {\\n        Task[] memory tasksByProvider = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].provider == msg.sender) {\\n                tasksByProvider[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n         for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByProvider[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getProviderCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 10;\\n    }\\n\\n    function getClientCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 2;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getAuctionAddress() public  view returns (address) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return auctionAddress;\\n    }\\n\\n    function getTasks() public view returns (Task[] memory) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        Task[] memory ret = new Task[](bytes32_tasks.length);\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            ret[i] = tasks[bytes32_tasks[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getBank() public view returns (uint) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return bank;\\n    }\\n\\n    function withdraw(uint amount) public {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        //correct amount\\n        if (amount > bank)\\n            revert NotCorrectValue(bank, amount);\\n        payable(owner).transfer(amount);\\n        bank -= amount;\\n    }\\n\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x0fdb027a5eae2bba824e7436a705e04acbb0b058f1b396a546cd8ab2ce246a76\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c6145d861007460003960008181610bfd0152818161291201526129dc01526145d86000f3fe6080604052600436106100ab5760003560e01c8063c618e93811610064578063c618e938146101f1578063cd772f5c1461021c578063cf44b5d514610245578063e0a7632414610270578063e151556314610299578063e369e93c146102c4576100eb565b806312e1d724146100f05780633ef4d1301461010c578063893d20e8146101355780639ad01fde146101605780639b680e7d1461018b578063a02daf96146101c8576100eb565b366100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e2906132eb565b60405180910390fd5b600080fd5b61010a600480360381019061010591906133b3565b6102ef565b005b34801561011857600080fd5b50610133600480360381019061012e91906133f3565b6109ce565b005b34801561014157600080fd5b5061014a610bf9565b604051610157919061342f565b60405180910390f35b34801561016c57600080fd5b50610175610c21565b604051610182919061387c565b60405180910390f35b34801561019757600080fd5b506101b260048036038101906101ad91906133f3565b6110f6565b6040516101bf919061390d565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190613a90565b6111df565b005b3480156101fd57600080fd5b506102066113c3565b604051610213919061387c565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190613b13565b61189b565b005b34801561025157600080fd5b5061025a61216c565b6040516102679190613c65565b60405180910390f35b34801561027c57600080fd5b5061029760048036038101906102929190613cc5565b612910565b005b3480156102a557600080fd5b506102ae6129d8565b6040516102bb919061342f565b60405180910390f35b3480156102d057600080fd5b506102d9612a85565b6040516102e6919061387c565b60405180910390f35b6000801b60016000848152602001908152602001600020600001541415610342576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103dd576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156103f1576103f0613679565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561042757610426613679565b5b1461046a5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016104619190613d01565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90613d68565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff1660016000858152602001908152602001600020600801828154811061050857610507613d88565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461058d57808061056090613de6565b915050600160008481526020019081526020016000206008018054905081106105885761058d565b6104c9565b600160008481526020019081526020016000206008018054905081106105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90613e7b565b60405180910390fd5b6105f06130c5565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600085815260200190815260200160002060080182815481106106505761064f613d88565b5b9060005260206000209060040201600101548160200181815250506002816020015161067c9190613e9b565b34146106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490613f41565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561077957610778613679565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516107e793929190613f70565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16834260405160200161082a93929190613fe5565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040516108c8949392919061401c565b60405180910390a16000600260016000898152602001908152602001600020600901600101546108f89190613e9b565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b81526004016109939796959493929190614157565b6000604051808303818588803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610a21576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610abc576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610ad057610acf613679565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610b0657610b05613679565b5b14610b495760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610b409190613d01565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610b8257610b81613679565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610bee9291906141cd565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610c4457610c43613965565b5b604051908082528060200260200182016040528015610c7d57816020015b610c6a6130f5565b815260200190600190039081610c625790505b5090506000805b60028054905081101561103c573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610cc057610cbf613d88565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611029576001600060028381548110610d3157610d30613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054610df890614090565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2490614090565b8015610e715780601f10610e4657610100808354040283529160200191610e71565b820191906000526020600020905b815481529060010190602001808311610e5457829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f4557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610e9f565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115610fe657610fe5613679565b5b6002811115610ff857610ff7613679565b5b8152505083838151811061100f5761100e613d88565b5b6020026020010181905250818061102590613de6565b9250505b808061103490613de6565b915050610c84565b5060008167ffffffffffffffff81111561105957611058613965565b5b60405190808252806020026020018201604052801561109257816020015b61107f6130f5565b8152602001906001900390816110775790505b50905060005b828110156110ec578381815181106110b3576110b2613d88565b5b60200260200101518282815181106110ce576110cd613d88565b5b602002602001018190525080806110e490613de6565b915050611098565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156111d457838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061112e565b505050509050919050565b60004233868686866040516020016111fc9695949392919061422f565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061131a929190613186565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561135557611354613679565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516113b49291906141cd565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156113e6576113e5613965565b5b60405190808252806020026020018201604052801561141f57816020015b61140c6130f5565b8152602001906001900390816114045790505b5090506000805b6002805490508110156117e1573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061146257611461613d88565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117ce5760016000600283815481106114d6576114d5613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461159d90614090565b80601f01602080910402602001604051908101604052809291908181526020018280546115c990614090565b80156116165780601f106115eb57610100808354040283529160200191611616565b820191906000526020600020905b8154815290600101906020018083116115f957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156116ea57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611644565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561178b5761178a613679565b5b600281111561179d5761179c613679565b5b815250508383815181106117b4576117b3613d88565b5b602002602001018190525081806117ca90613de6565b9250505b80806117d990613de6565b915050611426565b5060008167ffffffffffffffff8111156117fe576117fd613965565b5b60405190808252806020026020018201604052801561183757816020015b6118246130f5565b81526020019060019003908161181c5790505b50905060005b828110156118915783818151811061185857611857613d88565b5b602002602001015182828151811061187357611872613d88565b5b6020026020010181905250808061188990613de6565b91505061183d565b5080935050505090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611922576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b60016000848152602001908152602001600020600001541415611975576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600281111561198957611988613679565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff1660028111156119bf576119be613679565b5b14611a025760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016119f99190613d01565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e906142e3565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611adf9190614303565b421115611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b18906143a5565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611cac575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611b8557611b84613d88565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c0b578180611bdd90613de6565b9250506001600085815260200190815260200160002060080180549050821115611c0657611c0b565b611b46565b60016000858152602001908152602001600020600801805490508211611cab57600160008581526020019081526020016000206008018281548110611c5357611c52613d88565b5b9060005260206000209060040201600101548310611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d90614437565b60405180910390fd5b600190505b5b600115158115151415611ece5782600160008681526020019081526020016000206008018381548110611ce257611ce1613d88565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611d50919061342f565b604080518083038186803b158015611d6757600080fd5b505afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f91906144c1565b60000151600160008681526020019081526020016000206008018381548110611dcb57611dca613d88565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611e39919061342f565b604080518083038186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8891906144c1565b60200151600160008681526020019081526020016000206008018381548110611eb457611eb3613d88565b5b90600052602060002090600402016003018190555061212b565b611ed661320c565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611f71919061342f565b604080518083038186803b158015611f8857600080fd5b505afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc091906144c1565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401612026919061342f565b604080518083038186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207591906144c1565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c6684338560405161215e939291906144ee565b60405180910390a150505050565b6060600060028054905067ffffffffffffffff81111561218f5761218e613965565b5b6040519080825280602002602001820160405280156121c857816020015b6121b56130f5565b8152602001906001900390816121ad5790505b5090506000805b60028054905081101561267857600060028111156121f0576121ef613679565b5b600160006002848154811061220857612207613d88565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff16600281111561224457612243613679565b5b1480156122c45750600160006002838154811061226457612263613d88565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061229957612298613d88565b5b90600052602060002001548152602001908152602001600020600201546122c09190614303565b4211155b801561235057503373ffffffffffffffffffffffffffffffffffffffff1660016000600284815481106122fa576122f9613d88565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561266557600160006002838154811061236d5761236c613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461243490614090565b80601f016020809104026020016040519081016040528092919081815260200182805461246090614090565b80156124ad5780601f10612482576101008083540402835291602001916124ad565b820191906000526020600020905b81548152906001019060200180831161249057829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561258157838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050815260200190600101906124db565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561262257612621613679565b5b600281111561263457612633613679565b5b8152505083838151811061264b5761264a613d88565b5b6020026020010181905250818061266190613de6565b9250505b808061267090613de6565b9150506121cf565b5060008167ffffffffffffffff81111561269557612694613965565b5b6040519080825280602002602001820160405280156126ce57816020015b6126bb61324a565b8152602001906001900390816126b35790505b50905060005b82811015612906578381815181106126ef576126ee613d88565b5b602002602001015182828151811061270a57612709613d88565b5b60200260200101516000018190525060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db585838151811061276857612767613d88565b5b6020026020010151602001516040518263ffffffff1660e01b8152600401612790919061342f565b604080518083038186803b1580156127a757600080fd5b505afa1580156127bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127df9190614575565b600001518282815181106127f6576127f5613d88565b5b6020026020010151602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db585838151811061285557612854613d88565b5b6020026020010151602001516040518263ffffffff1660e01b815260040161287d919061342f565b604080518083038186803b15801561289457600080fd5b505afa1580156128a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cc9190614575565b602001518282815181106128e3576128e2613d88565b5b6020026020010151604001818152505080806128fe90613de6565b9150506126d4565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612995576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a5f576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612aa857612aa7613965565b5b604051908082528060200260200182016040528015612ae157816020015b612ace6130f5565b815260200190600190039081612ac65790505b5090506000805b60028054905081101561300b5760006002811115612b0957612b08613679565b5b6001600060028481548110612b2157612b20613d88565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612b5d57612b5c613679565b5b148015612bdd57506001600060028381548110612b7d57612b7c613d88565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612bb257612bb1613d88565b5b9060005260206000200154815260200190815260200160002060020154612bd99190614303565b4211155b15612ff85760005b6001600060028481548110612bfd57612bfc613d88565b5b9060005260206000200154815260200190815260200160002060080180549050811015612ff6573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612c5357612c52613d88565b5b906000526020600020015481526020019081526020016000206008018281548110612c8157612c80613d88565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612fe3576001600060028481548110612ce757612ce6613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612dae90614090565b80601f0160208091040260200160405190810160405280929190818152602001828054612dda90614090565b8015612e275780601f10612dfc57610100808354040283529160200191612e27565b820191906000526020600020905b815481529060010190602001808311612e0a57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612efb57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612e55565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115612f9c57612f9b613679565b5b6002811115612fae57612fad613679565b5b81525050848481518110612fc557612fc4613d88565b5b60200260200101819052508280612fdb90613de6565b935050612ff6565b8080612fee90613de6565b915050612be5565b505b808061300390613de6565b915050612ae8565b5060008167ffffffffffffffff81111561302857613027613965565b5b60405190808252806020026020018201604052801561306157816020015b61304e6130f5565b8152602001906001900390816130465790505b50905060005b828110156130bb5783818151811061308257613081613d88565b5b602002602001015182828151811061309d5761309c613d88565b5b602002602001018190525080806130b390613de6565b915050613067565b5080935050505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160608152602001606081526020016131676130c5565b8152602001600060028111156131805761317f613679565b5b81525090565b82805461319290614090565b90600052602060002090601f0160209004810192826131b457600085556131fb565b82601f106131cd57805160ff19168380011785556131fb565b828001600101855582156131fb579182015b828111156131fa5782518255916020019190600101906131df565b5b5090506132089190613271565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806060016040528061325d6130f5565b815260200160008152602001600081525090565b5b8082111561328a576000816000905550600101613272565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006132d560088361328e565b91506132e08261329f565b602082019050919050565b60006020820190508181036000830152613304816132c8565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6133328161331f565b811461333d57600080fd5b50565b60008135905061334f81613329565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061338082613355565b9050919050565b61339081613375565b811461339b57600080fd5b50565b6000813590506133ad81613387565b92915050565b600080604083850312156133ca576133c9613315565b5b60006133d885828601613340565b92505060206133e98582860161339e565b9150509250929050565b60006020828403121561340957613408613315565b5b600061341784828501613340565b91505092915050565b61342981613375565b82525050565b60006020820190506134446000830184613420565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61347f8161331f565b82525050565b61348e81613375565b82525050565b6000819050919050565b6134a781613494565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156134e75780820151818401526020810190506134cc565b838111156134f6576000848401525b50505050565b6000601f19601f8301169050919050565b6000613518826134ad565b61352281856134b8565b93506135328185602086016134c9565b61353b816134fc565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516135886000850182613485565b50602082015161359b602085018261349e565b5060408201516135ae604085018261349e565b5060608201516135c1606085018261349e565b50505050565b60006135d38383613572565b60808301905092915050565b6000602082019050919050565b60006135f782613546565b6136018185613551565b935061360c83613562565b8060005b8381101561363d57815161362488826135c7565b975061362f836135df565b925050600181019050613610565b5085935050505092915050565b6040820160008201516136606000850182613485565b506020820151613673602085018261349e565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106136b9576136b8613679565b5b50565b60008190506136ca826136a8565b919050565b60006136da826136bc565b9050919050565b6136ea816136cf565b82525050565b6000610180830160008301516137096000860182613476565b50602083015161371c6020860182613485565b50604083015161372f604086018261349e565b506060830151613742606086018261349e565b506080830151613755608086018261349e565b5060a083015161376860a0860182613476565b5060c083015161377b60c0860182613476565b5060e083015184820360e0860152613793828261350d565b9150506101008301518482036101008601526137af82826135ec565b9150506101208301516137c661012086018261364a565b506101408301516137db6101608601826136e1565b508091505092915050565b60006137f283836136f0565b905092915050565b6000602082019050919050565b60006138128261344a565b61381c8185613455565b93508360208202850161382e85613466565b8060005b8581101561386a578484038952815161384b85826137e6565b9450613856836137fa565b925060208a01995050600181019050613832565b50829750879550505050505092915050565b600060208201905081810360008301526138968184613807565b905092915050565b600082825260208201905092915050565b60006138ba82613546565b6138c4818561389e565b93506138cf83613562565b8060005b838110156139005781516138e788826135c7565b97506138f2836135df565b9250506001810190506138d3565b5085935050505092915050565b6000602082019050818103600083015261392781846138af565b905092915050565b61393881613494565b811461394357600080fd5b50565b6000813590506139558161392f565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61399d826134fc565b810181811067ffffffffffffffff821117156139bc576139bb613965565b5b80604052505050565b60006139cf61330b565b90506139db8282613994565b919050565b600067ffffffffffffffff8211156139fb576139fa613965565b5b613a04826134fc565b9050602081019050919050565b82818337600083830152505050565b6000613a33613a2e846139e0565b6139c5565b905082815260208101848484011115613a4f57613a4e613960565b5b613a5a848285613a11565b509392505050565b600082601f830112613a7757613a7661395b565b5b8135613a87848260208601613a20565b91505092915050565b60008060008060808587031215613aaa57613aa9613315565b5b6000613ab887828801613946565b9450506020613ac987828801613946565b9350506040613ada87828801613340565b925050606085013567ffffffffffffffff811115613afb57613afa61331a565b5b613b0787828801613a62565b91505092959194509250565b60008060408385031215613b2a57613b29613315565b5b6000613b3885828601613340565b9250506020613b4985828601613946565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301518482036000860152613b9c82826136f0565b9150506020830151613bb1602086018261349e565b506040830151613bc4604086018261349e565b508091505092915050565b6000613bdb8383613b7f565b905092915050565b6000602082019050919050565b6000613bfb82613b53565b613c058185613b5e565b935083602082028501613c1785613b6f565b8060005b85811015613c535784840389528151613c348582613bcf565b9450613c3f83613be3565b925060208a01995050600181019050613c1b565b50829750879550505050505092915050565b60006020820190508181036000830152613c7f8184613bf0565b905092915050565b6000613c9282613355565b9050919050565b613ca281613c87565b8114613cad57600080fd5b50565b600081359050613cbf81613c99565b92915050565b600060208284031215613cdb57613cda613315565b5b6000613ce984828501613cb0565b91505092915050565b613cfb816136cf565b82525050565b6000602082019050613d166000830184613cf2565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613d5260148361328e565b9150613d5d82613d1c565b602082019050919050565b60006020820190508181036000830152613d8181613d45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613df182613494565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e2457613e23613db7565b5b600182019050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613e6560168361328e565b9150613e7082613e2f565b602082019050919050565b60006020820190508181036000830152613e9481613e58565b9050919050565b6000613ea682613494565b9150613eb183613494565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613eea57613ee9613db7565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b6000613f2b60208361328e565b9150613f3682613ef5565b602082019050919050565b60006020820190508181036000830152613f5a81613f1e565b9050919050565b613f6a8161331f565b82525050565b6000606082019050613f856000830186613f61565b613f926020830185613420565b613f9f6040830184613420565b949350505050565b604082016000820151613fbd6000850182613485565b506020820151613fd0602085018261349e565b50505050565b613fdf81613494565b82525050565b6000608082019050613ffa6000830186613420565b6140076020830185613fa7565b6140146060830184613fd6565b949350505050565b60006080820190506140316000830187613f61565b61403e6020830186613f61565b61404b6040830185613420565b6140586060830184613420565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806140a857607f821691505b602082108114156140bc576140bb614061565b5b50919050565b60008190508160005260206000209050919050565b600081546140e481614090565b6140ee818661328e565b94506001821660008114614109576001811461411b5761414e565b60ff198316865260208601935061414e565b614124856140c2565b60005b8381101561414657815481890152600182019150602081019050614127565b808801955050505b50505092915050565b600060e08201905061416c600083018a613f61565b6141796020830189613420565b6141866040830188613420565b6141936060830187613fd6565b6141a06080830186613fd6565b6141ad60a0830185613f61565b81810360c08301526141bf81846140d7565b905098975050505050505050565b60006040820190506141e26000830185613f61565b6141ef6020830184613420565b9392505050565b6000614201826134ad565b61420b818561328e565b935061421b8185602086016134c9565b614224816134fc565b840191505092915050565b600060c0820190506142446000830189613fd6565b6142516020830188613420565b61425e6040830187613fd6565b61426b6060830186613fd6565b6142786080830185613f61565b81810360a083015261428a81846141f6565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b60006142cd60208361328e565b91506142d882614297565b602082019050919050565b600060208201905081810360008301526142fc816142c0565b9050919050565b600061430e82613494565b915061431983613494565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561434e5761434d613db7565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b600061438f60118361328e565b915061439a82614359565b602082019050919050565b600060208201905081810360008301526143be81614382565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000614421602c8361328e565b915061442c826143c5565b604082019050919050565b6000602082019050818103600083015261445081614414565b9050919050565b600080fd5b60008151905061446b8161392f565b92915050565b60006040828403121561448757614486614457565b5b61449160406139c5565b905060006144a18482850161445c565b60008301525060206144b58482850161445c565b60208301525092915050565b6000604082840312156144d7576144d6613315565b5b60006144e584828501614471565b91505092915050565b60006060820190506145036000830186613f61565b6145106020830185613420565b61451d6040830184613fd6565b949350505050565b60006040828403121561453b5761453a614457565b5b61454560406139c5565b905060006145558482850161445c565b60008301525060206145698482850161445c565b60208301525092915050565b60006040828403121561458b5761458a613315565b5b600061459984828501614525565b9150509291505056fea2646970667358221220dfc9c81a46dd447d894df8c068d5f7e0622ecaddbe443c64329a211f5244e6f164736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c8063c618e93811610064578063c618e938146101f1578063cd772f5c1461021c578063cf44b5d514610245578063e0a7632414610270578063e151556314610299578063e369e93c146102c4576100eb565b806312e1d724146100f05780633ef4d1301461010c578063893d20e8146101355780639ad01fde146101605780639b680e7d1461018b578063a02daf96146101c8576100eb565b366100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e2906132eb565b60405180910390fd5b600080fd5b61010a600480360381019061010591906133b3565b6102ef565b005b34801561011857600080fd5b50610133600480360381019061012e91906133f3565b6109ce565b005b34801561014157600080fd5b5061014a610bf9565b604051610157919061342f565b60405180910390f35b34801561016c57600080fd5b50610175610c21565b604051610182919061387c565b60405180910390f35b34801561019757600080fd5b506101b260048036038101906101ad91906133f3565b6110f6565b6040516101bf919061390d565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190613a90565b6111df565b005b3480156101fd57600080fd5b506102066113c3565b604051610213919061387c565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190613b13565b61189b565b005b34801561025157600080fd5b5061025a61216c565b6040516102679190613c65565b60405180910390f35b34801561027c57600080fd5b5061029760048036038101906102929190613cc5565b612910565b005b3480156102a557600080fd5b506102ae6129d8565b6040516102bb919061342f565b60405180910390f35b3480156102d057600080fd5b506102d9612a85565b6040516102e6919061387c565b60405180910390f35b6000801b60016000848152602001908152602001600020600001541415610342576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103dd576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156103f1576103f0613679565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561042757610426613679565b5b1461046a5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016104619190613d01565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156104c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bf90613d68565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff1660016000858152602001908152602001600020600801828154811061050857610507613d88565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461058d57808061056090613de6565b915050600160008481526020019081526020016000206008018054905081106105885761058d565b6104c9565b600160008481526020019081526020016000206008018054905081106105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90613e7b565b60405180910390fd5b6105f06130c5565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001600085815260200190815260200160002060080182815481106106505761064f613d88565b5b9060005260206000209060040201600101548160200181815250506002816020015161067c9190613e9b565b34146106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490613f41565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561077957610778613679565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516107e793929190613f70565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16834260405160200161082a93929190613fe5565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040516108c8949392919061401c565b60405180910390a16000600260016000898152602001908152602001600020600901600101546108f89190613e9b565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b81526004016109939796959493929190614157565b6000604051808303818588803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610a21576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610abc576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610ad057610acf613679565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610b0657610b05613679565b5b14610b495760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610b409190613d01565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610b8257610b81613679565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610bee9291906141cd565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610c4457610c43613965565b5b604051908082528060200260200182016040528015610c7d57816020015b610c6a6130f5565b815260200190600190039081610c625790505b5090506000805b60028054905081101561103c573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610cc057610cbf613d88565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611029576001600060028381548110610d3157610d30613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054610df890614090565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2490614090565b8015610e715780601f10610e4657610100808354040283529160200191610e71565b820191906000526020600020905b815481529060010190602001808311610e5457829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f4557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610e9f565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115610fe657610fe5613679565b5b6002811115610ff857610ff7613679565b5b8152505083838151811061100f5761100e613d88565b5b6020026020010181905250818061102590613de6565b9250505b808061103490613de6565b915050610c84565b5060008167ffffffffffffffff81111561105957611058613965565b5b60405190808252806020026020018201604052801561109257816020015b61107f6130f5565b8152602001906001900390816110775790505b50905060005b828110156110ec578381815181106110b3576110b2613d88565b5b60200260200101518282815181106110ce576110cd613d88565b5b602002602001018190525080806110e490613de6565b915050611098565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156111d457838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061112e565b505050509050919050565b60004233868686866040516020016111fc9695949392919061422f565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061131a929190613186565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561135557611354613679565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516113b49291906141cd565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156113e6576113e5613965565b5b60405190808252806020026020018201604052801561141f57816020015b61140c6130f5565b8152602001906001900390816114045790505b5090506000805b6002805490508110156117e1573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061146257611461613d88565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117ce5760016000600283815481106114d6576114d5613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461159d90614090565b80601f01602080910402602001604051908101604052809291908181526020018280546115c990614090565b80156116165780601f106115eb57610100808354040283529160200191611616565b820191906000526020600020905b8154815290600101906020018083116115f957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156116ea57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611644565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561178b5761178a613679565b5b600281111561179d5761179c613679565b5b815250508383815181106117b4576117b3613d88565b5b602002602001018190525081806117ca90613de6565b9250505b80806117d990613de6565b915050611426565b5060008167ffffffffffffffff8111156117fe576117fd613965565b5b60405190808252806020026020018201604052801561183757816020015b6118246130f5565b81526020019060019003908161181c5790505b50905060005b828110156118915783818151811061185857611857613d88565b5b602002602001015182828151811061187357611872613d88565b5b6020026020010181905250808061188990613de6565b91505061183d565b5080935050505090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611922576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b60016000848152602001908152602001600020600001541415611975576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600281111561198957611988613679565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff1660028111156119bf576119be613679565b5b14611a025760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016119f99190613d01565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e906142e3565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611adf9190614303565b421115611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b18906143a5565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611cac575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611b8557611b84613d88565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c0b578180611bdd90613de6565b9250506001600085815260200190815260200160002060080180549050821115611c0657611c0b565b611b46565b60016000858152602001908152602001600020600801805490508211611cab57600160008581526020019081526020016000206008018281548110611c5357611c52613d88565b5b9060005260206000209060040201600101548310611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d90614437565b60405180910390fd5b600190505b5b600115158115151415611ece5782600160008681526020019081526020016000206008018381548110611ce257611ce1613d88565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611d50919061342f565b604080518083038186803b158015611d6757600080fd5b505afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f91906144c1565b60000151600160008681526020019081526020016000206008018381548110611dcb57611dca613d88565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611e39919061342f565b604080518083038186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8891906144c1565b60200151600160008681526020019081526020016000206008018381548110611eb457611eb3613d88565b5b90600052602060002090600402016003018190555061212b565b611ed661320c565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401611f71919061342f565b604080518083038186803b158015611f8857600080fd5b505afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc091906144c1565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab893cb3336040518263ffffffff1660e01b8152600401612026919061342f565b604080518083038186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207591906144c1565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c6684338560405161215e939291906144ee565b60405180910390a150505050565b6060600060028054905067ffffffffffffffff81111561218f5761218e613965565b5b6040519080825280602002602001820160405280156121c857816020015b6121b56130f5565b8152602001906001900390816121ad5790505b5090506000805b60028054905081101561267857600060028111156121f0576121ef613679565b5b600160006002848154811061220857612207613d88565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff16600281111561224457612243613679565b5b1480156122c45750600160006002838154811061226457612263613d88565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061229957612298613d88565b5b90600052602060002001548152602001908152602001600020600201546122c09190614303565b4211155b801561235057503373ffffffffffffffffffffffffffffffffffffffff1660016000600284815481106122fa576122f9613d88565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561266557600160006002838154811061236d5761236c613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461243490614090565b80601f016020809104026020016040519081016040528092919081815260200182805461246090614090565b80156124ad5780601f10612482576101008083540402835291602001916124ad565b820191906000526020600020905b81548152906001019060200180831161249057829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561258157838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050815260200190600101906124db565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561262257612621613679565b5b600281111561263457612633613679565b5b8152505083838151811061264b5761264a613d88565b5b6020026020010181905250818061266190613de6565b9250505b808061267090613de6565b9150506121cf565b5060008167ffffffffffffffff81111561269557612694613965565b5b6040519080825280602002602001820160405280156126ce57816020015b6126bb61324a565b8152602001906001900390816126b35790505b50905060005b82811015612906578381815181106126ef576126ee613d88565b5b602002602001015182828151811061270a57612709613d88565b5b60200260200101516000018190525060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db585838151811061276857612767613d88565b5b6020026020010151602001516040518263ffffffff1660e01b8152600401612790919061342f565b604080518083038186803b1580156127a757600080fd5b505afa1580156127bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127df9190614575565b600001518282815181106127f6576127f5613d88565b5b6020026020010151602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c04db585838151811061285557612854613d88565b5b6020026020010151602001516040518263ffffffff1660e01b815260040161287d919061342f565b604080518083038186803b15801561289457600080fd5b505afa1580156128a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cc9190614575565b602001518282815181106128e3576128e2613d88565b5b6020026020010151604001818152505080806128fe90613de6565b9150506126d4565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612995576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a5f576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612aa857612aa7613965565b5b604051908082528060200260200182016040528015612ae157816020015b612ace6130f5565b815260200190600190039081612ac65790505b5090506000805b60028054905081101561300b5760006002811115612b0957612b08613679565b5b6001600060028481548110612b2157612b20613d88565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612b5d57612b5c613679565b5b148015612bdd57506001600060028381548110612b7d57612b7c613d88565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612bb257612bb1613d88565b5b9060005260206000200154815260200190815260200160002060020154612bd99190614303565b4211155b15612ff85760005b6001600060028481548110612bfd57612bfc613d88565b5b9060005260206000200154815260200190815260200160002060080180549050811015612ff6573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612c5357612c52613d88565b5b906000526020600020015481526020019081526020016000206008018281548110612c8157612c80613d88565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612fe3576001600060028481548110612ce757612ce6613d88565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612dae90614090565b80601f0160208091040260200160405190810160405280929190818152602001828054612dda90614090565b8015612e275780601f10612dfc57610100808354040283529160200191612e27565b820191906000526020600020905b815481529060010190602001808311612e0a57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015612efb57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612e55565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115612f9c57612f9b613679565b5b6002811115612fae57612fad613679565b5b81525050848481518110612fc557612fc4613d88565b5b60200260200101819052508280612fdb90613de6565b935050612ff6565b8080612fee90613de6565b915050612be5565b505b808061300390613de6565b915050612ae8565b5060008167ffffffffffffffff81111561302857613027613965565b5b60405190808252806020026020018201604052801561306157816020015b61304e6130f5565b8152602001906001900390816130465790505b50905060005b828110156130bb5783818151811061308257613081613d88565b5b602002602001015182828151811061309d5761309c613d88565b5b602002602001018190525080806130b390613de6565b915050613067565b5080935050505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160608152602001606081526020016131676130c5565b8152602001600060028111156131805761317f613679565b5b81525090565b82805461319290614090565b90600052602060002090601f0160209004810192826131b457600085556131fb565b82601f106131cd57805160ff19168380011785556131fb565b828001600101855582156131fb579182015b828111156131fa5782518255916020019190600101906131df565b5b5090506132089190613271565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806060016040528061325d6130f5565b815260200160008152602001600081525090565b5b8082111561328a576000816000905550600101613272565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b60006132d560088361328e565b91506132e08261329f565b602082019050919050565b60006020820190508181036000830152613304816132c8565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6133328161331f565b811461333d57600080fd5b50565b60008135905061334f81613329565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061338082613355565b9050919050565b61339081613375565b811461339b57600080fd5b50565b6000813590506133ad81613387565b92915050565b600080604083850312156133ca576133c9613315565b5b60006133d885828601613340565b92505060206133e98582860161339e565b9150509250929050565b60006020828403121561340957613408613315565b5b600061341784828501613340565b91505092915050565b61342981613375565b82525050565b60006020820190506134446000830184613420565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61347f8161331f565b82525050565b61348e81613375565b82525050565b6000819050919050565b6134a781613494565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156134e75780820151818401526020810190506134cc565b838111156134f6576000848401525b50505050565b6000601f19601f8301169050919050565b6000613518826134ad565b61352281856134b8565b93506135328185602086016134c9565b61353b816134fc565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516135886000850182613485565b50602082015161359b602085018261349e565b5060408201516135ae604085018261349e565b5060608201516135c1606085018261349e565b50505050565b60006135d38383613572565b60808301905092915050565b6000602082019050919050565b60006135f782613546565b6136018185613551565b935061360c83613562565b8060005b8381101561363d57815161362488826135c7565b975061362f836135df565b925050600181019050613610565b5085935050505092915050565b6040820160008201516136606000850182613485565b506020820151613673602085018261349e565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106136b9576136b8613679565b5b50565b60008190506136ca826136a8565b919050565b60006136da826136bc565b9050919050565b6136ea816136cf565b82525050565b6000610180830160008301516137096000860182613476565b50602083015161371c6020860182613485565b50604083015161372f604086018261349e565b506060830151613742606086018261349e565b506080830151613755608086018261349e565b5060a083015161376860a0860182613476565b5060c083015161377b60c0860182613476565b5060e083015184820360e0860152613793828261350d565b9150506101008301518482036101008601526137af82826135ec565b9150506101208301516137c661012086018261364a565b506101408301516137db6101608601826136e1565b508091505092915050565b60006137f283836136f0565b905092915050565b6000602082019050919050565b60006138128261344a565b61381c8185613455565b93508360208202850161382e85613466565b8060005b8581101561386a578484038952815161384b85826137e6565b9450613856836137fa565b925060208a01995050600181019050613832565b50829750879550505050505092915050565b600060208201905081810360008301526138968184613807565b905092915050565b600082825260208201905092915050565b60006138ba82613546565b6138c4818561389e565b93506138cf83613562565b8060005b838110156139005781516138e788826135c7565b97506138f2836135df565b9250506001810190506138d3565b5085935050505092915050565b6000602082019050818103600083015261392781846138af565b905092915050565b61393881613494565b811461394357600080fd5b50565b6000813590506139558161392f565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61399d826134fc565b810181811067ffffffffffffffff821117156139bc576139bb613965565b5b80604052505050565b60006139cf61330b565b90506139db8282613994565b919050565b600067ffffffffffffffff8211156139fb576139fa613965565b5b613a04826134fc565b9050602081019050919050565b82818337600083830152505050565b6000613a33613a2e846139e0565b6139c5565b905082815260208101848484011115613a4f57613a4e613960565b5b613a5a848285613a11565b509392505050565b600082601f830112613a7757613a7661395b565b5b8135613a87848260208601613a20565b91505092915050565b60008060008060808587031215613aaa57613aa9613315565b5b6000613ab887828801613946565b9450506020613ac987828801613946565b9350506040613ada87828801613340565b925050606085013567ffffffffffffffff811115613afb57613afa61331a565b5b613b0787828801613a62565b91505092959194509250565b60008060408385031215613b2a57613b29613315565b5b6000613b3885828601613340565b9250506020613b4985828601613946565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301518482036000860152613b9c82826136f0565b9150506020830151613bb1602086018261349e565b506040830151613bc4604086018261349e565b508091505092915050565b6000613bdb8383613b7f565b905092915050565b6000602082019050919050565b6000613bfb82613b53565b613c058185613b5e565b935083602082028501613c1785613b6f565b8060005b85811015613c535784840389528151613c348582613bcf565b9450613c3f83613be3565b925060208a01995050600181019050613c1b565b50829750879550505050505092915050565b60006020820190508181036000830152613c7f8184613bf0565b905092915050565b6000613c9282613355565b9050919050565b613ca281613c87565b8114613cad57600080fd5b50565b600081359050613cbf81613c99565b92915050565b600060208284031215613cdb57613cda613315565b5b6000613ce984828501613cb0565b91505092915050565b613cfb816136cf565b82525050565b6000602082019050613d166000830184613cf2565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613d5260148361328e565b9150613d5d82613d1c565b602082019050919050565b60006020820190508181036000830152613d8181613d45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613df182613494565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e2457613e23613db7565b5b600182019050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613e6560168361328e565b9150613e7082613e2f565b602082019050919050565b60006020820190508181036000830152613e9481613e58565b9050919050565b6000613ea682613494565b9150613eb183613494565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613eea57613ee9613db7565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b6000613f2b60208361328e565b9150613f3682613ef5565b602082019050919050565b60006020820190508181036000830152613f5a81613f1e565b9050919050565b613f6a8161331f565b82525050565b6000606082019050613f856000830186613f61565b613f926020830185613420565b613f9f6040830184613420565b949350505050565b604082016000820151613fbd6000850182613485565b506020820151613fd0602085018261349e565b50505050565b613fdf81613494565b82525050565b6000608082019050613ffa6000830186613420565b6140076020830185613fa7565b6140146060830184613fd6565b949350505050565b60006080820190506140316000830187613f61565b61403e6020830186613f61565b61404b6040830185613420565b6140586060830184613420565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806140a857607f821691505b602082108114156140bc576140bb614061565b5b50919050565b60008190508160005260206000209050919050565b600081546140e481614090565b6140ee818661328e565b94506001821660008114614109576001811461411b5761414e565b60ff198316865260208601935061414e565b614124856140c2565b60005b8381101561414657815481890152600182019150602081019050614127565b808801955050505b50505092915050565b600060e08201905061416c600083018a613f61565b6141796020830189613420565b6141866040830188613420565b6141936060830187613fd6565b6141a06080830186613fd6565b6141ad60a0830185613f61565b81810360c08301526141bf81846140d7565b905098975050505050505050565b60006040820190506141e26000830185613f61565b6141ef6020830184613420565b9392505050565b6000614201826134ad565b61420b818561328e565b935061421b8185602086016134c9565b614224816134fc565b840191505092915050565b600060c0820190506142446000830189613fd6565b6142516020830188613420565b61425e6040830187613fd6565b61426b6060830186613fd6565b6142786080830185613f61565b81810360a083015261428a81846141f6565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b60006142cd60208361328e565b91506142d882614297565b602082019050919050565b600060208201905081810360008301526142fc816142c0565b9050919050565b600061430e82613494565b915061431983613494565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561434e5761434d613db7565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b600061438f60118361328e565b915061439a82614359565b602082019050919050565b600060208201905081810360008301526143be81614382565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000614421602c8361328e565b915061442c826143c5565b604082019050919050565b6000602082019050818103600083015261445081614414565b9050919050565b600080fd5b60008151905061446b8161392f565b92915050565b60006040828403121561448757614486614457565b5b61449160406139c5565b905060006144a18482850161445c565b60008301525060206144b58482850161445c565b60208301525092915050565b6000604082840312156144d7576144d6613315565b5b60006144e584828501614471565b91505092915050565b60006060820190506145036000830186613f61565b6145106020830185613420565b61451d6040830184613fd6565b949350505050565b60006040828403121561453b5761453a614457565b5b61454560406139c5565b905060006145558482850161445c565b60008301525060206145698482850161445c565b60208301525092915050565b60006040828403121561458b5761458a613315565b5b600061459984828501614525565b9150509291505056fea2646970667358221220dfc9c81a46dd447d894df8c068d5f7e0622ecaddbe443c64329a211f5244e6f164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "tasksManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TasksManager)3429"
      },
      {
        "astId": 65,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Auction)38_storage)"
      },
      {
        "astId": 68,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "bytes32_auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProviderBid)47_storage)dyn_storage": {
        "base": "t_struct(ProviderBid)47_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionsManager.ProviderBid[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TasksManager)3429": {
        "encoding": "inplace",
        "label": "contract TasksManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)11": {
        "encoding": "inplace",
        "label": "enum AuctionsManager.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)38_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionsManager.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)38_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)38_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.Auction",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "client",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskDeadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "clientVerification",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 25,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskID",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 27,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "code",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 31,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerBids",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(ProviderBid)47_storage)dyn_storage"
          },
          {
            "astId": 34,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "winnerBid",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(WinnerBid)52_storage"
          },
          {
            "astId": 37,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionState",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(AuctionState)11"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(ProviderBid)47_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.ProviderBid",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 42,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerUpVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerDownVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WinnerBid)52_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.WinnerBid",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 51,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}