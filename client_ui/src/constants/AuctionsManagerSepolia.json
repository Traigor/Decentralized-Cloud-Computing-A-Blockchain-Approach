{
  "address": "0x225e5ca9AAF9efb5b98B82ceb081534633c1506f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuctionsManager.AuctionState",
          "name": "auctionState",
          "type": "uint8"
        }
      ],
      "name": "AuctionNotInState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByClient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCalledByOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TasksManagerNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        }
      ],
      "name": "AuctionDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "AuctionFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "auctionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "TaskIDCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taskDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_clientVerification",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "deleteAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionActiveBidsByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_auctionID",
          "type": "bytes32"
        }
      ],
      "name": "getAuctionBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerUpVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "providerDownVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionsManager.ProviderBid[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionWinnersByProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionsByClient",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "auctionID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskDeadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "clientVerification",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "taskID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerUpVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "providerDownVotes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.ProviderBid[]",
              "name": "providerBids",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "provider",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bid",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AuctionsManager.WinnerBid",
              "name": "winnerBid",
              "type": "tuple"
            },
            {
              "internalType": "enum AuctionsManager.AuctionState",
              "name": "auctionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct AuctionsManager.Auction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tasksManagerAddress",
          "type": "address"
        }
      ],
      "name": "setTasksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc178b191779e1131a3722d41262d3ad0a9ff1e4779ca76bf5156c0dc658b5bc2",
  "receipt": {
    "to": null,
    "from": "0xB3b0E9E018bA957e29d6C883A84412972C6A7366",
    "contractAddress": "0x225e5ca9AAF9efb5b98B82ceb081534633c1506f",
    "transactionIndex": 15,
    "gasUsed": "3929199",
    "logsBloom": "0x
    "blockHash": "0x90d109cab9fa8efe8fb32ecd976b54d3de1bf334db035a710eca15c6702055d2",
    "transactionHash": "0xc178b191779e1131a3722d41262d3ad0a9ff1e4779ca76bf5156c0dc658b5bc2",
    "logs": [],
    "blockNumber": 4276414,
    "cumulativeGasUsed": "4820059",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "e242286f9a4c76efb0258ede3eaa2e89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"name\":\"AuctionNotInState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByClient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCalledByOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TasksManagerNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"}],\"name\":\"AuctionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"TaskIDCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"deleteAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionActiveBidsByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionID\",\"type\":\"bytes32\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionWinnersByProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionsByClient\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"auctionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientVerification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"taskID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerUpVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerDownVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.ProviderBid[]\",\"name\":\"providerBids\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionsManager.WinnerBid\",\"name\":\"winnerBid\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionsManager.AuctionState\",\"name\":\"auctionState\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionsManager.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tasksManagerAddress\",\"type\":\"address\"}],\"name\":\"setTasksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionsManager.sol\":\"AuctionsManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AuctionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TasksManager.sol\\\";\\n\\ncontract AuctionsManager {\\n     address private immutable owner; \\n     TasksManager tasksManager;\\n\\n     enum AuctionState {\\n        Created,\\n        Cancelled, \\n        Finalized\\n    }\\n\\n    struct Auction {\\n        bytes32 auctionID;\\n        address client;\\n        uint creationTime;\\n        uint auctionDeadline;\\n        uint taskDeadline;\\n        bytes32 clientVerification;\\n        bytes32 taskID;\\n        string code;\\n        ProviderBid[] providerBids;\\n        WinnerBid winnerBid;\\n        AuctionState auctionState;   \\n    }\\n\\n    struct ProviderBid {\\n        address provider;\\n        uint bid;\\n        uint providerUpVotes;\\n        uint providerDownVotes;\\n    }\\n\\n    struct WinnerBid {\\n        address provider;\\n        uint bid;\\n    }\\n\\n    mapping (bytes32 => Auction) private auctions;\\n    bytes32[] private bytes32_auctions;\\n\\n    //Events\\n    event AuctionCreated(bytes32 auctionID, address client);\\n    event AuctionCancelled(bytes32 auctionID, address client);\\n    event AuctionFinalized(bytes32 auctionID, address client, address provider);\\n    event AuctionDeleted(bytes32 auctionID);\\n    event BidPlaced(bytes32 auctionID, address provider, uint bid);\\n    event TaskIDCreated(bytes32 auctionID, bytes32 taskID, address client, address provider);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByClient();\\n    error AuctionDoesNotExist();\\n    error AuctionNotInState(AuctionState auctionState);\\n    error TasksManagerNotSet();\\n\\n    constructor()  {\\n        owner = msg.sender;\\n    }\\n\\n    function setTasksManager(address payable _tasksManagerAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        tasksManager = TasksManager(_tasksManagerAddress);\\n    }\\n\\n    function createAuction(\\n        uint _auctionDeadline, \\n        uint _taskDeadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public \\n    {\\n        bytes32 _auctionID = keccak256(abi.encode(block.timestamp, msg.sender, _auctionDeadline, _taskDeadline, _clientVerification, _code));\\n        auctions[_auctionID].auctionID = _auctionID;\\n        auctions[_auctionID].client = msg.sender;\\n        auctions[_auctionID].creationTime = block.timestamp;\\n        auctions[_auctionID].auctionDeadline = _auctionDeadline;\\n        auctions[_auctionID].taskDeadline = _taskDeadline;\\n        auctions[_auctionID].clientVerification = _clientVerification;\\n        auctions[_auctionID].code = _code;\\n\\n        auctions[_auctionID].auctionState = AuctionState.Created;\\n        bytes32_auctions.push(_auctionID);\\n        emit AuctionCreated( _auctionID, msg.sender);\\n    }\\n\\n    function cancelAuction(bytes32 _auctionID) public   {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();   \\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        auctions[_auctionID].auctionState = AuctionState.Cancelled;\\n        emit AuctionCancelled(_auctionID, auctions[_auctionID].client);\\n     }\\n\\n    function bid(bytes32 _auctionID, uint _bid) public {\\n        //tasks manager set\\n        if (address(tasksManager) == address(0))\\n            revert TasksManagerNotSet();\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        require(msg.sender != auctions[_auctionID].client, \\\"Client can't bid to this auction\\\"); \\n        require(\\n            (block.timestamp <= auctions[_auctionID].creationTime + auctions[_auctionID].auctionDeadline),\\n            \\\"Time has expired.\\\"\\n        );\\n        uint providerIndex = 0;\\n        bool providerExists = false;\\n        if(auctions[_auctionID].providerBids.length != 0)\\n        {    while(auctions[_auctionID].providerBids[providerIndex].provider != msg.sender)\\n            {\\n                providerIndex++;\\n                if(providerIndex > auctions[_auctionID].providerBids.length)\\n                    break;\\n            }\\n            if (providerIndex <= auctions[_auctionID].providerBids.length)\\n            {\\n                require(\\n                _bid < auctions[_auctionID].providerBids[providerIndex].bid,\\n                \\\"Bid is not lower than than the previous one.\\\"\\n                );\\n                providerExists = true;\\n            }\\n        }\\n        if(providerExists == true)\\n        {\\n            auctions[_auctionID].providerBids[providerIndex].bid = _bid;\\n            auctions[_auctionID].providerBids[providerIndex].providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n            auctions[_auctionID].providerBids[providerIndex].providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n        }\\n        else \\n        {\\n            ProviderBid memory currentBid;\\n            currentBid.provider = msg.sender;\\n            currentBid.bid = _bid;\\n            currentBid.providerUpVotes = tasksManager.getPerformance(msg.sender).upVotes;\\n            currentBid.providerDownVotes = tasksManager.getPerformance(msg.sender).downVotes;\\n            auctions[_auctionID].providerBids.push(currentBid);\\n        }\\n        emit BidPlaced(_auctionID, msg.sender, _bid);\\n     }\\n\\n    function finalize(bytes32 _auctionID, address _provider) public payable  {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //client only\\n        if (msg.sender != auctions[_auctionID].client) \\n            revert NotCalledByClient();\\n        //in auction state Created\\n        if (auctions[_auctionID].auctionState != AuctionState.Created) \\n            revert AuctionNotInState(AuctionState.Created);\\n        uint providerIndex = 0;\\n        if (auctions[_auctionID].providerBids.length == 0)\\n            revert(\\\"Auction has no bids.\\\");\\n        while(auctions[_auctionID].providerBids[providerIndex].provider != _provider)\\n        {\\n            providerIndex++;\\n            if(providerIndex >= auctions[_auctionID].providerBids.length)\\n                break;\\n        }\\n        if(providerIndex >= auctions[_auctionID].providerBids.length)\\n         revert(\\\"Wrong provider address\\\");\\n        WinnerBid memory _winnerBid;\\n        _winnerBid.provider = _provider;\\n        _winnerBid.bid = auctions[_auctionID].providerBids[providerIndex].bid;\\n        require (msg.value ==(_winnerBid.bid * 2), \\\"Client collateral is not correct\\\");\\n        auctions[_auctionID].winnerBid = _winnerBid;\\n        Auction storage currentAuction = auctions[_auctionID];\\n        auctions[_auctionID].auctionState = AuctionState.Finalized;\\n        emit AuctionFinalized(_auctionID, auctions[_auctionID].client,  _provider);\\n        bytes32 taskID = keccak256(abi.encode(currentAuction.client, _winnerBid, block.timestamp));\\n        auctions[_auctionID].taskID = taskID;\\n        emit TaskIDCreated(_auctionID, taskID, auctions[_auctionID].client , _provider);\\n        uint clientCollateral = auctions[_auctionID].winnerBid.bid * 2;\\n        tasksManager.createTask{value: clientCollateral}(taskID, currentAuction.client, _provider,  _winnerBid.bid, currentAuction.taskDeadline, currentAuction.clientVerification,currentAuction.code);\\n    }\\n\\n    function deleteAuction(bytes32 _auctionID) public {\\n        //existing auction\\n        if (auctions[_auctionID].auctionID == bytes32(0))\\n            revert AuctionDoesNotExist();\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        delete(auctions[_auctionID]);\\n        for (uint i=0; i < bytes32_auctions.length; i++)\\n        {\\n            if (bytes32_auctions[i] == _auctionID)\\n            {\\n                bytes32_auctions[i] = bytes32_auctions[bytes32_auctions.length - 1];\\n                bytes32_auctions.pop();\\n                break;\\n            }\\n        }\\n        emit AuctionDeleted(_auctionID);\\n    }\\n\\n    function getActiveAuctions() public view returns (Auction[] memory) {\\n        Auction[] memory activeAuctions = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline && auctions[bytes32_auctions[i]].client != msg.sender)\\n            {\\n                activeAuctions[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n         Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = activeAuctions[i];\\n        }\\n        return result;\\n    }\\n\\n\\n\\n    function getAuctionBids(bytes32 _auctionID) public view returns(ProviderBid[] memory) {\\n        return auctions[_auctionID].providerBids;\\n    }\\n\\n    function getAuctionsByClient() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByClient = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].client == msg.sender)\\n            {\\n                auctionsByClient[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByClient[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionWinnersByProvider() public view returns(Auction[] memory)\\n    {\\n        Auction[] memory auctionsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].winnerBid.provider == msg.sender)\\n            {\\n                auctionsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                auctionsLength++;\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = auctionsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getAuctionActiveBidsByProvider() public view returns (Auction[] memory) \\n    {\\n        Auction[] memory activeBidsByProvider = new Auction[](bytes32_auctions.length);\\n        uint auctionsLength = 0;\\n        for (uint i = 0; i < bytes32_auctions.length; i++)\\n        {\\n            if (auctions[bytes32_auctions[i]].auctionState == AuctionState.Created && block.timestamp <= auctions[bytes32_auctions[i]].creationTime + auctions[bytes32_auctions[i]].auctionDeadline)\\n            {\\n                for (uint j = 0; j < auctions[bytes32_auctions[i]].providerBids.length; j++)\\n                {\\n                    if (auctions[bytes32_auctions[i]].providerBids[j].provider == msg.sender)\\n                    {\\n                        activeBidsByProvider[auctionsLength] = auctions[bytes32_auctions[i]];\\n                        auctionsLength++;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        Auction[] memory result = new Auction[](auctionsLength);\\n        for (uint i = 0; i < auctionsLength; i++) \\n        {\\n            result[i] = activeBidsByProvider[i];\\n        }\\n        return result;\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return owner;\\n    }\\n    \\n    function getTasksManager() public view returns(address) {\\n         //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return address(tasksManager);\\n    }\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x6b31aa2e0c375e5a826ab51b4869592057d20073ff14726ce6c2fa67ea0c8aaf\",\"license\":\"GPL-3.0\"},\"contracts/TasksManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract TasksManager {\\n\\n    address private immutable owner; \\n    address private auctionAddress;\\n    uint private bank = 0;\\n\\n    enum TaskState {\\n        Created,\\n        Cancelled, \\n        Active,\\n        CompletedSuccessfully,\\n        CompletedUnsuccessfully,\\n        Invalid, \\n        ResultsReceivedSuccessfully,\\n        ResultsReceivedUnsuccessfully\\n    }\\n\\n    enum PaymentState {\\n        Initialized,\\n        Pending,\\n        Completed \\n    }\\n\\n    struct Task {\\n        bytes32 taskID;\\n        address payable client; \\n        address payable provider;\\n        uint deadline;\\n        uint price;\\n        uint duration;\\n        uint activationTime;\\n        uint completionTime;\\n        string code;\\n        string results;\\n        bytes32 clientVerification;\\n        TaskState taskState;\\n        PaymentState paymentState;\\n    }\\n\\n    struct providerRating {\\n        uint upVotes;\\n        uint downVotes;\\n    }\\n\\n    mapping (bytes32 => Task) private tasks;\\n    bytes32[] private bytes32_tasks;\\n    mapping(address => providerRating) private performance;\\n\\n    //Events\\n    event TaskCreated(bytes32 taskID, address client, address provider);\\n    event TaskActivated(bytes32 taskID, address client, address provider);\\n    event TaskCompletedSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCompletedUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsSuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskReceivedResultsUnsuccessfully(bytes32 taskID, address client, address provider);\\n    event TaskCancelled(bytes32 taskID, address client, address provider);\\n    event TaskInvalidated(bytes32 taskID, address client, address provider);\\n    event PaymentPending(bytes32 taskID, address client, address provider, uint payment);\\n    event PaymentCompleted(bytes32 taskID, address client, address provider);\\n    event TransferMadeToClient(address client, uint amount);\\n    event TransferMadeToProvider(address provider, uint amount);\\n    event ProviderUpvoted(address provider, bytes32 taskID);\\n    event ProviderDownvoted(address provider, bytes32 taskID);\\n    event TaskDeleted(bytes32 taskID);\\n\\n    //Errors\\n    error NotCalledByOwner();\\n    error NotCalledByAuction();\\n    error NotCalledByClient();\\n    error NotCalledByProvider();\\n    error NotCorrectValue(uint correctValue, uint receivedValue);\\n    error TaskNotInState(TaskState taskState);\\n    error PaymentNotInState(PaymentState paymentState);\\n    error TaskDoesNotExist();\\n    error TaskAlreadyExists();\\n    error AuctionsManagerNotSet();\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function setAuctionsManager(address _auctionAddress) public  {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        auctionAddress = _auctionAddress;\\n    }\\n\\n    function createTask(\\n        bytes32 _taskID,\\n        address _client,\\n        address _provider,\\n        uint _price,\\n        uint _deadline,\\n        bytes32 _clientVerification,\\n        string memory _code\\n    ) public payable \\n    {\\n        //auctions manager set\\n        if (auctionAddress == address(0)) \\n            revert AuctionsManagerNotSet();\\n        //auction only\\n        if (msg.sender != auctionAddress) \\n            revert NotCalledByAuction();\\n        //not registered task\\n        if (tasks[_taskID].taskID != bytes32(0)) \\n            revert TaskAlreadyExists();\\n        //correct client collateral\\n        if (msg.value != _price * 2)\\n            revert NotCorrectValue(_price * 2, msg.value);\\n        tasks[_taskID].taskID = _taskID;\\n        tasks[_taskID].client = payable (_client);\\n        tasks[_taskID].provider = payable(_provider);\\n        tasks[_taskID].price = _price;\\n        tasks[_taskID].deadline = _deadline;\\n        tasks[_taskID].clientVerification = _clientVerification;\\n        tasks[_taskID].code = _code;\\n        tasks[_taskID].taskState = TaskState.Created;\\n        tasks[_taskID].paymentState = PaymentState.Initialized;\\n        bytes32_tasks.push(_taskID);\\n        emit TaskCreated(_taskID, _client, _provider);\\n        //clientCollateral = 2 * price\\n        //providerCollateral = 10 * price\\n    }\\n\\n    //Cancel\\n    //TaskState -> Cancel\\n    //refunds payment to client\\n    //can be called only by client and only if contract hasnt been activated by provider\\n\\n    function cancelTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        tasks[_taskID].taskState = TaskState.Cancelled;\\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n        emit TransferMadeToClient(tasks[_taskID].client,tasks[_taskID].price * 2);\\n        emit TaskCancelled(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    function invalidateTask(bytes32 _taskID) public \\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n         //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        require(\\n            (block.timestamp > tasks[_taskID].activationTime + tasks[_taskID].deadline + 86400), //give one day to be invalidated\\n            \\\"Time has not expired.\\\"\\n        );\\n        tasks[_taskID].taskState = TaskState.Invalid;\\n  \\n        tasks[_taskID].client.transfer(tasks[_taskID].price * 12 ); //clientCollateral + providerCollateral\\n        emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 12);\\n        emit TaskInvalidated(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n    // Activate\\n    // TaskState -> Activated\\n    // can be called only by provider to start the process\\n\\n    function activateTask(bytes32 _taskID) public payable\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in taskState Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        //correct provider collateral\\n        if (msg.value != tasks[_taskID].price * 10)\\n            revert NotCorrectValue(tasks[_taskID].price * 10, msg.value);\\n        tasks[_taskID].activationTime = block.timestamp;\\n        tasks[_taskID].taskState = TaskState.Active;\\n        emit TaskActivated(_taskID, tasks[_taskID].client ,tasks[_taskID].provider);\\n    }\\n\\n    // Complete\\n    // TaskState -> Completed\\n    // can be called only by provider when the computation is over\\n\\n    //called by docker container\\n    function completeTask(bytes32 _taskID,string memory ver,  uint _duration, uint _timeReceivedProvider) public\\n    {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        tasks[_taskID].completionTime = _timeReceivedProvider;\\n        tasks[_taskID].duration = _duration;\\n        //in time and correct verification\\n        if ((tasks[_taskID].completionTime <= tasks[_taskID].activationTime + tasks[_taskID].deadline) \\n            && (tasks[_taskID].duration <= tasks[_taskID].deadline) \\n            && (tasks[_taskID].clientVerification == keccak256(abi.encodePacked(ver))))\\n        {\\n            tasks[_taskID].taskState = TaskState.CompletedSuccessfully;\\n            emit TaskCompletedSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n            tasks[_taskID].taskState = TaskState.CompletedUnsuccessfully;\\n            emit TaskCompletedUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n        }\\n    }\\n\\n\\n    //called by provider\\n    function sendResults(bytes32 _taskID, string memory _results) public {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state CompletedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.CompletedSuccessfully) \\n            revert TaskNotInState(TaskState.CompletedSuccessfully);\\n        //in payment state Initialized\\n        if (tasks[_taskID].paymentState != PaymentState.Initialized) \\n            revert PaymentNotInState(PaymentState.Initialized);\\n        uint receiptTime = block.timestamp;\\n        tasks[_taskID].results = _results;\\n        //gives 600 sec to provider to send the results, time received must be greater than completion time\\n        if ((receiptTime >= tasks[_taskID].completionTime)\\n        && (receiptTime <= tasks[_taskID].completionTime + 600) \\n        && (receiptTime >= tasks[_taskID].activationTime + tasks[_taskID].duration) \\n        && (tasks[_taskID].completionTime >= tasks[_taskID].activationTime + tasks[_taskID].duration)) \\n        {\\n            if (tasks[_taskID].price * tasks[_taskID].duration <= tasks[_taskID].price * 2) {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].price * tasks[_taskID].duration + tasks[_taskID].price * 10);\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration + tasks[_taskID].price * 10);\\n                tasks[_taskID].client.transfer(tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n                emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n                tasks[_taskID].paymentState = PaymentState.Completed;\\n                emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);                \\n            }\\n            else {\\n                tasks[_taskID].provider.transfer(tasks[_taskID].price * 12); //clientCollateral + providerCollateral\\n                emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * 12);\\n                tasks[_taskID].paymentState = PaymentState.Pending;\\n                emit PaymentPending(_taskID, tasks[_taskID].client, tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n            }\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedSuccessfully;\\n            emit TaskReceivedResultsSuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            performance[tasks[_taskID].provider].upVotes += 1;\\n            emit ProviderUpvoted(tasks[_taskID].provider,_taskID);\\n        }\\n        else {\\n            tasks[_taskID].client.transfer(tasks[_taskID].price * 2);\\n            emit TransferMadeToClient(tasks[_taskID].client, tasks[_taskID].price * 2);\\n            bank += tasks[_taskID].price * 10; //providerCollateral to bank\\n            tasks[_taskID].taskState = TaskState.ResultsReceivedUnsuccessfully;\\n            emit TaskReceivedResultsUnsuccessfully(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n            performance[tasks[_taskID].provider].downVotes += 1;\\n            emit ProviderDownvoted(tasks[_taskID].provider,_taskID);\\n        }\\n    }\\n\\n\\n    function completePayment(bytes32 _taskID) public payable {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //correct payment value\\n        if (msg.value != tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2)\\n            revert NotCorrectValue(tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2, msg.value);\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Pending\\n        if (tasks[_taskID].paymentState != PaymentState.Pending) \\n            revert PaymentNotInState(PaymentState.Pending);\\n        tasks[_taskID].provider.transfer(msg.value);\\n        emit TransferMadeToProvider(tasks[_taskID].provider, tasks[_taskID].price * tasks[_taskID].duration - tasks[_taskID].price * 2);\\n        tasks[_taskID].paymentState = PaymentState.Completed;\\n        emit PaymentCompleted(_taskID, tasks[_taskID].client, tasks[_taskID].provider);\\n    }\\n\\n\\n    function getPerformance(address provider) public view returns (providerRating memory) {\\n        return performance[provider];\\n        // tuple: upVotes, downVotes\\n    }\\n\\n    function getCode(bytes32 _taskID) public view returns (string memory) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Active\\n        if (tasks[_taskID].taskState != TaskState.Active) \\n            revert TaskNotInState(TaskState.Active);\\n        return tasks[_taskID].code;\\n    }\\n\\n    function getResults(bytes32 _taskID) public view returns (string memory)  {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state ResultsReceivedSuccessfully\\n        if (tasks[_taskID].taskState != TaskState.ResultsReceivedSuccessfully) \\n            revert TaskNotInState(TaskState.ResultsReceivedSuccessfully);\\n        //in payment state Completed\\n        if (tasks[_taskID].paymentState != PaymentState.Completed) \\n            revert PaymentNotInState(PaymentState.Completed);\\n        return tasks[_taskID].results;\\n    }\\n\\n    function getTasksByClient() public view returns (Task[] memory) {\\n        Task[] memory tasksByClient = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].client == msg.sender) {\\n                tasksByClient[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n        for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByClient[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getTasksByProvider() public view returns (Task[] memory) {\\n        Task[] memory tasksByProvider = new Task[](bytes32_tasks.length);\\n        uint counter = 0;\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            if (tasks[bytes32_tasks[i]].provider == msg.sender) {\\n                tasksByProvider[counter] = tasks[bytes32_tasks[i]];\\n                counter++;\\n            }\\n        }\\n        Task[] memory ret = new Task[](counter);\\n         for (uint i = 0; i < counter; i++) \\n        {\\n            ret[i] = tasksByProvider[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getProviderCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //provider only\\n        if (msg.sender != tasks[_taskID].provider) \\n            revert NotCalledByProvider();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 10;\\n    }\\n\\n    function getClientCollateral(bytes32 _taskID) public view returns (uint) {\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        //client only\\n        if (msg.sender != tasks[_taskID].client) \\n            revert NotCalledByClient();\\n        //in task state Created\\n        if (tasks[_taskID].taskState != TaskState.Created) \\n            revert TaskNotInState(TaskState.Created);\\n        return tasks[_taskID].price * 2;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getAuctionAddress() public  view returns (address) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return auctionAddress;\\n    }\\n\\n    function deleteTask(bytes32 _taskID) public {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        //registered task\\n        if (tasks[_taskID].taskID == bytes32(0)) \\n            revert TaskDoesNotExist();\\n        delete tasks[_taskID];\\n        for (uint i=0; i < bytes32_tasks.length; i++)\\n        {\\n            if (bytes32_tasks[i] == _taskID)\\n            {\\n                bytes32_tasks[i] = bytes32_tasks[bytes32_tasks.length - 1];\\n                bytes32_tasks.pop();\\n                break;\\n            }\\n        }\\n        emit TaskDeleted(_taskID);\\n    }\\n\\n    function getTasks() public view returns (Task[] memory) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        Task[] memory ret = new Task[](bytes32_tasks.length);\\n        for (uint i = 0; i < bytes32_tasks.length; i++) {\\n            ret[i] = tasks[bytes32_tasks[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getBank() public view returns (uint) {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        return bank;\\n    }\\n\\n    function withdraw(uint amount) public {\\n        //owner only\\n        if (msg.sender != owner) \\n            revert NotCalledByOwner();\\n        //correct amount\\n        if (amount > bank)\\n            revert NotCorrectValue(bank, amount);\\n        payable(owner).transfer(amount);\\n        bank -= amount;\\n    }\\n\\n\\n    // Fallback Function\\n    fallback() external payable{\\n        revert();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x33e37656ec8801b97f8f024d66a6b2144a35de540520e95ee579c4124866f0bb\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c61464f61007b6000396000818161038701528181610ef201528181612a290152612af3015261464f6000f3fe6080604052600436106100c55760003560e01c8063a02daf961161007f578063cf44b5d511610059578063cf44b5d514610288578063e0a76324146102b3578063e1515563146102dc578063e369e93c1461030757610105565b8063a02daf961461020b578063c618e93814610234578063cd772f5c1461025f57610105565b80629c3f8f1461010a57806312e1d724146101335780633ef4d1301461014f578063893d20e8146101785780639ad01fde146101a35780639b680e7d146101ce57610105565b36610105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fc90613495565b60405180910390fd5b600080fd5b34801561011657600080fd5b50610131600480360381019061012c91906134ff565b610332565b005b61014d6004803603810190610148919061358a565b6105e4565b005b34801561015b57600080fd5b50610176600480360381019061017191906134ff565b610cc3565b005b34801561018457600080fd5b5061018d610eee565b60405161019a91906135d9565b60405180910390f35b3480156101af57600080fd5b506101b8610f16565b6040516101c59190613a26565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f091906134ff565b6113eb565b6040516102029190613ab7565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d9190613c3a565b6114d4565b005b34801561024057600080fd5b506102496116b8565b6040516102569190613a26565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190613cbd565b611b90565b005b34801561029457600080fd5b5061029d612461565b6040516102aa9190613a26565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d59190613d3b565b612a27565b005b3480156102e857600080fd5b506102f1612aef565b6040516102fe91906135d9565b60405180910390f35b34801561031357600080fd5b5061031c612b9c565b6040516103299190613a26565b60405180910390f35b6000801b60016000838152602001908152602001600020600001541415610385576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040a576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090556005820160009055600682016000905560078201600061048591906131dc565b600882016000610495919061321c565b60098201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600b820160006101000a81549060ff0219169055505060005b6002805490508110156105a957816002828154811061050657610505613d68565b5b90600052602060002001541415610596576002600160028054905061052b9190613dc6565b8154811061053c5761053b613d68565b5b90600052602060002001546002828154811061055b5761055a613d68565b5b9060005260206000200181905550600280548061057b5761057a613dfa565b5b600190038181906000526020600020016000905590556105a9565b80806105a190613e29565b9150506104e4565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516105d99190613e81565b60405180910390a150565b6000801b60016000848152602001908152602001600020600001541415610637576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156106e6576106e5613823565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561071c5761071b613823565b5b1461075f5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016107569190613eab565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490613f12565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060080182815481106107fd576107fc613d68565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461088257808061085590613e29565b9150506001600084815260200190815260200160002060080180549050811061087d57610882565b6107be565b600160008481526020019081526020016000206008018054905081106108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490613f7e565b60405180910390fd5b6108e5613240565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016000858152602001908152602001600020600801828154811061094557610944613d68565b5b906000526020600020906004020160010154816020018181525050600281602001516109719190613f9e565b34146109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a990614044565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610a6e57610a6d613823565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686604051610adc93929190614064565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610b1f939291906140d9565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688604051610bbd9493929190614110565b60405180910390a1600060026001600089815260200190815260200160002060090160010154610bed9190613f9e565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b8152600401610c88979695949392919061424b565b6000604051808303818588803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610d16576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db1576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610dc557610dc4613823565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610dfb57610dfa613823565b5b14610e3e5760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610e359190613eab565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610e7757610e76613823565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610ee39291906142c1565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610f3957610f38613b0f565b5b604051908082528060200260200182016040528015610f7257816020015b610f5f613270565b815260200190600190039081610f575790505b5090506000805b600280549050811015611331573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610fb557610fb4613d68565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561131e57600160006002838154811061102657611025613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546110ed90614184565b80601f016020809104026020016040519081016040528092919081815260200182805461111990614184565b80156111665780601f1061113b57610100808354040283529160200191611166565b820191906000526020600020905b81548152906001019060200180831161114957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561123a57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611194565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156112db576112da613823565b5b60028111156112ed576112ec613823565b5b8152505083838151811061130457611303613d68565b5b6020026020010181905250818061131a90613e29565b9250505b808061132990613e29565b915050610f79565b5060008167ffffffffffffffff81111561134e5761134d613b0f565b5b60405190808252806020026020018201604052801561138757816020015b611374613270565b81526020019060019003908161136c5790505b50905060005b828110156113e1578381815181106113a8576113a7613d68565b5b60200260200101518282815181106113c3576113c2613d68565b5b602002602001018190525080806113d990613e29565b91505061138d565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156114c957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611423565b505050509050919050565b60004233868686866040516020016114f196959493929190614323565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061160f929190613301565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561164a57611649613823565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516116a99291906142c1565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156116db576116da613b0f565b5b60405190808252806020026020018201604052801561171457816020015b611701613270565b8152602001906001900390816116f95790505b5090506000805b600280549050811015611ad6573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061175757611756613d68565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ac35760016000600283815481106117cb576117ca613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461189290614184565b80601f01602080910402602001604051908101604052809291908181526020018280546118be90614184565b801561190b5780601f106118e05761010080835404028352916020019161190b565b820191906000526020600020905b8154815290600101906020018083116118ee57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156119df57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611939565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115611a8057611a7f613823565b5b6002811115611a9257611a91613823565b5b81525050838381518110611aa957611aa8613d68565b5b60200260200101819052508180611abf90613e29565b9250505b8080611ace90613e29565b91505061171b565b5060008167ffffffffffffffff811115611af357611af2613b0f565b5b604051908082528060200260200182016040528015611b2c57816020015b611b19613270565b815260200190600190039081611b115790505b50905060005b82811015611b8657838181518110611b4d57611b4c613d68565b5b6020026020010151828281518110611b6857611b67613d68565b5b60200260200101819052508080611b7e90613e29565b915050611b32565b5080935050505090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c17576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b60016000848152602001908152602001600020600001541415611c6a576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115611c7e57611c7d613823565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff166002811115611cb457611cb3613823565b5b14611cf75760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401611cee9190613eab565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d93906143d7565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611dd491906143f7565b421115611e16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0d90614499565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611fa1575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611e7a57611e79613d68565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f00578180611ed290613e29565b9250506001600085815260200190815260200160002060080180549050821115611efb57611f00565b611e3b565b60016000858152602001908152602001600020600801805490508211611fa057600160008581526020019081526020016000206008018281548110611f4857611f47613d68565b5b9060005260206000209060040201600101548310611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f929061452b565b60405180910390fd5b600190505b5b6001151581151514156121c35782600160008681526020019081526020016000206008018381548110611fd757611fd6613d68565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161204591906135d9565b604080518083038186803b15801561205c57600080fd5b505afa158015612070573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209491906145b5565b600001516001600086815260200190815260200160002060080183815481106120c0576120bf613d68565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161212e91906135d9565b604080518083038186803b15801561214557600080fd5b505afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d91906145b5565b602001516001600086815260200190815260200160002060080183815481106121a9576121a8613d68565b5b906000526020600020906004020160030181905550612420565b6121cb613387565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161226691906135d9565b604080518083038186803b15801561227d57600080fd5b505afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b591906145b5565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161231b91906135d9565b604080518083038186803b15801561233257600080fd5b505afa158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a91906145b5565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c66843385604051612453939291906145e2565b60405180910390a150505050565b6060600060028054905067ffffffffffffffff81111561248457612483613b0f565b5b6040519080825280602002602001820160405280156124bd57816020015b6124aa613270565b8152602001906001900390816124a25790505b5090506000805b60028054905081101561296d57600060028111156124e5576124e4613823565b5b60016000600284815481106124fd576124fc613d68565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff16600281111561253957612538613823565b5b1480156125b95750600160006002838154811061255957612558613d68565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061258e5761258d613d68565b5b90600052602060002001548152602001908152602001600020600201546125b591906143f7565b4211155b801561264557503373ffffffffffffffffffffffffffffffffffffffff1660016000600284815481106125ef576125ee613d68565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561295a57600160006002838154811061266257612661613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461272990614184565b80601f016020809104026020016040519081016040528092919081815260200182805461275590614184565b80156127a25780601f10612777576101008083540402835291602001916127a2565b820191906000526020600020905b81548152906001019060200180831161278557829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561287657838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050815260200190600101906127d0565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561291757612916613823565b5b600281111561292957612928613823565b5b815250508383815181106129405761293f613d68565b5b6020026020010181905250818061295690613e29565b9250505b808061296590613e29565b9150506124c4565b5060008167ffffffffffffffff81111561298a57612989613b0f565b5b6040519080825280602002602001820160405280156129c357816020015b6129b0613270565b8152602001906001900390816129a85790505b50905060005b82811015612a1d578381815181106129e4576129e3613d68565b5b60200260200101518282815181106129ff576129fe613d68565b5b60200260200101819052508080612a1590613e29565b9150506129c9565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612aac576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b76576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612bbf57612bbe613b0f565b5b604051908082528060200260200182016040528015612bf857816020015b612be5613270565b815260200190600190039081612bdd5790505b5090506000805b6002805490508110156131225760006002811115612c2057612c1f613823565b5b6001600060028481548110612c3857612c37613d68565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612c7457612c73613823565b5b148015612cf457506001600060028381548110612c9457612c93613d68565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612cc957612cc8613d68565b5b9060005260206000200154815260200190815260200160002060020154612cf091906143f7565b4211155b1561310f5760005b6001600060028481548110612d1457612d13613d68565b5b906000526020600020015481526020019081526020016000206008018054905081101561310d573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612d6a57612d69613d68565b5b906000526020600020015481526020019081526020016000206008018281548110612d9857612d97613d68565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156130fa576001600060028481548110612dfe57612dfd613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612ec590614184565b80601f0160208091040260200160405190810160405280929190818152602001828054612ef190614184565b8015612f3e5780601f10612f1357610100808354040283529160200191612f3e565b820191906000526020600020905b815481529060010190602001808311612f2157829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561301257838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612f6c565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156130b3576130b2613823565b5b60028111156130c5576130c4613823565b5b815250508484815181106130dc576130db613d68565b5b602002602001018190525082806130f290613e29565b93505061310d565b808061310590613e29565b915050612cfc565b505b808061311a90613e29565b915050612bff565b5060008167ffffffffffffffff81111561313f5761313e613b0f565b5b60405190808252806020026020018201604052801561317857816020015b613165613270565b81526020019060019003908161315d5790505b50905060005b828110156131d25783818151811061319957613198613d68565b5b60200260200101518282815181106131b4576131b3613d68565b5b602002602001018190525080806131ca90613e29565b91505061317e565b5080935050505090565b5080546131e890614184565b6000825580601f106131fa5750613219565b601f01602090049060005260206000209081019061321891906133c5565b5b50565b508054600082556004029060005260206000209081019061323d91906133e2565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160608152602001606081526020016132e2613240565b8152602001600060028111156132fb576132fa613823565b5b81525090565b82805461330d90614184565b90600052602060002090601f01602090048101928261332f5760008555613376565b82601f1061334857805160ff1916838001178555613376565b82800160010185558215613376579182015b8281111561337557825182559160200191906001019061335a565b5b50905061338391906133c5565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b808211156133de5760008160009055506001016133c6565b5090565b5b8082111561343457600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055506004016133e3565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b600061347f600883613438565b915061348a82613449565b602082019050919050565b600060208201905081810360008301526134ae81613472565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6134dc816134c9565b81146134e757600080fd5b50565b6000813590506134f9816134d3565b92915050565b600060208284031215613515576135146134bf565b5b6000613523848285016134ea565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135578261352c565b9050919050565b6135678161354c565b811461357257600080fd5b50565b6000813590506135848161355e565b92915050565b600080604083850312156135a1576135a06134bf565b5b60006135af858286016134ea565b92505060206135c085828601613575565b9150509250929050565b6135d38161354c565b82525050565b60006020820190506135ee60008301846135ca565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613629816134c9565b82525050565b6136388161354c565b82525050565b6000819050919050565b6136518161363e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613691578082015181840152602081019050613676565b838111156136a0576000848401525b50505050565b6000601f19601f8301169050919050565b60006136c282613657565b6136cc8185613662565b93506136dc818560208601613673565b6136e5816136a6565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151613732600085018261362f565b5060208201516137456020850182613648565b5060408201516137586040850182613648565b50606082015161376b6060850182613648565b50505050565b600061377d838361371c565b60808301905092915050565b6000602082019050919050565b60006137a1826136f0565b6137ab81856136fb565b93506137b68361370c565b8060005b838110156137e75781516137ce8882613771565b97506137d983613789565b9250506001810190506137ba565b5085935050505092915050565b60408201600082015161380a600085018261362f565b50602082015161381d6020850182613648565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061386357613862613823565b5b50565b600081905061387482613852565b919050565b600061388482613866565b9050919050565b61389481613879565b82525050565b6000610180830160008301516138b36000860182613620565b5060208301516138c6602086018261362f565b5060408301516138d96040860182613648565b5060608301516138ec6060860182613648565b5060808301516138ff6080860182613648565b5060a083015161391260a0860182613620565b5060c083015161392560c0860182613620565b5060e083015184820360e086015261393d82826136b7565b9150506101008301518482036101008601526139598282613796565b9150506101208301516139706101208601826137f4565b5061014083015161398561016086018261388b565b508091505092915050565b600061399c838361389a565b905092915050565b6000602082019050919050565b60006139bc826135f4565b6139c681856135ff565b9350836020820285016139d885613610565b8060005b85811015613a1457848403895281516139f58582613990565b9450613a00836139a4565b925060208a019950506001810190506139dc565b50829750879550505050505092915050565b60006020820190508181036000830152613a4081846139b1565b905092915050565b600082825260208201905092915050565b6000613a64826136f0565b613a6e8185613a48565b9350613a798361370c565b8060005b83811015613aaa578151613a918882613771565b9750613a9c83613789565b925050600181019050613a7d565b5085935050505092915050565b60006020820190508181036000830152613ad18184613a59565b905092915050565b613ae28161363e565b8114613aed57600080fd5b50565b600081359050613aff81613ad9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613b47826136a6565b810181811067ffffffffffffffff82111715613b6657613b65613b0f565b5b80604052505050565b6000613b796134b5565b9050613b858282613b3e565b919050565b600067ffffffffffffffff821115613ba557613ba4613b0f565b5b613bae826136a6565b9050602081019050919050565b82818337600083830152505050565b6000613bdd613bd884613b8a565b613b6f565b905082815260208101848484011115613bf957613bf8613b0a565b5b613c04848285613bbb565b509392505050565b600082601f830112613c2157613c20613b05565b5b8135613c31848260208601613bca565b91505092915050565b60008060008060808587031215613c5457613c536134bf565b5b6000613c6287828801613af0565b9450506020613c7387828801613af0565b9350506040613c84878288016134ea565b925050606085013567ffffffffffffffff811115613ca557613ca46134c4565b5b613cb187828801613c0c565b91505092959194509250565b60008060408385031215613cd457613cd36134bf565b5b6000613ce2858286016134ea565b9250506020613cf385828601613af0565b9150509250929050565b6000613d088261352c565b9050919050565b613d1881613cfd565b8114613d2357600080fd5b50565b600081359050613d3581613d0f565b92915050565b600060208284031215613d5157613d506134bf565b5b6000613d5f84828501613d26565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613dd18261363e565b9150613ddc8361363e565b925082821015613def57613dee613d97565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613e348261363e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e6757613e66613d97565b5b600182019050919050565b613e7b816134c9565b82525050565b6000602082019050613e966000830184613e72565b92915050565b613ea581613879565b82525050565b6000602082019050613ec06000830184613e9c565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613efc601483613438565b9150613f0782613ec6565b602082019050919050565b60006020820190508181036000830152613f2b81613eef565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613f68601683613438565b9150613f7382613f32565b602082019050919050565b60006020820190508181036000830152613f9781613f5b565b9050919050565b6000613fa98261363e565b9150613fb48361363e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613fed57613fec613d97565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b600061402e602083613438565b915061403982613ff8565b602082019050919050565b6000602082019050818103600083015261405d81614021565b9050919050565b60006060820190506140796000830186613e72565b61408660208301856135ca565b61409360408301846135ca565b949350505050565b6040820160008201516140b1600085018261362f565b5060208201516140c46020850182613648565b50505050565b6140d38161363e565b82525050565b60006080820190506140ee60008301866135ca565b6140fb602083018561409b565b61410860608301846140ca565b949350505050565b60006080820190506141256000830187613e72565b6141326020830186613e72565b61413f60408301856135ca565b61414c60608301846135ca565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061419c57607f821691505b602082108114156141b0576141af614155565b5b50919050565b60008190508160005260206000209050919050565b600081546141d881614184565b6141e28186613438565b945060018216600081146141fd576001811461420f57614242565b60ff1983168652602086019350614242565b614218856141b6565b60005b8381101561423a5781548189015260018201915060208101905061421b565b808801955050505b50505092915050565b600060e082019050614260600083018a613e72565b61426d60208301896135ca565b61427a60408301886135ca565b61428760608301876140ca565b61429460808301866140ca565b6142a160a0830185613e72565b81810360c08301526142b381846141cb565b905098975050505050505050565b60006040820190506142d66000830185613e72565b6142e360208301846135ca565b9392505050565b60006142f582613657565b6142ff8185613438565b935061430f818560208601613673565b614318816136a6565b840191505092915050565b600060c08201905061433860008301896140ca565b61434560208301886135ca565b61435260408301876140ca565b61435f60608301866140ca565b61436c6080830185613e72565b81810360a083015261437e81846142ea565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b60006143c1602083613438565b91506143cc8261438b565b602082019050919050565b600060208201905081810360008301526143f0816143b4565b9050919050565b60006144028261363e565b915061440d8361363e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561444257614441613d97565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000614483601183613438565b915061448e8261444d565b602082019050919050565b600060208201905081810360008301526144b281614476565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000614515602c83613438565b9150614520826144b9565b604082019050919050565b6000602082019050818103600083015261454481614508565b9050919050565b600080fd5b60008151905061455f81613ad9565b92915050565b60006040828403121561457b5761457a61454b565b5b6145856040613b6f565b9050600061459584828501614550565b60008301525060206145a984828501614550565b60208301525092915050565b6000604082840312156145cb576145ca6134bf565b5b60006145d984828501614565565b91505092915050565b60006060820190506145f76000830186613e72565b61460460208301856135ca565b61461160408301846140ca565b94935050505056fea2646970667358221220f2cf7d87df9592718347dc0185382f89ee43627020f4c0b28b4e9ab36ceadb4364736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100c55760003560e01c8063a02daf961161007f578063cf44b5d511610059578063cf44b5d514610288578063e0a76324146102b3578063e1515563146102dc578063e369e93c1461030757610105565b8063a02daf961461020b578063c618e93814610234578063cd772f5c1461025f57610105565b80629c3f8f1461010a57806312e1d724146101335780633ef4d1301461014f578063893d20e8146101785780639ad01fde146101a35780639b680e7d146101ce57610105565b36610105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fc90613495565b60405180910390fd5b600080fd5b34801561011657600080fd5b50610131600480360381019061012c91906134ff565b610332565b005b61014d6004803603810190610148919061358a565b6105e4565b005b34801561015b57600080fd5b50610176600480360381019061017191906134ff565b610cc3565b005b34801561018457600080fd5b5061018d610eee565b60405161019a91906135d9565b60405180910390f35b3480156101af57600080fd5b506101b8610f16565b6040516101c59190613a26565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f091906134ff565b6113eb565b6040516102029190613ab7565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d9190613c3a565b6114d4565b005b34801561024057600080fd5b506102496116b8565b6040516102569190613a26565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190613cbd565b611b90565b005b34801561029457600080fd5b5061029d612461565b6040516102aa9190613a26565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d59190613d3b565b612a27565b005b3480156102e857600080fd5b506102f1612aef565b6040516102fe91906135d9565b60405180910390f35b34801561031357600080fd5b5061031c612b9c565b6040516103299190613a26565b60405180910390f35b6000801b60016000838152602001908152602001600020600001541415610385576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040a576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090556005820160009055600682016000905560078201600061048591906131dc565b600882016000610495919061321c565b60098201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090555050600b820160006101000a81549060ff0219169055505060005b6002805490508110156105a957816002828154811061050657610505613d68565b5b90600052602060002001541415610596576002600160028054905061052b9190613dc6565b8154811061053c5761053b613d68565b5b90600052602060002001546002828154811061055b5761055a613d68565b5b9060005260206000200181905550600280548061057b5761057a613dfa565b5b600190038181906000526020600020016000905590556105a9565b80806105a190613e29565b9150506104e4565b507f41410cc188fafc48bef524d33b6af1905e0efa6558c97c73143862092c2f3a15816040516105d99190613e81565b60405180910390a150565b6000801b60016000848152602001908152602001600020600001541415610637576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156106e6576106e5613823565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff16600281111561071c5761071b613823565b5b1461075f5760006040517f3462cfa70000000000000000000000000000000000000000000000000000000081526004016107569190613eab565b60405180910390fd5b600080600160008581526020019081526020016000206008018054905014156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490613f12565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060080182815481106107fd576107fc613d68565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461088257808061085590613e29565b9150506001600084815260200190815260200160002060080180549050811061087d57610882565b6107be565b600160008481526020019081526020016000206008018054905081106108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490613f7e565b60405180910390fd5b6108e5613240565b82816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016000858152602001908152602001600020600801828154811061094557610944613d68565b5b906000526020600020906004020160010154816020018181525050600281602001516109719190613f9e565b34146109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a990614044565b60405180910390fd5b806001600086815260200190815260200160002060090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600160008681526020019081526020016000209050600260016000878152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610a6e57610a6d613823565b5b02179055507f5dc62360c21865a46dfb44f2f1a2386ff4cf8edab29d31b674bc57b890eb997a856001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686604051610adc93929190614064565b60405180910390a160008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168342604051602001610b1f939291906140d9565b6040516020818303038152906040528051906020012090508060016000888152602001908152602001600020600601819055507f23030c321f5f15865b31aad46a08b14abfb76ba6f12355b3b06b1283ecbb2a8b8682600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688604051610bbd9493929190614110565b60405180910390a1600060026001600089815260200190815260200160002060090160010154610bed9190613f9e565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fb1516882848660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a896020015189600401548a600501548b6007016040518963ffffffff1660e01b8152600401610c88979695949392919061424b565b6000604051808303818588803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050505050505050505050565b6000801b60016000838152602001908152602001600020600001541415610d16576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db1576040517f1117923b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610dc557610dc4613823565b5b60016000838152602001908152602001600020600b0160009054906101000a900460ff166002811115610dfb57610dfa613823565b5b14610e3e5760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401610e359190613eab565b60405180910390fd5b6001806000838152602001908152602001600020600b0160006101000a81548160ff02191690836002811115610e7757610e76613823565b5b02179055507fdfd67ed2d9ccedb4f55e5d8893bbe1ec9eaf3b2aa62142cb589acf883cddc0eb816001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610ee39291906142c1565b60405180910390a150565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6060600060028054905067ffffffffffffffff811115610f3957610f38613b0f565b5b604051908082528060200260200182016040528015610f7257816020015b610f5f613270565b815260200190600190039081610f575790505b5090506000805b600280549050811015611331573373ffffffffffffffffffffffffffffffffffffffff166001600060028481548110610fb557610fb4613d68565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561131e57600160006002838154811061102657611025613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546110ed90614184565b80601f016020809104026020016040519081016040528092919081815260200182805461111990614184565b80156111665780601f1061113b57610100808354040283529160200191611166565b820191906000526020600020905b81548152906001019060200180831161114957829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561123a57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611194565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156112db576112da613823565b5b60028111156112ed576112ec613823565b5b8152505083838151811061130457611303613d68565b5b6020026020010181905250818061131a90613e29565b9250505b808061132990613e29565b915050610f79565b5060008167ffffffffffffffff81111561134e5761134d613b0f565b5b60405190808252806020026020018201604052801561138757816020015b611374613270565b81526020019060019003908161136c5790505b50905060005b828110156113e1578381815181106113a8576113a7613d68565b5b60200260200101518282815181106113c3576113c2613d68565b5b602002602001018190525080806113d990613e29565b91505061138d565b5080935050505090565b606060016000838152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b828210156114c957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611423565b505050509050919050565b60004233868686866040516020016114f196959493929190614323565b604051602081830303815290604052805190602001209050806001600083815260200190815260200160002060000181905550336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260016000838152602001908152602001600020600201819055508460016000838152602001908152602001600020600301819055508360016000838152602001908152602001600020600401819055508260016000838152602001908152602001600020600501819055508160016000838152602001908152602001600020600701908051906020019061160f929190613301565b50600060016000838152602001908152602001600020600b0160006101000a81548160ff0219169083600281111561164a57611649613823565b5b021790555060028190806001815401808255809150506001900390600052602060002001600090919091909150557f832e001c1b031a46bae65558b4362398dec9d31b642c5b1420b13fa0c065134381336040516116a99291906142c1565b60405180910390a15050505050565b6060600060028054905067ffffffffffffffff8111156116db576116da613b0f565b5b60405190808252806020026020018201604052801561171457816020015b611701613270565b8152602001906001900390816116f95790505b5090506000805b600280549050811015611ad6573373ffffffffffffffffffffffffffffffffffffffff16600160006002848154811061175757611756613d68565b5b9060005260206000200154815260200190815260200160002060090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ac35760016000600283815481106117cb576117ca613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461189290614184565b80601f01602080910402602001604051908101604052809291908181526020018280546118be90614184565b801561190b5780601f106118e05761010080835404028352916020019161190b565b820191906000526020600020905b8154815290600101906020018083116118ee57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156119df57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611939565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff166002811115611a8057611a7f613823565b5b6002811115611a9257611a91613823565b5b81525050838381518110611aa957611aa8613d68565b5b60200260200101819052508180611abf90613e29565b9250505b8080611ace90613e29565b91505061171b565b5060008167ffffffffffffffff811115611af357611af2613b0f565b5b604051908082528060200260200182016040528015611b2c57816020015b611b19613270565b815260200190600190039081611b115790505b50905060005b82811015611b8657838181518110611b4d57611b4c613d68565b5b6020026020010151828281518110611b6857611b67613d68565b5b60200260200101819052508080611b7e90613e29565b915050611b32565b5080935050505090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c17576040517fec48077700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b60016000848152602001908152602001600020600001541415611c6a576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115611c7e57611c7d613823565b5b60016000848152602001908152602001600020600b0160009054906101000a900460ff166002811115611cb457611cb3613823565b5b14611cf75760006040517f3462cfa7000000000000000000000000000000000000000000000000000000008152600401611cee9190613eab565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d93906143d7565b60405180910390fd5b60016000838152602001908152602001600020600301546001600084815260200190815260200160002060020154611dd491906143f7565b421115611e16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0d90614499565b60405180910390fd5b6000806000600160008681526020019081526020016000206008018054905014611fa1575b3373ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206008018381548110611e7a57611e79613d68565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f00578180611ed290613e29565b9250506001600085815260200190815260200160002060080180549050821115611efb57611f00565b611e3b565b60016000858152602001908152602001600020600801805490508211611fa057600160008581526020019081526020016000206008018281548110611f4857611f47613d68565b5b9060005260206000209060040201600101548310611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f929061452b565b60405180910390fd5b600190505b5b6001151581151514156121c35782600160008681526020019081526020016000206008018381548110611fd757611fd6613d68565b5b90600052602060002090600402016001018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161204591906135d9565b604080518083038186803b15801561205c57600080fd5b505afa158015612070573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209491906145b5565b600001516001600086815260200190815260200160002060080183815481106120c0576120bf613d68565b5b90600052602060002090600402016002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161212e91906135d9565b604080518083038186803b15801561214557600080fd5b505afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d91906145b5565b602001516001600086815260200190815260200160002060080183815481106121a9576121a8613d68565b5b906000526020600020906004020160030181905550612420565b6121cb613387565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161226691906135d9565b604080518083038186803b15801561227d57600080fd5b505afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b591906145b5565b6000015181604001818152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ecc9aaf336040518263ffffffff1660e01b815260040161231b91906135d9565b604080518083038186803b15801561233257600080fd5b505afa158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a91906145b5565b602001518160600181815250506001600086815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050505b7f96d59693caec7bfbd896ccf6bb677a3b2230fec3c76d4b1b482a8670996c7c66843385604051612453939291906145e2565b60405180910390a150505050565b6060600060028054905067ffffffffffffffff81111561248457612483613b0f565b5b6040519080825280602002602001820160405280156124bd57816020015b6124aa613270565b8152602001906001900390816124a25790505b5090506000805b60028054905081101561296d57600060028111156124e5576124e4613823565b5b60016000600284815481106124fd576124fc613d68565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff16600281111561253957612538613823565b5b1480156125b95750600160006002838154811061255957612558613d68565b5b9060005260206000200154815260200190815260200160002060030154600160006002848154811061258e5761258d613d68565b5b90600052602060002001548152602001908152602001600020600201546125b591906143f7565b4211155b801561264557503373ffffffffffffffffffffffffffffffffffffffff1660016000600284815481106125ef576125ee613d68565b5b9060005260206000200154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561295a57600160006002838154811061266257612661613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461272990614184565b80601f016020809104026020016040519081016040528092919081815260200182805461275590614184565b80156127a25780601f10612777576101008083540402835291602001916127a2565b820191906000526020600020905b81548152906001019060200180831161278557829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561287657838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050815260200190600101906127d0565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff16600281111561291757612916613823565b5b600281111561292957612928613823565b5b815250508383815181106129405761293f613d68565b5b6020026020010181905250818061295690613e29565b9250505b808061296590613e29565b9150506124c4565b5060008167ffffffffffffffff81111561298a57612989613b0f565b5b6040519080825280602002602001820160405280156129c357816020015b6129b0613270565b8152602001906001900390816129a85790505b50905060005b82811015612a1d578381815181106129e4576129e3613d68565b5b60200260200101518282815181106129ff576129fe613d68565b5b60200260200101819052508080612a1590613e29565b9150506129c9565b5080935050505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612aac576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b76576040517f82593d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060028054905067ffffffffffffffff811115612bbf57612bbe613b0f565b5b604051908082528060200260200182016040528015612bf857816020015b612be5613270565b815260200190600190039081612bdd5790505b5090506000805b6002805490508110156131225760006002811115612c2057612c1f613823565b5b6001600060028481548110612c3857612c37613d68565b5b90600052602060002001548152602001908152602001600020600b0160009054906101000a900460ff166002811115612c7457612c73613823565b5b148015612cf457506001600060028381548110612c9457612c93613d68565b5b90600052602060002001548152602001908152602001600020600301546001600060028481548110612cc957612cc8613d68565b5b9060005260206000200154815260200190815260200160002060020154612cf091906143f7565b4211155b1561310f5760005b6001600060028481548110612d1457612d13613d68565b5b906000526020600020015481526020019081526020016000206008018054905081101561310d573373ffffffffffffffffffffffffffffffffffffffff166001600060028581548110612d6a57612d69613d68565b5b906000526020600020015481526020019081526020016000206008018281548110612d9857612d97613d68565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156130fa576001600060028481548110612dfe57612dfd613d68565b5b9060005260206000200154815260200190815260200160002060405180610160016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054612ec590614184565b80601f0160208091040260200160405190810160405280929190818152602001828054612ef190614184565b8015612f3e5780601f10612f1357610100808354040283529160200191612f3e565b820191906000526020600020905b815481529060010190602001808311612f2157829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561301257838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190612f6c565b505050508152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001600b820160009054906101000a900460ff1660028111156130b3576130b2613823565b5b60028111156130c5576130c4613823565b5b815250508484815181106130dc576130db613d68565b5b602002602001018190525082806130f290613e29565b93505061310d565b808061310590613e29565b915050612cfc565b505b808061311a90613e29565b915050612bff565b5060008167ffffffffffffffff81111561313f5761313e613b0f565b5b60405190808252806020026020018201604052801561317857816020015b613165613270565b81526020019060019003908161315d5790505b50905060005b828110156131d25783818151811061319957613198613d68565b5b60200260200101518282815181106131b4576131b3613d68565b5b602002602001018190525080806131ca90613e29565b91505061317e565b5080935050505090565b5080546131e890614184565b6000825580601f106131fa5750613219565b601f01602090049060005260206000209081019061321891906133c5565b5b50565b508054600082556004029060005260206000209081019061323d91906133e2565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610160016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160608152602001606081526020016132e2613240565b8152602001600060028111156132fb576132fa613823565b5b81525090565b82805461330d90614184565b90600052602060002090601f01602090048101928261332f5760008555613376565b82601f1061334857805160ff1916838001178555613376565b82800160010185558215613376579182015b8281111561337557825182559160200191906001019061335a565b5b50905061338391906133c5565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b5b808211156133de5760008160009055506001016133c6565b5090565b5b8082111561343457600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055506004016133e3565b5090565b600082825260208201905092915050565b7f6261642063616c6c000000000000000000000000000000000000000000000000600082015250565b600061347f600883613438565b915061348a82613449565b602082019050919050565b600060208201905081810360008301526134ae81613472565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6134dc816134c9565b81146134e757600080fd5b50565b6000813590506134f9816134d3565b92915050565b600060208284031215613515576135146134bf565b5b6000613523848285016134ea565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135578261352c565b9050919050565b6135678161354c565b811461357257600080fd5b50565b6000813590506135848161355e565b92915050565b600080604083850312156135a1576135a06134bf565b5b60006135af858286016134ea565b92505060206135c085828601613575565b9150509250929050565b6135d38161354c565b82525050565b60006020820190506135ee60008301846135ca565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613629816134c9565b82525050565b6136388161354c565b82525050565b6000819050919050565b6136518161363e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613691578082015181840152602081019050613676565b838111156136a0576000848401525b50505050565b6000601f19601f8301169050919050565b60006136c282613657565b6136cc8185613662565b93506136dc818560208601613673565b6136e5816136a6565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b608082016000820151613732600085018261362f565b5060208201516137456020850182613648565b5060408201516137586040850182613648565b50606082015161376b6060850182613648565b50505050565b600061377d838361371c565b60808301905092915050565b6000602082019050919050565b60006137a1826136f0565b6137ab81856136fb565b93506137b68361370c565b8060005b838110156137e75781516137ce8882613771565b97506137d983613789565b9250506001810190506137ba565b5085935050505092915050565b60408201600082015161380a600085018261362f565b50602082015161381d6020850182613648565b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061386357613862613823565b5b50565b600081905061387482613852565b919050565b600061388482613866565b9050919050565b61389481613879565b82525050565b6000610180830160008301516138b36000860182613620565b5060208301516138c6602086018261362f565b5060408301516138d96040860182613648565b5060608301516138ec6060860182613648565b5060808301516138ff6080860182613648565b5060a083015161391260a0860182613620565b5060c083015161392560c0860182613620565b5060e083015184820360e086015261393d82826136b7565b9150506101008301518482036101008601526139598282613796565b9150506101208301516139706101208601826137f4565b5061014083015161398561016086018261388b565b508091505092915050565b600061399c838361389a565b905092915050565b6000602082019050919050565b60006139bc826135f4565b6139c681856135ff565b9350836020820285016139d885613610565b8060005b85811015613a1457848403895281516139f58582613990565b9450613a00836139a4565b925060208a019950506001810190506139dc565b50829750879550505050505092915050565b60006020820190508181036000830152613a4081846139b1565b905092915050565b600082825260208201905092915050565b6000613a64826136f0565b613a6e8185613a48565b9350613a798361370c565b8060005b83811015613aaa578151613a918882613771565b9750613a9c83613789565b925050600181019050613a7d565b5085935050505092915050565b60006020820190508181036000830152613ad18184613a59565b905092915050565b613ae28161363e565b8114613aed57600080fd5b50565b600081359050613aff81613ad9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613b47826136a6565b810181811067ffffffffffffffff82111715613b6657613b65613b0f565b5b80604052505050565b6000613b796134b5565b9050613b858282613b3e565b919050565b600067ffffffffffffffff821115613ba557613ba4613b0f565b5b613bae826136a6565b9050602081019050919050565b82818337600083830152505050565b6000613bdd613bd884613b8a565b613b6f565b905082815260208101848484011115613bf957613bf8613b0a565b5b613c04848285613bbb565b509392505050565b600082601f830112613c2157613c20613b05565b5b8135613c31848260208601613bca565b91505092915050565b60008060008060808587031215613c5457613c536134bf565b5b6000613c6287828801613af0565b9450506020613c7387828801613af0565b9350506040613c84878288016134ea565b925050606085013567ffffffffffffffff811115613ca557613ca46134c4565b5b613cb187828801613c0c565b91505092959194509250565b60008060408385031215613cd457613cd36134bf565b5b6000613ce2858286016134ea565b9250506020613cf385828601613af0565b9150509250929050565b6000613d088261352c565b9050919050565b613d1881613cfd565b8114613d2357600080fd5b50565b600081359050613d3581613d0f565b92915050565b600060208284031215613d5157613d506134bf565b5b6000613d5f84828501613d26565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613dd18261363e565b9150613ddc8361363e565b925082821015613def57613dee613d97565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613e348261363e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e6757613e66613d97565b5b600182019050919050565b613e7b816134c9565b82525050565b6000602082019050613e966000830184613e72565b92915050565b613ea581613879565b82525050565b6000602082019050613ec06000830184613e9c565b92915050565b7f41756374696f6e20686173206e6f20626964732e000000000000000000000000600082015250565b6000613efc601483613438565b9150613f0782613ec6565b602082019050919050565b60006020820190508181036000830152613f2b81613eef565b9050919050565b7f57726f6e672070726f7669646572206164647265737300000000000000000000600082015250565b6000613f68601683613438565b9150613f7382613f32565b602082019050919050565b60006020820190508181036000830152613f9781613f5b565b9050919050565b6000613fa98261363e565b9150613fb48361363e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613fed57613fec613d97565b5b828202905092915050565b7f436c69656e7420636f6c6c61746572616c206973206e6f7420636f7272656374600082015250565b600061402e602083613438565b915061403982613ff8565b602082019050919050565b6000602082019050818103600083015261405d81614021565b9050919050565b60006060820190506140796000830186613e72565b61408660208301856135ca565b61409360408301846135ca565b949350505050565b6040820160008201516140b1600085018261362f565b5060208201516140c46020850182613648565b50505050565b6140d38161363e565b82525050565b60006080820190506140ee60008301866135ca565b6140fb602083018561409b565b61410860608301846140ca565b949350505050565b60006080820190506141256000830187613e72565b6141326020830186613e72565b61413f60408301856135ca565b61414c60608301846135ca565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061419c57607f821691505b602082108114156141b0576141af614155565b5b50919050565b60008190508160005260206000209050919050565b600081546141d881614184565b6141e28186613438565b945060018216600081146141fd576001811461420f57614242565b60ff1983168652602086019350614242565b614218856141b6565b60005b8381101561423a5781548189015260018201915060208101905061421b565b808801955050505b50505092915050565b600060e082019050614260600083018a613e72565b61426d60208301896135ca565b61427a60408301886135ca565b61428760608301876140ca565b61429460808301866140ca565b6142a160a0830185613e72565b81810360c08301526142b381846141cb565b905098975050505050505050565b60006040820190506142d66000830185613e72565b6142e360208301846135ca565b9392505050565b60006142f582613657565b6142ff8185613438565b935061430f818560208601613673565b614318816136a6565b840191505092915050565b600060c08201905061433860008301896140ca565b61434560208301886135ca565b61435260408301876140ca565b61435f60608301866140ca565b61436c6080830185613e72565b81810360a083015261437e81846142ea565b9050979650505050505050565b7f436c69656e742063616e27742062696420746f20746869732061756374696f6e600082015250565b60006143c1602083613438565b91506143cc8261438b565b602082019050919050565b600060208201905081810360008301526143f0816143b4565b9050919050565b60006144028261363e565b915061440d8361363e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561444257614441613d97565b5b828201905092915050565b7f54696d652068617320657870697265642e000000000000000000000000000000600082015250565b6000614483601183613438565b915061448e8261444d565b602082019050919050565b600060208201905081810360008301526144b281614476565b9050919050565b7f426964206973206e6f74206c6f776572207468616e207468616e20746865207060008201527f726576696f7573206f6e652e0000000000000000000000000000000000000000602082015250565b6000614515602c83613438565b9150614520826144b9565b604082019050919050565b6000602082019050818103600083015261454481614508565b9050919050565b600080fd5b60008151905061455f81613ad9565b92915050565b60006040828403121561457b5761457a61454b565b5b6145856040613b6f565b9050600061459584828501614550565b60008301525060206145a984828501614550565b60208301525092915050565b6000604082840312156145cb576145ca6134bf565b5b60006145d984828501614565565b91505092915050565b60006060820190506145f76000830186613e72565b61460460208301856135ca565b61461160408301846140ca565b94935050505056fea2646970667358221220f2cf7d87df9592718347dc0185382f89ee43627020f4c0b28b4e9ab36ceadb4364736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "tasksManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TasksManager)3440"
      },
      {
        "astId": 57,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Auction)38_storage)"
      },
      {
        "astId": 60,
        "contract": "contracts/AuctionsManager.sol:AuctionsManager",
        "label": "bytes32_auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ProviderBid)47_storage)dyn_storage": {
        "base": "t_struct(ProviderBid)47_storage",
        "encoding": "dynamic_array",
        "label": "struct AuctionsManager.ProviderBid[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TasksManager)3440": {
        "encoding": "inplace",
        "label": "contract TasksManager",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)11": {
        "encoding": "inplace",
        "label": "enum AuctionsManager.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)38_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AuctionsManager.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)38_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auction)38_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.Auction",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "client",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 17,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "creationTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskDeadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "clientVerification",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 25,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "taskID",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 27,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "code",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 31,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerBids",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(ProviderBid)47_storage)dyn_storage"
          },
          {
            "astId": 34,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "winnerBid",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(WinnerBid)52_storage"
          },
          {
            "astId": 37,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "auctionState",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(AuctionState)11"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(ProviderBid)47_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.ProviderBid",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 42,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerUpVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "providerDownVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(WinnerBid)52_storage": {
        "encoding": "inplace",
        "label": "struct AuctionsManager.WinnerBid",
        "members": [
          {
            "astId": 49,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 51,
            "contract": "contracts/AuctionsManager.sol:AuctionsManager",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}